        # Command
        make code-quality

        # Exit code
        2

        # STDOUT
        black .  && ruff check .  && python bin/run_mypy.py && bandit -c pyproject.toml -r src
cli/commands/migration.py:63:8: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
61 |     if isinstance(value, dict):
62 |         return {key: _json_safe(val) for key, val in value.items()}
63 |     if isinstance(value, (list, tuple)):
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
64 |         return [_json_safe(item) for item in value]
65 |     if is_dataclass(value):
   |
   = help: Convert to `X | Y`

examples/component_testing_example.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / import numpy as np
10 | | import pandas as pd
11 | | from datetime import datetime, timedelta
12 | | 
13 | | # Import the testing framework
14 | | from src.strategies.components.testing import (
15 | |     ComponentPerformanceTester,
16 | |     RegimeTester,
17 | |     PerformanceAttributionAnalyzer,
18 | |     TestDatasetGenerator,
19 | | )
20 | | 
21 | | # Import components to test
22 | | from src.strategies.components.signal_generator import (
23 | |     HoldSignalGenerator,
24 | |     RandomSignalGenerator,
25 | |     WeightedVotingSignalGenerator,
26 | | )
27 | | from src.strategies.components.risk_manager import FixedRiskManager, VolatilityRiskManager
28 | | from src.strategies.components.position_sizer import (
29 | |     FixedFractionSizer,
30 | |     ConfidenceWeightedSizer,
31 | |     KellySizer,
32 | | )
33 | | 
34 | | 
35 | | def main():
   | |_^ I001
36 |       """Run comprehensive component testing example"""
37 |       print("🧪 Component Testing Framework Example")
   |
   = help: Organize imports

examples/component_testing_example.py:9:17: F401 [*] `numpy` imported but unused
   |
 7 | """
 8 | 
 9 | import numpy as np
   |                 ^^ F401
10 | import pandas as pd
11 | from datetime import datetime, timedelta
   |
   = help: Remove unused import: `numpy`

examples/component_testing_example.py:10:18: F401 [*] `pandas` imported but unused
   |
 9 | import numpy as np
10 | import pandas as pd
   |                  ^^ F401
11 | from datetime import datetime, timedelta
   |
   = help: Remove unused import: `pandas`

examples/component_testing_example.py:11:22: F401 [*] `datetime.datetime` imported but unused
   |
 9 | import numpy as np
10 | import pandas as pd
11 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
12 | 
13 | # Import the testing framework
   |
   = help: Remove unused import

examples/component_testing_example.py:11:32: F401 [*] `datetime.timedelta` imported but unused
   |
 9 | import numpy as np
10 | import pandas as pd
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
12 | 
13 | # Import the testing framework
   |
   = help: Remove unused import

examples/component_testing_example.py:137:5: F841 Local variable `replacement_impact` is assigned to but never used
    |
136 |     # Test component replacement impact
137 |     replacement_impact = attribution_analyzer.analyze_component_replacement_impact(
    |     ^^^^^^^^^^^^^^^^^^ F841
138 |         None, "signal", RandomSignalGenerator(seed=42)  # Would need actual strategy object
139 |     )
    |
    = help: Remove assignment to unused variable `replacement_impact`

examples/component_testing_example.py:140:11: F541 [*] f-string without any placeholders
    |
138 |         None, "signal", RandomSignalGenerator(seed=42)  # Would need actual strategy object
139 |     )
140 |     print(f"   Component replacement analysis completed")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
141 | 
142 |     # 7. Edge Case Testing
    |
    = help: Remove extraneous `f` prefix

examples/performance_parity_validation_example.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / import numpy as np
10 | | import pandas as pd
11 | | from datetime import datetime, timedelta
12 | | from typing import Any, Dict
13 | | 
14 | | from src.strategies.components.testing import (
15 | |     PerformanceParityValidator,
16 | |     ToleranceConfig,
17 | |     ValidationResult,
18 | |     quick_strategy_comparison,
19 | |     validate_migration_readiness,
20 | | )
21 | | 
22 | | 
23 | | def create_sample_backtest_results(
   | |_^ I001
24 |       initial_balance: float = 10000.0,
25 |       days: int = 365,
   |
   = help: Organize imports

examples/performance_parity_validation_example.py:12:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
10 | import pandas as pd
11 | from datetime import datetime, timedelta
12 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | 
14 | from src.strategies.components.testing import (
   |

examples/performance_parity_validation_example.py:12:20: F401 [*] `typing.Any` imported but unused
   |
10 | import pandas as pd
11 | from datetime import datetime, timedelta
12 | from typing import Any, Dict
   |                    ^^^ F401
13 | 
14 | from src.strategies.components.testing import (
   |
   = help: Remove unused import

examples/performance_parity_validation_example.py:12:25: F401 [*] `typing.Dict` imported but unused
   |
10 | import pandas as pd
11 | from datetime import datetime, timedelta
12 | from typing import Any, Dict
   |                         ^^^^ F401
13 | 
14 | from src.strategies.components.testing import (
   |
   = help: Remove unused import

examples/performance_parity_validation_example.py:18:5: F401 [*] `src.strategies.components.testing.quick_strategy_comparison` imported but unused
   |
16 |     ToleranceConfig,
17 |     ValidationResult,
18 |     quick_strategy_comparison,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ F401
19 |     validate_migration_readiness,
20 | )
   |
   = help: Remove unused import

examples/performance_parity_validation_example.py:19:5: F401 [*] `src.strategies.components.testing.validate_migration_readiness` imported but unused
   |
17 |     ValidationResult,
18 |     quick_strategy_comparison,
19 |     validate_migration_readiness,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
20 | )
   |
   = help: Remove unused import

examples/performance_parity_validation_example.py:186:1: I001 [*] Import block is un-sorted or un-formatted
    |
184 |       print("=" * 80)
185 |   
186 | /     from src.strategies.components.testing.statistical_tests import (
187 | |         FinancialStatisticalTests,
188 | |         EquivalenceTests,
189 | |         format_test_results,
190 | |     )
191 | | 
    | |_^ I001
192 |       # Create two return series
193 |       np.random.seed(42)
    |
    = help: Organize imports

examples/performance_parity_validation_example.py:231:1: I001 [*] Import block is un-sorted or un-formatted
    |
229 |       print("=" * 80)
230 |   
231 | /     from src.strategies.components.testing.performance_parity_validator import (
232 | |         PerformanceParityReporter,
233 | |     )
234 | |     import tempfile
235 | |     import os
236 | | 
    | |_^ I001
237 |       # Create sample validation report
238 |       legacy_results = create_sample_backtest_results(seed=42)
    |
    = help: Organize imports

examples/performance_parity_validation_example.py:269:14: UP015 [*] Unnecessary open mode parameters
    |
267 |         import json
268 | 
269 |         with open(json_path, "r") as f:
    |              ^^^^^^^^^^^^^^^^^^^^ UP015
270 |             exported_data = json.load(f)
    |
    = help: Remove open mode parameters

examples/performance_parity_validation_example.py:291:9: F841 Local variable `basic_report` is assigned to but never used
    |
289 |     try:
290 |         # Run examples
291 |         basic_report = example_basic_validation()
    |         ^^^^^^^^^^^^ F841
292 |         custom_report, strict_report = example_custom_tolerances()
293 |         stat_results, equiv_result = example_statistical_analysis()
    |
    = help: Remove assignment to unused variable `basic_report`

examples/performance_parity_validation_example.py:294:9: F841 Local variable `export_report` is assigned to but never used
    |
292 |         custom_report, strict_report = example_custom_tolerances()
293 |         stat_results, equiv_result = example_statistical_analysis()
294 |         export_report = example_export_functionality()
    |         ^^^^^^^^^^^^^ F841
295 | 
296 |         print("\n" + "=" * 80)
    |
    = help: Remove assignment to unused variable `export_report`

migrations/versions/0003_strategy_execution_signal_precision.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / from alembic import op
10 | | import sqlalchemy as sa
11 | | 
12 | | 
13 | | # revision identifiers, used by Alembic.
   | |_^ I001
14 |   revision = "0003_signal_precision"
15 |   down_revision = "0002_strategy_management"
   |
   = help: Organize imports

migrations/versions/0004_preserve_entry_balance_on_positions.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / from alembic import op
10 | | import sqlalchemy as sa
11 | | 
12 | | 
13 | | # revision identifiers, used by Alembic.
   | |_^ I001
14 |   revision = "0004_preserve_entry_balance"
15 |   down_revision = "0003_signal_precision"
   |
   = help: Organize imports

sitecustomize.py:9:4: UP036 Version block is outdated for minimum Python version
   |
 7 | # to an older interpreter (e.g., the macOS default 3.9). This repo depends on
 8 | # 3.11 features like PEP 604 unions, so re-exec into a 3.11 binary when required.
 9 | if sys.version_info < (3, 11):
   |    ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP036
10 |     candidates: list[str] = []
   |
   = help: Remove outdated version block

src/config/config_manager.py:26:35: UP007 [*] Use `X | Y` for type annotations
   |
24 |     """
25 | 
26 |     def __init__(self, providers: Optional[list[ConfigProvider]] = None):
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
27 |         """
28 |         Initialize ConfigManager with providers.
   |
   = help: Convert to `X | Y`

src/config/config_manager.py:49:38: UP007 [*] Use `X | Y` for type annotations
   |
47 |             print("Warning: No configuration providers available!")
48 | 
49 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                      ^^^^^^^^^^^^^ UP007
50 |         """
51 |         Get a configuration value from the first available provider.
   |
   = help: Convert to `X | Y`

src/config/config_manager.py:49:63: UP007 [*] Use `X | Y` for type annotations
   |
47 |             print("Warning: No configuration providers available!")
48 | 
49 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                                               ^^^^^^^^^^^^^ UP007
50 |         """
51 |         Get a configuration value from the first available provider.
   |
   = help: Convert to `X | Y`

src/config/config_manager.py:115:56: UP007 [*] Use `X | Y` for type annotations
    |
114 |     def get_list(
115 |         self, key: str, delimiter: str = ",", default: Optional[list[str]] = None
    |                                                        ^^^^^^^^^^^^^^^^^^^ UP007
116 |     ) -> list[str]:
117 |         """Get configuration value as list"""
    |
    = help: Convert to `X | Y`

src/config/config_manager.py:196:19: UP007 [*] Use `X | Y` for type annotations
    |
195 | # Global configuration instance
196 | _config_instance: Optional[ConfigManager] = None
    |                   ^^^^^^^^^^^^^^^^^^^^^^^ UP007
197 | _config_lock: Optional[threading.Lock] = None
    |
    = help: Convert to `X | Y`

src/config/config_manager.py:197:15: UP007 [*] Use `X | Y` for type annotations
    |
195 | # Global configuration instance
196 | _config_instance: Optional[ConfigManager] = None
197 | _config_lock: Optional[threading.Lock] = None
    |               ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
    |
    = help: Convert to `X | Y`

src/config/feature_flags.py:152:70: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
151 |     # Start with repo defaults
152 |     merged.update({k: v for k, v in _load_repo_defaults().items() if isinstance(v, (bool, str))})
    |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
153 | 
154 |     # Apply overrides
    |
    = help: Convert to `X | Y`

src/config/feature_flags.py:157:12: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
155 |     overrides = _load_env_json("FEATURE_FLAGS_OVERRIDES")
156 |     for k, v in overrides.items():
157 |         if isinstance(v, (bool, str)):
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
158 |             merged[k] = v
    |
    = help: Convert to `X | Y`

src/config/providers/base.py:15:38: UP007 [*] Use `X | Y` for type annotations
   |
14 |     @abstractmethod
15 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[Any]:
   |                                      ^^^^^^^^^^^^^ UP007
16 |         """Get configuration value."""
17 |         pass
   |
   = help: Convert to `X | Y`

src/config/providers/base.py:15:63: UP007 [*] Use `X | Y` for type annotations
   |
14 |     @abstractmethod
15 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[Any]:
   |                                                               ^^^^^^^^^^^^^ UP007
16 |         """Get configuration value."""
17 |         pass
   |
   = help: Convert to `X | Y`

src/config/providers/dotenv_provider.py:41:38: UP007 [*] Use `X | Y` for type annotations
   |
39 |             print(f"Warning: Failed to load {self.env_file}: {e}")
40 | 
41 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                      ^^^^^^^^^^^^^ UP007
42 |         """Get configuration value from .env file."""
43 |         return self._cache.get(key, default)
   |
   = help: Convert to `X | Y`

src/config/providers/dotenv_provider.py:41:63: UP007 [*] Use `X | Y` for type annotations
   |
39 |             print(f"Warning: Failed to load {self.env_file}: {e}")
40 | 
41 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                                               ^^^^^^^^^^^^^ UP007
42 |         """Get configuration value from .env file."""
43 |         return self._cache.get(key, default)
   |
   = help: Convert to `X | Y`

src/config/providers/env_provider.py:19:38: UP007 [*] Use `X | Y` for type annotations
   |
17 |         self._prefix = ""  # Optional prefix for env vars
18 | 
19 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                      ^^^^^^^^^^^^^ UP007
20 |         """Get configuration value from environment variables."""
21 |         return os.getenv(key, default)
   |
   = help: Convert to `X | Y`

src/config/providers/env_provider.py:19:63: UP007 [*] Use `X | Y` for type annotations
   |
17 |         self._prefix = ""  # Optional prefix for env vars
18 | 
19 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                                               ^^^^^^^^^^^^^ UP007
20 |         """Get configuration value from environment variables."""
21 |         return os.getenv(key, default)
   |
   = help: Convert to `X | Y`

src/config/providers/railway_provider.py:55:38: UP007 [*] Use `X | Y` for type annotations
   |
53 |         return any(key in self._env_vars for key in railway_indicators)
54 | 
55 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                      ^^^^^^^^^^^^^ UP007
56 |         """Get configuration value from Railway environment variables."""
57 |         # Railway-specific environment variable
   |
   = help: Convert to `X | Y`

src/config/providers/railway_provider.py:55:63: UP007 [*] Use `X | Y` for type annotations
   |
53 |         return any(key in self._env_vars for key in railway_indicators)
54 | 
55 |     def get(self, key: str, default: Optional[Any] = None) -> Optional[str]:
   |                                                               ^^^^^^^^^^^^^ UP007
56 |         """Get configuration value from Railway environment variables."""
57 |         # Railway-specific environment variable
   |
   = help: Convert to `X | Y`

src/config/providers/railway_provider.py:80:45: UP007 [*] Use `X | Y` for type annotations
   |
78 |         self._load_env_vars()
79 | 
80 |     def get_railway_info(self) -> dict[str, Optional[str]]:
   |                                             ^^^^^^^^^^^^^ UP007
81 |         """
82 |         Get Railway-specific deployment information.
   |
   = help: Convert to `X | Y`

src/dashboards/market_prediction/dashboard.py:102:31: UP017 [*] Use `datetime.UTC` alias
    |
100 |     def _load_price_history(self, symbol: str) -> pd.DataFrame:
101 |         """Load historical daily OHLCV for the symbol (lookback_days)."""
102 |         end_dt = datetime.now(timezone.utc)
    |                               ^^^^^^^^^^^^ UP017
103 |         start_dt = end_dt - timedelta(days=self.lookback_days)
    |
    = help: Convert to `datetime.UTC` alias

src/dashboards/market_prediction/dashboard.py:127:45: UP017 [*] Use `datetime.UTC` alias
    |
125 |         # Ensure datetime index is timezone aware
126 |         if df.index.tzinfo is None or df.index.tz is None:
127 |             df.index = df.index.tz_localize(timezone.utc)
    |                                             ^^^^^^^^^^^^ UP017
128 |         return df
    |
    = help: Convert to `datetime.UTC` alias

src/dashboards/monitoring/dashboard.py:1801:50: UP017 [*] Use `datetime.UTC` alias
     |
1799 |                             if (
1800 |                                 (
1801 |                                     datetime.now(timezone.utc)
     |                                                  ^^^^^^^^^^^^ UP017
1802 |                                     - h["timestamp"].astimezone(timezone.utc)
1803 |                                 ).days
     |
     = help: Convert to `datetime.UTC` alias

src/dashboards/monitoring/dashboard.py:1802:65: UP017 [*] Use `datetime.UTC` alias
     |
1800 |                                 (
1801 |                                     datetime.now(timezone.utc)
1802 |                                     - h["timestamp"].astimezone(timezone.utc)
     |                                                                 ^^^^^^^^^^^^ UP017
1803 |                                 ).days
1804 |                                 >= 1
     |
     = help: Convert to `datetime.UTC` alias

src/data_providers/binance_provider.py:73:24: UP007 [*] Use `X | Y` for type annotations
   |
72 |     def __init__(
73 |         self, api_key: Optional[str] = None, api_secret: Optional[str] = None, testnet: bool = False
   |                        ^^^^^^^^^^^^^ UP007
74 |     ):
75 |         """
   |
   = help: Convert to `X | Y`

src/data_providers/binance_provider.py:73:58: UP007 [*] Use `X | Y` for type annotations
   |
72 |     def __init__(
73 |         self, api_key: Optional[str] = None, api_secret: Optional[str] = None, testnet: bool = False
   |                                                          ^^^^^^^^^^^^^ UP007
74 |     ):
75 |         """
   |
   = help: Convert to `X | Y`

src/data_providers/binance_provider.py:252:66: UP007 [*] Use `X | Y` for type annotations
    |
251 |     def get_historical_data(
252 |         self, symbol: str, timeframe: str, start: datetime, end: Optional[datetime] = None
    |                                                                  ^^^^^^^^^^^^^^^^^^ UP007
253 |     ) -> pd.DataFrame:
254 |         """Fetch historical klines data from Binance"""
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:420:42: UP007 [*] Use `X | Y` for type annotations
    |
418 |             return []
419 | 
420 |     def get_balance(self, asset: str) -> Optional[AccountBalance]:
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
421 |         """Get balance for a specific asset"""
422 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:449:37: UP007 [*] Use `X | Y` for type annotations
    |
447 |             return None
448 | 
449 |     def get_positions(self, symbol: Optional[str] = None) -> list[Position]:
    |                                     ^^^^^^^^^^^^^ UP007
450 |         """Get open positions (for spot trading, this returns holdings as positions)"""
451 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:495:39: UP007 [*] Use `X | Y` for type annotations
    |
493 |             return []
494 | 
495 |     def get_open_orders(self, symbol: Optional[str] = None) -> list[Order]:
    |                                       ^^^^^^^^^^^^^ UP007
496 |         """Get all open orders"""
497 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:538:56: UP007 [*] Use `X | Y` for type annotations
    |
536 |             return []
537 | 
538 |     def get_order(self, order_id: str, symbol: str) -> Optional[Order]:
    |                                                        ^^^^^^^^^^^^^^^ UP007
539 |         """Get specific order by ID"""
540 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:611:16: UP007 [*] Use `X | Y` for type annotations
    |
609 |         order_type: OrderType,
610 |         quantity: float,
611 |         price: Optional[float] = None,
    |                ^^^^^^^^^^^^^^^ UP007
612 |         stop_price: Optional[float] = None,
613 |         time_in_force: str = "GTC",
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:612:21: UP007 [*] Use `X | Y` for type annotations
    |
610 |         quantity: float,
611 |         price: Optional[float] = None,
612 |         stop_price: Optional[float] = None,
    |                     ^^^^^^^^^^^^^^^ UP007
613 |         time_in_force: str = "GTC",
614 |     ) -> Optional[str]:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:614:10: UP007 [*] Use `X | Y` for type annotations
    |
612 |         stop_price: Optional[float] = None,
613 |         time_in_force: str = "GTC",
614 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^ UP007
615 |         """Place a new order and return order ID"""
616 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:683:41: UP007 [*] Use `X | Y` for type annotations
    |
681 |             return False
682 | 
683 |     def cancel_all_orders(self, symbol: Optional[str] = None) -> bool:
    |                                         ^^^^^^^^^^^^^ UP007
684 |         """Cancel all open orders"""
685 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/binance_provider.py:705:47: UP007 [*] Use `X | Y` for type annotations
    |
703 |             return False
704 | 
705 |     def get_symbol_info(self, symbol: str) -> Optional[dict[str, Any]]:
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
706 |         """Get trading symbol information"""
707 |         if not BINANCE_AVAILABLE or not self._client:
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:25:20: UP007 [*] Use `X | Y` for type annotations
   |
23 |         self,
24 |         data_provider: DataProvider,
25 |         cache_dir: Optional[str] = None,
   |                    ^^^^^^^^^^^^^ UP007
26 |         cache_ttl_hours: int = 24,
27 |     ):
   |
   = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:90:50: UP007 [*] Use `X | Y` for type annotations
   |
88 |         return hashlib.sha256(request_str.encode()).hexdigest()
89 | 
90 |     def _get_cache_path(self, cache_key: str) -> Optional[str]:
   |                                                  ^^^^^^^^^^^^^ UP007
91 |         """Get the full path for a cache file."""
92 |         if self.cache_dir is None:
   |
   = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:96:54: UP007 [*] Use `X | Y` for type annotations
   |
94 |         return os.path.join(self.cache_dir, f"{cache_key}.pkl")
95 | 
96 |     def _is_cache_valid(self, cache_path: str, year: Optional[int] = None) -> bool:
   |                                                      ^^^^^^^^^^^^^ UP007
97 |         """
98 |         Check if the cache file exists and is not expired.
   |
   = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:126:52: UP007 [*] Use `X | Y` for type annotations
    |
124 |         return age_hours < self.cache_ttl_hours
125 | 
126 |     def _load_from_cache(self, cache_path: str) -> Optional[pd.DataFrame]:
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^ UP007
127 |         """
128 |         Load data from cache file.
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:146:42: UP007 [*] Use `X | Y` for type annotations
    |
144 |             return None
145 | 
146 |     def _save_to_cache(self, cache_path: Optional[str], data: pd.DataFrame):
    |                                          ^^^^^^^^^^^^^ UP007
147 |         """
148 |         Save data to cache file.
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:192:10: UP007 [*] Use `X | Y` for type annotations
    |
190 |     def _load_year_data(
191 |         self, symbol: str, timeframe: str, year: int, year_start: datetime, year_end: datetime
192 |     ) -> Optional[pd.DataFrame]:
    |          ^^^^^^^^^^^^^^^^^^^^^^ UP007
193 |         """
194 |         Load data for a specific year, either from cache or by fetching.
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:295:16: UP007 [*] Use `X | Y` for type annotations
    |
293 |         symbol: str,
294 |         timeframe: str,
295 |         start: Optional[datetime] = None,
    |                ^^^^^^^^^^^^^^^^^^ UP007
296 |         end: Optional[datetime] = None,
297 |     ) -> pd.DataFrame:
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:296:14: UP007 [*] Use `X | Y` for type annotations
    |
294 |         timeframe: str,
295 |         start: Optional[datetime] = None,
296 |         end: Optional[datetime] = None,
    |              ^^^^^^^^^^^^^^^^^^ UP007
297 |     ) -> pd.DataFrame:
298 |         """
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:416:17: UP007 [*] Use `X | Y` for type annotations
    |
414 |     def clear_cache(
415 |         self,
416 |         symbol: Optional[str] = None,
    |                 ^^^^^^^^^^^^^ UP007
417 |         timeframe: Optional[str] = None,
418 |         year: Optional[int] = None,
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:417:20: UP007 [*] Use `X | Y` for type annotations
    |
415 |         self,
416 |         symbol: Optional[str] = None,
417 |         timeframe: Optional[str] = None,
    |                    ^^^^^^^^^^^^^ UP007
418 |         year: Optional[int] = None,
419 |     ):
    |
    = help: Convert to `X | Y`

src/data_providers/cached_data_provider.py:418:15: UP007 [*] Use `X | Y` for type annotations
    |
416 |         symbol: Optional[str] = None,
417 |         timeframe: Optional[str] = None,
418 |         year: Optional[int] = None,
    |               ^^^^^^^^^^^^^ UP007
419 |     ):
420 |         """
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:55:18: UP007 [*] Use `X | Y` for type annotations
   |
53 |     def __init__(
54 |         self,
55 |         api_key: Optional[str] = None,
   |                  ^^^^^^^^^^^^^ UP007
56 |         api_secret: Optional[str] = None,
57 |         passphrase: Optional[str] = None,
   |
   = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:56:21: UP007 [*] Use `X | Y` for type annotations
   |
54 |         self,
55 |         api_key: Optional[str] = None,
56 |         api_secret: Optional[str] = None,
   |                     ^^^^^^^^^^^^^ UP007
57 |         passphrase: Optional[str] = None,
58 |         testnet: bool = False,
   |
   = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:57:21: UP007 [*] Use `X | Y` for type annotations
   |
55 |         api_key: Optional[str] = None,
56 |         api_secret: Optional[str] = None,
57 |         passphrase: Optional[str] = None,
   |                     ^^^^^^^^^^^^^ UP007
58 |         testnet: bool = False,
59 |     ):
   |
   = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:183:42: UP007 [*] Use `X | Y` for type annotations
    |
181 |             return []
182 | 
183 |     def get_balance(self, asset: str) -> Optional[AccountBalance]:
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
184 |         balances = self.get_balances()
185 |         for bal in balances:
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:190:37: UP007 [*] Use `X | Y` for type annotations
    |
188 |         return None
189 | 
190 |     def get_positions(self, symbol: Optional[str] = None) -> list[Position]:
    |                                     ^^^^^^^^^^^^^ UP007
191 |         logger.info("get_positions not implemented for Coinbase spot API (only holdings)")
192 |         return []
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:194:39: UP007 [*] Use `X | Y` for type annotations
    |
192 |         return []
193 | 
194 |     def get_open_orders(self, symbol: Optional[str] = None) -> list[Order]:
    |                                       ^^^^^^^^^^^^^ UP007
195 |         try:
196 |             params = {"status": "open"}
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:234:56: UP007 [*] Use `X | Y` for type annotations
    |
232 |             return []
233 | 
234 |     def get_order(self, order_id: str, symbol: str) -> Optional[Order]:
    |                                                        ^^^^^^^^^^^^^^^ UP007
235 |         try:
236 |             od = self._request("GET", f"/orders/{order_id}", auth=True)
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:299:16: UP007 [*] Use `X | Y` for type annotations
    |
297 |         order_type: OrderType,
298 |         quantity: float,
299 |         price: Optional[float] = None,
    |                ^^^^^^^^^^^^^^^ UP007
300 |         stop_price: Optional[float] = None,
301 |         time_in_force: str = "GTC",
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:300:21: UP007 [*] Use `X | Y` for type annotations
    |
298 |         quantity: float,
299 |         price: Optional[float] = None,
300 |         stop_price: Optional[float] = None,
    |                     ^^^^^^^^^^^^^^^ UP007
301 |         time_in_force: str = "GTC",
302 |     ) -> Optional[str]:
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:302:10: UP007 [*] Use `X | Y` for type annotations
    |
300 |         stop_price: Optional[float] = None,
301 |         time_in_force: str = "GTC",
302 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^ UP007
303 |         try:
304 |             cb_type = self._convert_to_cb_type(order_type)
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:338:41: UP007 [*] Use `X | Y` for type annotations
    |
336 |             return False
337 | 
338 |     def cancel_all_orders(self, symbol: Optional[str] = None) -> bool:
    |                                         ^^^^^^^^^^^^^ UP007
339 |         try:
340 |             params = (
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:351:47: UP007 [*] Use `X | Y` for type annotations
    |
349 |             return False
350 | 
351 |     def get_symbol_info(self, symbol: str) -> Optional[dict[str, Any]]:
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
352 |         try:
353 |             product = self._request(
    |
    = help: Convert to `X | Y`

src/data_providers/coinbase_provider.py:424:14: UP007 [*] Use `X | Y` for type annotations
    |
422 |         timeframe: str,
423 |         start: datetime,
424 |         end: Optional[datetime] = None,
    |              ^^^^^^^^^^^^^^^^^^ UP007
425 |     ) -> pd.DataFrame:
426 |         try:
    |
    = help: Convert to `X | Y`

src/data_providers/data_provider.py:54:66: UP007 [*] Use `X | Y` for type annotations
   |
52 |     @abstractmethod
53 |     def get_historical_data(
54 |         self, symbol: str, timeframe: str, start: datetime, end: Optional[datetime] = None
   |                                                                  ^^^^^^^^^^^^^^^^^^ UP007
55 |     ) -> pd.DataFrame:
56 |         """
   |
   = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:77:12: UP007 [*] Use `X | Y` for type annotations
   |
75 |     order_type: OrderType
76 |     quantity: float
77 |     price: Optional[float]  # None for market orders
   |            ^^^^^^^^^^^^^^^ UP007
78 |     status: OrderStatus
79 |     filled_quantity: float
   |
   = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:80:20: UP007 [*] Use `X | Y` for type annotations
   |
78 |     status: OrderStatus
79 |     filled_quantity: float
80 |     average_price: Optional[float]
   |                    ^^^^^^^^^^^^^^^ UP007
81 |     commission: float
82 |     commission_asset: str
   |
   = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:85:17: UP007 [*] Use `X | Y` for type annotations
   |
83 |     create_time: datetime
84 |     update_time: datetime
85 |     stop_price: Optional[float] = None
   |                 ^^^^^^^^^^^^^^^ UP007
86 |     time_in_force: str = "GTC"
   |
   = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:149:42: UP007 [*] Use `X | Y` for type annotations
    |
148 |     @abstractmethod
149 |     def get_balance(self, asset: str) -> Optional[AccountBalance]:
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
150 |         """Get balance for a specific asset"""
151 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:154:37: UP007 [*] Use `X | Y` for type annotations
    |
153 |     @abstractmethod
154 |     def get_positions(self, symbol: Optional[str] = None) -> list[Position]:
    |                                     ^^^^^^^^^^^^^ UP007
155 |         """Get open positions (for futures/margin trading)"""
156 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:159:39: UP007 [*] Use `X | Y` for type annotations
    |
158 |     @abstractmethod
159 |     def get_open_orders(self, symbol: Optional[str] = None) -> list[Order]:
    |                                       ^^^^^^^^^^^^^ UP007
160 |         """Get all open orders"""
161 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:164:56: UP007 [*] Use `X | Y` for type annotations
    |
163 |     @abstractmethod
164 |     def get_order(self, order_id: str, symbol: str) -> Optional[Order]:
    |                                                        ^^^^^^^^^^^^^^^ UP007
165 |         """Get specific order by ID"""
166 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:180:16: UP007 [*] Use `X | Y` for type annotations
    |
178 |         order_type: OrderType,
179 |         quantity: float,
180 |         price: Optional[float] = None,
    |                ^^^^^^^^^^^^^^^ UP007
181 |         stop_price: Optional[float] = None,
182 |         time_in_force: str = "GTC",
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:181:21: UP007 [*] Use `X | Y` for type annotations
    |
179 |         quantity: float,
180 |         price: Optional[float] = None,
181 |         stop_price: Optional[float] = None,
    |                     ^^^^^^^^^^^^^^^ UP007
182 |         time_in_force: str = "GTC",
183 |     ) -> Optional[str]:
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:183:10: UP007 [*] Use `X | Y` for type annotations
    |
181 |         stop_price: Optional[float] = None,
182 |         time_in_force: str = "GTC",
183 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^ UP007
184 |         """Place a new order and return order ID"""
185 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:193:41: UP007 [*] Use `X | Y` for type annotations
    |
192 |     @abstractmethod
193 |     def cancel_all_orders(self, symbol: Optional[str] = None) -> bool:
    |                                         ^^^^^^^^^^^^^ UP007
194 |         """Cancel all open orders"""
195 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:198:47: UP007 [*] Use `X | Y` for type annotations
    |
197 |     @abstractmethod
198 |     def get_symbol_info(self, symbol: str) -> Optional[dict[str, Any]]:
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
199 |         """Get trading symbol information (min qty, price precision, etc.)"""
200 |         pass
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:250:16: UP007 [*] Use `X | Y` for type annotations
    |
248 |         order_type: OrderType,
249 |         quantity: float,
250 |         price: Optional[float] = None,
    |                ^^^^^^^^^^^^^^^ UP007
251 |     ) -> tuple[bool, Optional[str]]:
252 |         """
    |
    = help: Convert to `X | Y`

src/data_providers/exchange_interface.py:251:22: UP007 [*] Use `X | Y` for type annotations
    |
249 |         quantity: float,
250 |         price: Optional[float] = None,
251 |     ) -> tuple[bool, Optional[str]]:
    |                      ^^^^^^^^^^^^^ UP007
252 |         """
253 |         Validate order parameters before placing.
    |
    = help: Convert to `X | Y`

src/data_providers/feargreed_provider.py:73:60: UP017 [*] Use `datetime.UTC` alias
   |
71 |                     {
72 |                         "timestamp": datetime.fromtimestamp(
73 |                             int(r.get("timestamp", 0)), tz=timezone.utc
   |                                                            ^^^^^^^^^^^^ UP017
74 |                         ),
75 |                         "value": float(r.get("value", 0.0)),
   |
   = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:131:40: UP017 [*] Use `datetime.UTC` alias
    |
129 |         last = self.data.index.max()
130 |         if last.tzinfo is None:
131 |             last = last.replace(tzinfo=timezone.utc)
    |                                        ^^^^^^^^^^^^ UP017
132 |         # Normalize now_ts to timezone-aware UTC for safe subtraction
133 |         if now_ts.tzinfo is None:
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:134:44: UP017 [*] Use `datetime.UTC` alias
    |
132 |         # Normalize now_ts to timezone-aware UTC for safe subtraction
133 |         if now_ts.tzinfo is None:
134 |             now_ts = now_ts.replace(tzinfo=timezone.utc)
    |                                            ^^^^^^^^^^^^ UP017
135 |         return (now_ts - last) <= timedelta(days=self.freshness_days)
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:138:50: UP007 [*] Use `X | Y` for type annotations
    |
137 |     def get_historical_sentiment(
138 |         self, symbol: str, start: datetime, end: Optional[datetime] = None
    |                                                  ^^^^^^^^^^^^^^^^^^ UP007
139 |     ) -> pd.DataFrame:
140 |         # Fear & Greed is market-level; symbol ignored except for logging
    |
    = help: Convert to `X | Y`

src/data_providers/feargreed_provider.py:142:32: UP017 [*] Use `datetime.UTC` alias
    |
140 |         # Fear & Greed is market-level; symbol ignored except for logging
141 |         if end is None:
142 |             end = datetime.now(timezone.utc)
    |                                ^^^^^^^^^^^^ UP017
143 |         if start.tzinfo is None:
144 |             start = start.replace(tzinfo=timezone.utc)
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:144:42: UP017 [*] Use `datetime.UTC` alias
    |
142 |             end = datetime.now(timezone.utc)
143 |         if start.tzinfo is None:
144 |             start = start.replace(tzinfo=timezone.utc)
    |                                          ^^^^^^^^^^^^ UP017
145 |         if end.tzinfo is None:
146 |             end = end.replace(tzinfo=timezone.utc)
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:146:38: UP017 [*] Use `datetime.UTC` alias
    |
144 |             start = start.replace(tzinfo=timezone.utc)
145 |         if end.tzinfo is None:
146 |             end = end.replace(tzinfo=timezone.utc)
    |                                      ^^^^^^^^^^^^ UP017
147 | 
148 |         if self.data.empty:
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/feargreed_provider.py:187:40: UP017 [*] Use `datetime.UTC` alias
    |
185 |             return self._neutral()
186 |         if date.tzinfo is None:
187 |             date = date.replace(tzinfo=timezone.utc)
    |                                        ^^^^^^^^^^^^ UP017
188 |         idx = self.data.index.get_indexer([date], method="ffill")
189 |         if idx.size == 0 or idx[0] < 0:
    |
    = help: Convert to `datetime.UTC` alias

src/data_providers/sentiment_provider.py:19:50: UP007 [*] Use `X | Y` for type annotations
   |
17 |     @abstractmethod
18 |     def get_historical_sentiment(
19 |         self, symbol: str, start: datetime, end: Optional[datetime] = None
   |                                                  ^^^^^^^^^^^^^^^^^^ UP007
20 |     ) -> pd.DataFrame:
21 |         """
   |
   = help: Convert to `X | Y`

src/database/manager.py:1164:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
     |
1162 |             import numpy as np
1163 | 
1164 |             if isinstance(val, (np.integer,)):
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
1165 |                 return int(val)
1166 |             elif isinstance(val, (np.floating,)):
     |
     = help: Convert to `X | Y`

src/database/manager.py:1166:18: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
     |
1164 |             if isinstance(val, (np.integer,)):
1165 |                 return int(val)
1166 |             elif isinstance(val, (np.floating,)):
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
1167 |                 return float(val)
1168 |             elif hasattr(val, "item") and callable(val.item):
     |
     = help: Convert to `X | Y`

src/database/manager.py:1405:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
     |
1403 |             # Some unit tests mock the session and return a MagicMock instead of
1404 |             # a list.  Gracefully degrade when the result is not list-like.
1405 |             if not isinstance(account_history, (list, tuple)):
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
1406 |                 account_history = []
     |
     = help: Convert to `X | Y`

src/database/manager.py:1761:14: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
     |
1759 |                 return None
1760 |             return obj
1761 |         elif isinstance(obj, (np.integer,)):
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
1762 |             return int(obj)
1763 |         elif isinstance(obj, (np.floating,)):
     |
     = help: Convert to `X | Y`

src/database/manager.py:1763:14: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
     |
1761 |         elif isinstance(obj, (np.integer,)):
1762 |             return int(obj)
1763 |         elif isinstance(obj, (np.floating,)):
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
1764 |             return float(obj)
1765 |         elif isinstance(obj, np.generic):
     |
     = help: Convert to `X | Y`

src/database_manager/app.py:196:20: UP007 [*] Use `X | Y` for type annotations
    |
194 |     @app.teardown_appcontext
195 |     def shutdown_session(
196 |         exception: Optional[Exception] = None,
    |                    ^^^^^^^^^^^^^^^^^^^ UP007
197 |     ) -> None:  # noqa: D401, pylint: disable=unused-argument
198 |         """Remove the scoped SQLAlchemy session to avoid connection leaks."""
    |
    = help: Convert to `X | Y`

src/live/account_sync.py:47:21: UP007 [*] Use `X | Y` for type annotations
   |
45 |         exchange: ExchangeInterface,
46 |         db_manager: DatabaseManager,
47 |         session_id: Optional[int] = None,
   |                     ^^^^^^^^^^^^^ UP007
48 |     ):
49 |         """
   |
   = help: Convert to `X | Y`

src/live/account_sync.py:60:30: UP007 [*] Use `X | Y` for type annotations
   |
58 |         self.db_manager = db_manager
59 |         self.session_id = session_id
60 |         self.last_sync_time: Optional[datetime] = None
   |                              ^^^^^^^^^^^^^^^^^^ UP007
61 | 
62 |     def sync_account_data(self, force: bool = False) -> SyncResult:
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:11:1: UP035 [*] Import from `collections.abc` instead: `Callable`
   |
 9 | from dataclasses import dataclass
10 | from datetime import datetime, timedelta
11 | from typing import Any, Callable, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import pandas as pd
   |
   = help: Import from `collections.abc`

src/live/regime_strategy_switcher.py:78:24: UP007 [*] Use `X | Y` for type annotations
   |
76 |         self,
77 |         strategy_manager: StrategyManager,
78 |         regime_config: Optional[RegimeConfig] = None,
   |                        ^^^^^^^^^^^^^^^^^^^^^^ UP007
79 |         strategy_mapping: Optional[RegimeStrategyMapping] = None,
80 |         switching_config: Optional[SwitchingConfig] = None,
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:79:27: UP007 [*] Use `X | Y` for type annotations
   |
77 |         strategy_manager: StrategyManager,
78 |         regime_config: Optional[RegimeConfig] = None,
79 |         strategy_mapping: Optional[RegimeStrategyMapping] = None,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
80 |         switching_config: Optional[SwitchingConfig] = None,
81 |     ):
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:80:27: UP007 [*] Use `X | Y` for type annotations
   |
78 |         regime_config: Optional[RegimeConfig] = None,
79 |         strategy_mapping: Optional[RegimeStrategyMapping] = None,
80 |         switching_config: Optional[SwitchingConfig] = None,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
81 |     ):
82 |         self.strategy_manager = strategy_manager
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:92:30: UP007 [*] Use `X | Y` for type annotations
   |
91 |         # State tracking
92 |         self.current_regime: Optional[str] = None
   |                              ^^^^^^^^^^^^^ UP007
93 |         self.regime_confidence: float = 0.0
94 |         self.regime_start_time: Optional[datetime] = None
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:94:33: UP007 [*] Use `X | Y` for type annotations
   |
92 |         self.current_regime: Optional[str] = None
93 |         self.regime_confidence: float = 0.0
94 |         self.regime_start_time: Optional[datetime] = None
   |                                 ^^^^^^^^^^^^^^^^^^ UP007
95 |         self.regime_start_candle_index: Optional[int] = None
96 |         self.last_switch_time: Optional[datetime] = None
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:95:41: UP007 [*] Use `X | Y` for type annotations
   |
93 |         self.regime_confidence: float = 0.0
94 |         self.regime_start_time: Optional[datetime] = None
95 |         self.regime_start_candle_index: Optional[int] = None
   |                                         ^^^^^^^^^^^^^ UP007
96 |         self.last_switch_time: Optional[datetime] = None
97 |         self.regime_duration: int = 0
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:96:32: UP007 [*] Use `X | Y` for type annotations
   |
94 |         self.regime_start_time: Optional[datetime] = None
95 |         self.regime_start_candle_index: Optional[int] = None
96 |         self.last_switch_time: Optional[datetime] = None
   |                                ^^^^^^^^^^^^^^^^^^ UP007
97 |         self.regime_duration: int = 0
   |
   = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:112:32: UP007 [*] Use `X | Y` for type annotations
    |
111 |         # Callbacks
112 |         self.on_regime_change: Optional[Callable] = None
    |                                ^^^^^^^^^^^^^^^^^^ UP007
113 |         self.on_strategy_switch: Optional[Callable] = None
    |
    = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:113:34: UP007 [*] Use `X | Y` for type annotations
    |
111 |         # Callbacks
112 |         self.on_regime_change: Optional[Callable] = None
113 |         self.on_strategy_switch: Optional[Callable] = None
    |                                  ^^^^^^^^^^^^^^^^^^ UP007
114 | 
115 |         logger.info("RegimeStrategySwitcher initialized")
    |
    = help: Convert to `X | Y`

src/live/regime_strategy_switcher.py:240:70: UP007 [*] Use `X | Y` for type annotations
    |
239 |     def should_switch_strategy(
240 |         self, regime_analysis: dict[str, Any], current_candle_index: Optional[int] = None
    |                                                                      ^^^^^^^^^^^^^ UP007
241 |     ) -> dict[str, Any]:
242 |         """Determine if strategy should be switched based on regime analysis
    |
    = help: Convert to `X | Y`

src/monitoring/__init__.py:10:12: UP007 [*] Use `X | Y` for type annotations
   |
 9 | # Back-compat shim for tests expecting src.monitoring.dashboard.*
10 | dashboard: Union[_types.ModuleType, _types.SimpleNamespace]
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
11 | try:
12 |     _dash_mod = _import_module("src.dashboards.monitoring.dashboard")
   |
   = help: Convert to `X | Y`

src/monitoring/demo_data.py:23:32: UP007 [*] Use `X | Y` for type annotations
   |
21 |     """
22 | 
23 |     def __init__(self, db_url: Optional[str] = None):
   |                                ^^^^^^^^^^^^^ UP007
24 |         """Create a demo-data generator backed by PostgreSQL.
   |
   = help: Convert to `X | Y`

src/performance/metrics.py:16:10: UP007 Use `X | Y` for type annotations
   |
14 | import pandas as pd
15 | 
16 | Number = Union[int, float]
   |          ^^^^^^^^^^^^^^^^^ UP007
   |
   = help: Convert to `X | Y`

src/position_management/dynamic_risk.py:86:17: UP007 [*] Use `X | Y` for type annotations
   |
84 |     def __init__(
85 |         self,
86 |         config: Optional[DynamicRiskConfig] = None,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
87 |         db_manager: Optional["DatabaseManager"] = None,
88 |     ):
   |
   = help: Convert to `X | Y`

src/position_management/dynamic_risk.py:101:21: UP007 [*] Use `X | Y` for type annotations
    |
 99 |         current_balance: float,
100 |         peak_balance: float,
101 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
102 |         previous_peak_balance: Optional[float] = None,
103 |     ) -> RiskAdjustments:
    |
    = help: Convert to `X | Y`

src/position_management/dynamic_risk.py:102:32: UP007 [*] Use `X | Y` for type annotations
    |
100 |         peak_balance: float,
101 |         session_id: Optional[int] = None,
102 |         previous_peak_balance: Optional[float] = None,
    |                                ^^^^^^^^^^^^^^^ UP007
103 |     ) -> RiskAdjustments:
104 |         """
    |
    = help: Convert to `X | Y`

src/position_management/dynamic_risk.py:222:52: UP007 [*] Use `X | Y` for type annotations
    |
220 |         return max(0.0, (peak_balance - current_balance) / peak_balance)
221 | 
222 |     def _get_performance_metrics(self, session_id: Optional[int]) -> dict[str, Any]:
    |                                                    ^^^^^^^^^^^^^ UP007
223 |         """Get cached performance metrics or calculate new ones"""
224 |         now = datetime.utcnow()
    |
    = help: Convert to `X | Y`

src/position_management/dynamic_risk.py:384:61: UP007 [*] Use `X | Y` for type annotations
    |
382 |             return RiskAdjustments(primary_reason="normal_volatility")
383 | 
384 |     def _calculate_correlation_adjustment(self, session_id: Optional[int]) -> RiskAdjustments:
    |                                                             ^^^^^^^^^^^^^ UP007
385 |         """
386 |         Calculate adjustments based on position correlation (placeholder implementation).
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:45:12: UP007 [*] Use `X | Y` for type annotations
   |
43 |     features_used: int
44 |     cache_hit: bool = False
45 |     error: Optional[str] = None
   |            ^^^^^^^^^^^^^ UP007
46 |     metadata: dict[str, Any] = field(default_factory=dict)
   |
   = help: Convert to `X | Y`

src/prediction/engine.py:52:32: UP007 [*] Use `X | Y` for type annotations
   |
50 |     """Main prediction engine facade that orchestrates all components"""
51 | 
52 |     def __init__(self, config: Optional[PredictionConfig] = None, database_manager=None):
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
53 |         """
54 |         Initialize prediction engine with configuration
   |
   = help: Convert to `X | Y`

src/prediction/engine.py:109:55: UP007 [*] Use `X | Y` for type annotations
    |
107 |         # No cached structured selection helpers (avoid hidden state)
108 | 
109 |     def predict(self, data: pd.DataFrame, model_name: Optional[str] = None) -> PredictionResult:
    |                                                       ^^^^^^^^^^^^^ UP007
110 |         """
111 |         Main prediction method - unified interface for all predictions
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:208:21: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
206 |             if (
207 |                 hasattr(self.config, "max_prediction_latency")
208 |                 and isinstance(self.config.max_prediction_latency, (int, float))
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
209 |                 and inference_time > self.config.max_prediction_latency
210 |             ):
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:216:44: UP017 [*] Use `datetime.UTC` alias
    |
214 |                     direction=0,
215 |                     model_name=final_model_name,
216 |                     timestamp=datetime.now(timezone.utc),
    |                                            ^^^^^^^^^^^^ UP017
217 |                     inference_time=inference_time,
218 |                     features_used=features_used,
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:249:40: UP017 [*] Use `datetime.UTC` alias
    |
247 |                 direction=final_dir,
248 |                 model_name=final_model_name,
249 |                 timestamp=datetime.now(timezone.utc),
    |                                        ^^^^^^^^^^^^ UP017
250 |                 inference_time=inference_time,
251 |                 features_used=features_used,
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:277:21: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
275 |             if (
276 |                 hasattr(self.config, "max_prediction_latency")
277 |                 and isinstance(self.config.max_prediction_latency, (int, float))
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
278 |                 and total_time > self.config.max_prediction_latency
279 |             ):
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:290:40: UP017 [*] Use `datetime.UTC` alias
    |
288 |                 direction=0,
289 |                 model_name=model_name or "unknown",
290 |                 timestamp=datetime.now(timezone.utc),
    |                                        ^^^^^^^^^^^^ UP017
291 |                 inference_time=total_time,
292 |                 features_used=0,
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:303:21: UP007 [*] Use `X | Y` for type annotations
    |
301 |         self,
302 |         data: pd.DataFrame,
303 |         model_name: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
304 |         batch_size: int = 1024,
305 |         return_denormalized: bool = False,
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:306:35: UP007 [*] Use `X | Y` for type annotations
    |
304 |         batch_size: int = 1024,
305 |         return_denormalized: bool = False,
306 |         sequence_length_override: Optional[int] = None,
    |                                   ^^^^^^^^^^^^^ UP007
307 |     ) -> dict[str, Any]:
308 |         """
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:323:22: UP007 [*] Use `X | Y` for type annotations
    |
321 |         model = bundle.runner
322 | 
323 |         features_df: Optional[pd.DataFrame]
    |                      ^^^^^^^^^^^^^^^^^^^^^^ UP007
324 |         if isinstance(features_df_or_arr, pd.DataFrame):
325 |             features_df = features_df_or_arr
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:344:33: UP007 [*] Use `X | Y` for type annotations
    |
343 |         feat = base_features
344 |         schema_sequence_length: Optional[int] = None
    |                                 ^^^^^^^^^^^^^ UP007
345 |         if features_df is not None and bundle.feature_schema:
346 |             try:
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:421:61: UP007 [*] Use `X | Y` for type annotations
    |
420 |     def predict_batch(
421 |         self, data_batches: list[pd.DataFrame], model_name: Optional[str] = None
    |                                                             ^^^^^^^^^^^^^ UP007
422 |     ) -> list[PredictionResult]:
423 |         """
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:449:44: UP017 [*] Use `datetime.UTC` alias
    |
447 |                     direction=0,
448 |                     model_name=model_name or "unknown",
449 |                     timestamp=datetime.now(timezone.utc),
    |                                            ^^^^^^^^^^^^ UP017
450 |                     inference_time=0.0,
451 |                     features_used=0,
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:513:44: UP017 [*] Use `datetime.UTC` alias
    |
511 |                     direction=prediction.direction,
512 |                     model_name=prediction.model_name,
513 |                     timestamp=datetime.now(timezone.utc),
    |                                            ^^^^^^^^^^^^ UP017
514 |                     inference_time=inference_time,
515 |                     features_used=self._count_features_used(prepared_features),
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:538:44: UP017 [*] Use `datetime.UTC` alias
    |
536 |                     direction=0,
537 |                     model_name=model_name or "unknown",
538 |                     timestamp=datetime.now(timezone.utc),
    |                                            ^^^^^^^^^^^^ UP017
539 |                     inference_time=time.time() - start_time,
540 |                     features_used=0,
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:640:50: UP007 [*] Use `X | Y` for type annotations
    |
638 |         return stats
639 | 
640 |     def invalidate_model_cache(self, model_name: Optional[str] = None) -> int:
    |                                                  ^^^^^^^^^^^^^ UP007
641 |         """
642 |         Invalidate prediction cache for specific model or all models.
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:674:39: UP017 [*] Use `datetime.UTC` alias
    |
672 |             "status": "healthy",
673 |             "components": {},
674 |             "timestamp": datetime.now(timezone.utc).isoformat(),
    |                                       ^^^^^^^^^^^^ UP017
675 |         }
    |
    = help: Convert to `datetime.UTC` alias

src/prediction/engine.py:821:22: UP007 [*] Use `X | Y` for type annotations
    |
819 |         bundle: StrategyModel,
820 |         raw_features: np.ndarray,
821 |         features_df: Optional[pd.DataFrame],
    |                      ^^^^^^^^^^^^^^^^^^^^^^ UP007
822 |     ) -> np.ndarray:
823 |         """Align feature matrix to a bundle's schema when available."""
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:848:43: UP007 [*] Use `X | Y` for type annotations
    |
846 |         return 0
847 | 
848 |     def _resolve_bundle(self, model_name: Optional[str]) -> StrategyModel:
    |                                           ^^^^^^^^^^^^^ UP007
849 |         """Resolve the model bundle to use for an inference request."""
    |
    = help: Convert to `X | Y`

src/prediction/engine.py:868:38: UP007 [*] Use `X | Y` for type annotations
    |
866 |         raise ModelNotFoundError("No prediction models available")
867 | 
868 |     def _get_model(self, model_name: Optional[str]):
    |                                      ^^^^^^^^^^^^^ UP007
869 |         """Get model runner for prediction (structured-only)."""
870 |         bundle = self._resolve_bundle(model_name)
    |
    = help: Convert to `X | Y`

src/prediction/features/pipeline.py:41:28: UP007 [*] Use `X | Y` for type annotations
   |
39 |         use_cache: bool = True,
40 |         cache_ttl: int = DEFAULT_FEATURE_CACHE_TTL,
41 |         custom_extractors: Optional[list[FeatureExtractor]] = None,
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
42 |     ):
43 |         """
   |
   = help: Convert to `X | Y`

src/prediction/features/pipeline.py:69:57: UP007 [*] Use `X | Y` for type annotations
   |
67 |         }
68 | 
69 |     def _initialize_extractors(self, custom_extractors: Optional[list[FeatureExtractor]] = None):
   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
70 |         """Initialize feature extractors based on configuration."""
71 |         # Add technical feature extractor (MVP)
   |
   = help: Convert to `X | Y`

src/prediction/features/pipeline.py:100:56: UP007 [*] Use `X | Y` for type annotations
    |
 98 |                 self.extractors[extractor.__class__.__name__] = extractor
 99 | 
100 |     def transform(self, data: pd.DataFrame, use_cache: Optional[bool] = None) -> pd.DataFrame:
    |                                                        ^^^^^^^^^^^^^^ UP007
101 |         """
102 |         Transform raw OHLCV data into ML-ready features.
    |
    = help: Convert to `X | Y`

src/prediction/features/pipeline.py:301:34: UP007 [*] Use `X | Y` for type annotations
    |
299 |             self.cache.clear()
300 | 
301 |     def get_cache_stats(self) -> Optional[dict[str, Any]]:
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
302 |         """
303 |         Get cache statistics.
    |
    = help: Convert to `X | Y`

src/prediction/features/schemas.py:43:20: UP007 [*] Use `X | Y` for type annotations
   |
41 |     normalization: NormalizationMethod = NormalizationMethod.NONE
42 |     required: bool = True
43 |     default_value: Optional[float] = None
   |                    ^^^^^^^^^^^^^^^ UP007
44 |     min_value: Optional[float] = None
45 |     max_value: Optional[float] = None
   |
   = help: Convert to `X | Y`

src/prediction/features/schemas.py:44:16: UP007 [*] Use `X | Y` for type annotations
   |
42 |     required: bool = True
43 |     default_value: Optional[float] = None
44 |     min_value: Optional[float] = None
   |                ^^^^^^^^^^^^^^^ UP007
45 |     max_value: Optional[float] = None
46 |     dependencies: Optional[list[str]] = None
   |
   = help: Convert to `X | Y`

src/prediction/features/schemas.py:45:16: UP007 [*] Use `X | Y` for type annotations
   |
43 |     default_value: Optional[float] = None
44 |     min_value: Optional[float] = None
45 |     max_value: Optional[float] = None
   |                ^^^^^^^^^^^^^^^ UP007
46 |     dependencies: Optional[list[str]] = None
   |
   = help: Convert to `X | Y`

src/prediction/features/schemas.py:46:19: UP007 [*] Use `X | Y` for type annotations
   |
44 |     min_value: Optional[float] = None
45 |     max_value: Optional[float] = None
46 |     dependencies: Optional[list[str]] = None
   |                   ^^^^^^^^^^^^^^^^^^^ UP007
47 | 
48 |     def __post_init__(self):
   |
   = help: Convert to `X | Y`

src/prediction/features/technical.py:51:21: UP007 [*] Use `X | Y` for type annotations
   |
49 |         bollinger_period: int = DEFAULT_BOLLINGER_PERIOD,
50 |         bollinger_std_dev: float = DEFAULT_BOLLINGER_STD_DEV,
51 |         ma_periods: Optional[list[int]] = None,
   |                     ^^^^^^^^^^^^^^^^^^^ UP007
52 |         macd_fast: int = DEFAULT_MACD_FAST_PERIOD,
53 |         macd_slow: int = DEFAULT_MACD_SLOW_PERIOD,
   |
   = help: Convert to `X | Y`

src/prediction/models/onnx_runner.py:42:24: UP007 [*] Use `X | Y` for type annotations
   |
40 |         model_path: str,
41 |         config: PredictionConfig,
42 |         cache_manager: Optional[PredictionCacheManager] = None,
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
43 |     ):
44 |         """
   |
   = help: Convert to `X | Y`

src/prediction/models/onnx_runner.py:129:53: UP007 [*] Use `X | Y` for type annotations
    |
127 |             raise RuntimeError(f"Prediction failed: {e}") from e
128 | 
129 |     def _check_cache(self, features: np.ndarray) -> Optional[dict]:
    |                                                     ^^^^^^^^^^^^^^ UP007
130 |         """Check cache for existing prediction result"""
131 |         if not self.cache_manager:
    |
    = help: Convert to `X | Y`

src/prediction/models/registry.py:64:56: UP007 [*] Use `X | Y` for type annotations
   |
63 |     def __init__(
64 |         self, config: PredictionConfig, cache_manager: Optional[PredictionCacheManager] = None
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
65 |     ):
66 |         """
   |
   = help: Convert to `X | Y`

src/prediction/models/registry.py:258:44: UP007 [*] Use `X | Y` for type annotations
    |
256 |         self._load()
257 | 
258 |     def invalidate_cache(self, model_name: Optional[str] = None) -> int:
    |                                            ^^^^^^^^^^^^^ UP007
259 |         """
260 |         Invalidate cache entries for the provided model or all models.
    |
    = help: Convert to `X | Y`

src/prediction/models/registry.py:299:26: UP007 [*] Use `X | Y` for type annotations
    |
297 |             # Runner path / filename also acts as an alias
298 |             runner_path = getattr(bundle.runner, "model_path", None)
299 |             runner_name: Optional[str] = None
    |                          ^^^^^^^^^^^^^ UP007
300 |             if runner_path:
301 |                 runner_path_str = str(runner_path)
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:86:31: B905 [*] `zip()` without an explicit `strict=` parameter
   |
84 |             hasher.update(shape_arr.tobytes())
85 |             # Columns and dtypes (order matters)
86 |             for col, dtype in zip(data.columns, data.dtypes):
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
87 |                 hasher.update(str(col).encode("utf-8", "ignore"))
88 |                 hasher.update(str(dtype).encode("utf-8", "ignore"))
   |
   = help: Add explicit `strict=False`

src/prediction/utils/caching.py:165:10: UP007 [*] Use `X | Y` for type annotations
    |
163 |     def _find_by_quick_hash(
164 |         self, data: pd.DataFrame, extractor_name: str, config: dict[str, Any]
165 |     ) -> Optional[tuple[str, CacheEntry]]:
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
166 |         """
167 |         Find cache entry using quick hash first, then verify with full hash.
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:198:10: UP007 [*] Use `X | Y` for type annotations
    |
196 |     def get(
197 |         self, data: pd.DataFrame, extractor_name: str, config: dict[str, Any], copy: bool = True
198 |     ) -> Optional[pd.DataFrame]:
    |          ^^^^^^^^^^^^^^^^^^^^^^ UP007
199 |         """
200 |         Get cached feature extraction result using two-tier hashing.
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:235:14: UP007 [*] Use `X | Y` for type annotations
    |
233 |         config: dict[str, Any],
234 |         result: pd.DataFrame,
235 |         ttl: Optional[int] = None,
    |              ^^^^^^^^^^^^^ UP007
236 |     ) -> None:
237 |         """
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:357:24: UP007 [*] Use `X | Y` for type annotations
    |
356 | # Global feature cache instance
357 | _global_feature_cache: Optional[FeatureCache] = None
    |                        ^^^^^^^^^^^^^^^^^^^^^^ UP007
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:441:75: UP007 [*] Use `X | Y` for type annotations
    |
439 |         return f"{features_hash}_{config_hash}"
440 | 
441 |     def get(self, features: np.ndarray, model_name: str, config: dict) -> Optional[dict]:
    |                                                                           ^^^^^^^^^^^^^^ UP007
442 |         """
443 |         Get cached prediction result.
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:758:32: UP007 [*] Use `X | Y` for type annotations
    |
756 |         self.ttl = ttl
757 | 
758 |     def get(self, key: str) -> Optional[Any]:
    |                                ^^^^^^^^^^^^^ UP007
759 |         """Get cached value if not expired"""
760 |         if key in self.cache:
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:815:18: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
814 |             # Handle basic types that can be JSON serialized
815 |             elif isinstance(value, (str, int, float, bool, type(None))):
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
816 |                 return json.dumps(value, sort_keys=True)
    |
    = help: Convert to `X | Y`

src/prediction/utils/caching.py:819:18: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
818 |             # Handle lists and tuples
819 |             elif isinstance(value, (list, tuple)):
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
820 |                 return f"[{','.join(_serialize_value(v) for v in value)}]"
    |
    = help: Convert to `X | Y`

src/regime/detector.py:44:32: UP007 [*] Use `X | Y` for type annotations
   |
42 |     """
43 | 
44 |     def __init__(self, config: Optional[RegimeConfig] = None):
   |                                ^^^^^^^^^^^^^^^^^^^^^^ UP007
45 |         self.config = config or RegimeConfig()
46 |         self._last_label: Optional[str] = None
   |
   = help: Convert to `X | Y`

src/regime/detector.py:46:27: UP007 [*] Use `X | Y` for type annotations
   |
44 |     def __init__(self, config: Optional[RegimeConfig] = None):
45 |         self.config = config or RegimeConfig()
46 |         self._last_label: Optional[str] = None
   |                           ^^^^^^^^^^^^^ UP007
47 |         self._consecutive: int = 0
48 |         self._dwell: int = 0
   |
   = help: Convert to `X | Y`

src/regime/enhanced_detector.py:79:32: UP007 [*] Use `X | Y` for type annotations
   |
77 |     """
78 | 
79 |     def __init__(self, config: Optional[EnhancedRegimeConfig] = None):
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
80 |         self.config = config or EnhancedRegimeConfig()
   |
   = help: Convert to `X | Y`

src/regime/enhanced_detector.py:96:28: UP007 [*] Use `X | Y` for type annotations
   |
95 |         # State tracking
96 |         self._last_regime: Optional[str] = None
   |                            ^^^^^^^^^^^^^ UP007
97 |         self._regime_strength: float = 0.0
98 |         self._consecutive: int = 0
   |
   = help: Convert to `X | Y`

src/risk/risk_manager.py:37:30: UP007 [*] Use `X | Y` for type annotations
   |
35 |     max_drawdown: float = 0.20  # 20% maximum drawdown (fraction)
36 |     position_size_atr_multiplier: float = 1.0
37 |     default_take_profit_pct: Optional[float] = None  # if None, engine/strategy may supply
   |                              ^^^^^^^^^^^^^^^ UP007
38 |     atr_period: int = 14
39 |     # Time exit config (optional; strategies may override)
   |
   = help: Convert to `X | Y`

src/risk/risk_manager.py:40:17: UP007 [*] Use `X | Y` for type annotations
   |
38 |     atr_period: int = 14
39 |     # Time exit config (optional; strategies may override)
40 |     time_exits: Optional[dict] = None
   |                 ^^^^^^^^^^^^^^ UP007
41 |     # Partial operations (defaults can be overridden by strategies)
42 |     partial_exit_targets: list[float] | None = None
   |
   = help: Convert to `X | Y`

src/risk/risk_manager.py:49:28: UP007 [*] Use `X | Y` for type annotations
   |
47 |     # Trailing stop config (engine/backtester may override via strategy.get_risk_overrides())
48 |     trailing_activation_threshold: float = DEFAULT_TRAILING_ACTIVATION_THRESHOLD
49 |     trailing_distance_pct: Optional[float] = DEFAULT_TRAILING_DISTANCE_PCT
   |                            ^^^^^^^^^^^^^^^ UP007
50 |     trailing_atr_multiplier: Optional[float] = DEFAULT_TRAILING_DISTANCE_ATR_MULT
51 |     breakeven_threshold: float = DEFAULT_BREAKEVEN_THRESHOLD
   |
   = help: Convert to `X | Y`

src/risk/risk_manager.py:50:30: UP007 [*] Use `X | Y` for type annotations
   |
48 |     trailing_activation_threshold: float = DEFAULT_TRAILING_ACTIVATION_THRESHOLD
49 |     trailing_distance_pct: Optional[float] = DEFAULT_TRAILING_DISTANCE_PCT
50 |     trailing_atr_multiplier: Optional[float] = DEFAULT_TRAILING_DISTANCE_ATR_MULT
   |                              ^^^^^^^^^^^^^^^ UP007
51 |     breakeven_threshold: float = DEFAULT_BREAKEVEN_THRESHOLD
52 |     breakeven_buffer: float = DEFAULT_BREAKEVEN_BUFFER
   |
   = help: Convert to `X | Y`

src/risk/risk_manager.py:113:27: UP007 [*] Use `X | Y` for type annotations
    |
112 |     def __init__(
113 |         self, parameters: Optional[RiskParameters] = None, max_concurrent_positions: int = 3
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
114 |     ):
115 |         self.params = parameters or RiskParameters()
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:191:16: UP007 [*] Use `X | Y` for type annotations
    |
189 |         index: int,
190 |         balance: float,
191 |         price: Optional[float] = None,
    |                ^^^^^^^^^^^^^^^ UP007
192 |         indicators: Optional[dict[str, Any]] = None,
193 |         strategy_overrides: Optional[dict[str, Any]] = None,
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:192:21: UP007 [*] Use `X | Y` for type annotations
    |
190 |         balance: float,
191 |         price: Optional[float] = None,
192 |         indicators: Optional[dict[str, Any]] = None,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
193 |         strategy_overrides: Optional[dict[str, Any]] = None,
194 |         regime: str = "normal",
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:193:29: UP007 [*] Use `X | Y` for type annotations
    |
191 |         price: Optional[float] = None,
192 |         indicators: Optional[dict[str, Any]] = None,
193 |         strategy_overrides: Optional[dict[str, Any]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
194 |         regime: str = "normal",
195 |         correlation_ctx: Optional[dict[str, Any]] = None,
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:195:26: UP007 [*] Use `X | Y` for type annotations
    |
193 |         strategy_overrides: Optional[dict[str, Any]] = None,
194 |         regime: str = "normal",
195 |         correlation_ctx: Optional[dict[str, Any]] = None,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
196 |     ) -> float:
197 |         """
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:313:29: UP007 [*] Use `X | Y` for type annotations
    |
311 |         entry_price: float,
312 |         side: str = "long",
313 |         strategy_overrides: Optional[dict[str, Any]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
314 |     ) -> tuple[Optional[float], Optional[float]]:
315 |         """
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:314:16: UP007 [*] Use `X | Y` for type annotations
    |
312 |         side: str = "long",
313 |         strategy_overrides: Optional[dict[str, Any]] = None,
314 |     ) -> tuple[Optional[float], Optional[float]]:
    |                ^^^^^^^^^^^^^^^ UP007
315 |         """
316 |         Compute stop-loss and take-profit prices.
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:314:33: UP007 [*] Use `X | Y` for type annotations
    |
312 |         side: str = "long",
313 |         strategy_overrides: Optional[dict[str, Any]] = None,
314 |     ) -> tuple[Optional[float], Optional[float]]:
    |                                 ^^^^^^^^^^^^^^^ UP007
315 |         """
316 |         Compute stop-loss and take-profit prices.
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:328:19: UP007 [*] Use `X | Y` for type annotations
    |
326 |         )
327 | 
328 |         sl_price: Optional[float] = None
    |                   ^^^^^^^^^^^^^^^ UP007
329 |         tp_price: Optional[float] = None
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:329:19: UP007 [*] Use `X | Y` for type annotations
    |
328 |         sl_price: Optional[float] = None
329 |         tp_price: Optional[float] = None
    |                   ^^^^^^^^^^^^^^^ UP007
330 | 
331 |         if stop_loss_pct is not None:
    |
    = help: Convert to `X | Y`

src/risk/risk_manager.py:406:20: UP007 [*] Use `X | Y` for type annotations
    |
404 |         symbols: list,
405 |         corr_matrix: pd.DataFrame | None = None,
406 |         threshold: Optional[float] = None,
    |                    ^^^^^^^^^^^^^^^ UP007
407 |     ) -> float:
408 |         """Calculate correlated exposure across provided symbols.
    |
    = help: Convert to `X | Y`

src/strategies/components/__init__.py:16:1: I001 [*] Import block is un-sorted or un-formatted
   |
14 |   """
15 |   
16 | / from .strategy import Strategy
17 | | from .runtime import (
18 | |     FeatureGeneratorSpec,
19 | |     FeatureCache,
20 | |     StrategyDataset,
21 | |     RuntimeContext,
22 | |     StrategyRuntime,
23 | | )
24 | | from .signal_generator import (
25 | |     SignalGenerator,
26 | |     Signal,
27 | |     SignalDirection,
28 | |     HoldSignalGenerator,
29 | |     RandomSignalGenerator,
30 | |     WeightedVotingSignalGenerator,
31 | |     HierarchicalSignalGenerator,
32 | |     RegimeAdaptiveSignalGenerator,
33 | | )
34 | | from .risk_manager import (
35 | |     RiskManager,
36 | |     Position,
37 | |     MarketData,
38 | |     FixedRiskManager,
39 | |     VolatilityRiskManager,
40 | |     RegimeAdaptiveRiskManager,
41 | | )
42 | | from .position_sizer import (
43 | |     PositionSizer,
44 | |     FixedFractionSizer,
45 | |     ConfidenceWeightedSizer,
46 | |     KellySizer,
47 | |     RegimeAdaptiveSizer,
48 | | )
49 | | from .regime_context import RegimeContext, TrendLabel, VolLabel, EnhancedRegimeDetector
50 | | from .strategy_manager import StrategyManager
51 | | from .strategy_factory import StrategyFactory, StrategyBuilder
52 | | from .strategy_registry import StrategyRegistry, StrategyVersion
53 | | from .performance_tracker import PerformanceTracker
54 | | from .strategy_lineage import StrategyLineageTracker
55 | | from .ml_signal_generator import MLSignalGenerator, MLBasicSignalGenerator
56 | | from .technical_signal_generator import (
57 | |     TechnicalSignalGenerator,
58 | |     RSISignalGenerator,
59 | |     MACDSignalGenerator,
60 | | )
61 | | from .momentum_signal_generator import MomentumSignalGenerator
62 | | from .testing.test_datasets import TestDatasetGenerator
63 | | from .testing.component_performance_tester import ComponentPerformanceTester
64 | | from .testing.regime_tester import RegimeTester
65 | | from .testing.performance_attribution import PerformanceAttributionAnalyzer
66 | | from src.database.models import StrategyExecution
67 | | 
68 | | __all__ = [
   | |_^ I001
69 |       # Core classes
70 |       "Strategy",
   |
   = help: Organize imports

src/strategies/components/emergency_controls.py:14:1: UP035 [*] Import from `collections.abc` instead: `Callable`
   |
12 | from datetime import datetime, timedelta
13 | from enum import Enum
14 | from typing import Any, Callable, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | from .performance_tracker import PerformanceMetrics, PerformanceTracker
   |
   = help: Import from `collections.abc`

src/strategies/components/emergency_controls.py:125:22: UP007 [*] Use `X | Y` for type annotations
    |
123 |     triggered_at: datetime
124 |     acknowledged: bool = False
125 |     acknowledged_by: Optional[str] = None
    |                      ^^^^^^^^^^^^^ UP007
126 |     acknowledged_at: Optional[datetime] = None
127 |     resolved: bool = False
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:126:22: UP007 [*] Use `X | Y` for type annotations
    |
124 |     acknowledged: bool = False
125 |     acknowledged_by: Optional[str] = None
126 |     acknowledged_at: Optional[datetime] = None
    |                      ^^^^^^^^^^^^^^^^^^ UP007
127 |     resolved: bool = False
128 |     resolved_at: Optional[datetime] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:128:18: UP007 [*] Use `X | Y` for type annotations
    |
126 |     acknowledged_at: Optional[datetime] = None
127 |     resolved: bool = False
128 |     resolved_at: Optional[datetime] = None
    |                  ^^^^^^^^^^^^^^^^^^ UP007
129 | 
130 |     def to_dict(self) -> dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:162:18: UP007 [*] Use `X | Y` for type annotations
    |
161 |     # Approval details
162 |     approved_by: Optional[str] = None
    |                  ^^^^^^^^^^^^^ UP007
163 |     approved_at: Optional[datetime] = None
164 |     rejection_reason: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:163:18: UP007 [*] Use `X | Y` for type annotations
    |
161 |     # Approval details
162 |     approved_by: Optional[str] = None
163 |     approved_at: Optional[datetime] = None
    |                  ^^^^^^^^^^^^^^^^^^ UP007
164 |     rejection_reason: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:164:23: UP007 [*] Use `X | Y` for type annotations
    |
162 |     approved_by: Optional[str] = None
163 |     approved_at: Optional[datetime] = None
164 |     rejection_reason: Optional[str] = None
    |                       ^^^^^^^^^^^^^ UP007
165 | 
166 |     # Associated data
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:167:21: UP007 [*] Use `X | Y` for type annotations
    |
166 |     # Associated data
167 |     switch_request: Optional[SwitchRequest] = None
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
168 | 
169 |     def to_dict(self) -> dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:197:60: UP007 [*] Use `X | Y` for type annotations
    |
196 |     def __init__(
197 |         self, strategy_switcher: StrategySwitcher, config: Optional[EmergencyConfig] = None
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
198 |     ):
199 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:225:38: UP007 [*] Use `X | Y` for type annotations
    |
224 |         # Monitoring state
225 |         self.last_performance_check: Optional[datetime] = None
    |                                      ^^^^^^^^^^^^^^^^^^ UP007
226 |         self.last_emergency_check: Optional[datetime] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:226:36: UP007 [*] Use `X | Y` for type annotations
    |
224 |         # Monitoring state
225 |         self.last_performance_check: Optional[datetime] = None
226 |         self.last_emergency_check: Optional[datetime] = None
    |                                    ^^^^^^^^^^^^^^^^^^ UP007
227 | 
228 |         # Callbacks for external integration
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:243:25: UP007 [*] Use `X | Y` for type annotations
    |
241 |         strategy_id: str,
242 |         performance_tracker: PerformanceTracker,
243 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
244 |     ) -> EmergencyLevel:
245 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:393:68: UP007 [*] Use `X | Y` for type annotations
    |
392 |     def approve_request(
393 |         self, request_id: str, approved_by: str, rejection_reason: Optional[str] = None
    |                                                                    ^^^^^^^^^^^^^ UP007
394 |     ) -> bool:
395 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:647:10: UP007 [*] Use `X | Y` for type annotations
    |
645 |     def _trigger_alert(
646 |         self, alert_type: AlertType, level: EmergencyLevel, strategy_id: str, message: str
647 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^ UP007
648 |         """Trigger an emergency alert"""
649 |         # Check cooldown
    |
    = help: Convert to `X | Y`

src/strategies/components/emergency_controls.py:828:25: UP007 [*] Use `X | Y` for type annotations
    |
826 |         self,
827 |         strategy_performance: dict[str, PerformanceTracker],
828 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
829 |     ) -> None:
830 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:58:32: UP007 [*] Use `X | Y` for type annotations
   |
56 |         model_path: str = "src/ml/btcusdt_price.onnx",
57 |         sequence_length: int = 120,
58 |         use_prediction_engine: Optional[bool] = None,
   |                                ^^^^^^^^^^^^^^ UP007
59 |         model_name: Optional[str] = None,
60 |     ):
   |
   = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:59:21: UP007 [*] Use `X | Y` for type annotations
   |
57 |         sequence_length: int = 120,
58 |         use_prediction_engine: Optional[bool] = None,
59 |         model_name: Optional[str] = None,
   |                     ^^^^^^^^^^^^^ UP007
60 |     ):
61 |         """
   |
   = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:177:53: UP007 [*] Use `X | Y` for type annotations
    |
176 |     def generate_signal(
177 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
178 |     ) -> Signal:
179 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:295:67: UP007 [*] Use `X | Y` for type annotations
    |
293 |         return self._calculate_confidence(predicted_return)
294 | 
295 |     def _get_ml_prediction(self, df: pd.DataFrame, index: int) -> Optional[float]:
    |                                                                   ^^^^^^^^^^^^^^^ UP007
296 |         """
297 |         Get ML prediction for the given index
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:350:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
349 |                 # Ensure pred is a scalar value
350 |                 if isinstance(pred, (list, tuple, np.ndarray)):
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
351 |                     pred = float(np.array(pred).flatten()[0])
352 |                 else:
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:372:48: UP007 [*] Use `X | Y` for type annotations
    |
371 |     def _should_generate_short_signal(
372 |         self, predicted_return: float, regime: Optional[RegimeContext]
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^ UP007
373 |     ) -> bool:
374 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:482:32: UP007 [*] Use `X | Y` for type annotations
    |
480 |         model_path: str = "src/ml/btcusdt_price.onnx",
481 |         sequence_length: int = 120,
482 |         use_prediction_engine: Optional[bool] = None,
    |                                ^^^^^^^^^^^^^^ UP007
483 |         model_name: Optional[str] = None,
484 |         model_type: Optional[str] = None,
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:483:21: UP007 [*] Use `X | Y` for type annotations
    |
481 |         sequence_length: int = 120,
482 |         use_prediction_engine: Optional[bool] = None,
483 |         model_name: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
484 |         model_type: Optional[str] = None,
485 |         timeframe: Optional[str] = None,
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:484:21: UP007 [*] Use `X | Y` for type annotations
    |
482 |         use_prediction_engine: Optional[bool] = None,
483 |         model_name: Optional[str] = None,
484 |         model_type: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
485 |         timeframe: Optional[str] = None,
486 |     ):
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:485:20: UP007 [*] Use `X | Y` for type annotations
    |
483 |         model_name: Optional[str] = None,
484 |         model_type: Optional[str] = None,
485 |         timeframe: Optional[str] = None,
    |                    ^^^^^^^^^^^^^ UP007
486 |     ):
487 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:616:53: UP007 [*] Use `X | Y` for type annotations
    |
615 |     def generate_signal(
616 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
617 |     ) -> Signal:
618 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:726:67: UP007 [*] Use `X | Y` for type annotations
    |
724 |         return self._calculate_confidence(predicted_return)
725 | 
726 |     def _get_ml_prediction(self, df: pd.DataFrame, index: int) -> Optional[float]:
    |                                                                   ^^^^^^^^^^^^^^^ UP007
727 |         """
728 |         Get ML prediction for the given index with registry support
    |
    = help: Convert to `X | Y`

src/strategies/components/ml_signal_generator.py:807:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
806 |                 # Ensure pred is a scalar value
807 |                 if isinstance(pred, (list, tuple, np.ndarray)):
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
808 |                     pred = float(np.array(pred).flatten()[0])
809 |                 else:
    |
    = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / from typing import Any, Optional
 9 | | 
10 | | import numpy as np
11 | | import pandas as pd
12 | | 
13 | | from .signal_generator import Signal, SignalDirection, SignalGenerator
14 | | from .regime_context import RegimeContext
15 | | 
16 | | 
17 | | class MomentumSignalGenerator(SignalGenerator):
   | |_^ I001
18 |       """
19 |       Momentum-based signal generator using multi-timeframe momentum,
   |
   = help: Organize imports

src/strategies/components/momentum_signal_generator.py:10:17: F401 [*] `numpy` imported but unused
   |
 8 | from typing import Any, Optional
 9 | 
10 | import numpy as np
   |                 ^^ F401
11 | import pandas as pd
   |
   = help: Remove unused import: `numpy`

src/strategies/components/momentum_signal_generator.py:48:53: UP007 [*] Use `X | Y` for type annotations
   |
47 |     def generate_signal(
48 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
49 |     ) -> Signal:
50 |         self.validate_inputs(df, index)
   |
   = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:133:68: UP007 [*] Use `X | Y` for type annotations
    |
132 |     @staticmethod
133 |     def _ema(df: pd.DataFrame, col: str, span: int, index: int) -> Optional[float]:
    |                                                                    ^^^^^^^^^^^^^^^ UP007
134 |         try:
135 |             series = df[col].ewm(span=span).mean()
    |
    = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:141:78: UP007 [*] Use `X | Y` for type annotations
    |
140 |     @staticmethod
141 |     def _pct_change(df: pd.DataFrame, col: str, periods: int, index: int) -> Optional[float]:
    |                                                                              ^^^^^^^^^^^^^^^ UP007
142 |         if index < periods:
143 |             return None
    |
    = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:163:22: UP007 [*] Use `X | Y` for type annotations
    |
162 |     @staticmethod
163 |     def _safe_div(a: Optional[float], b: Optional[float]) -> Optional[float]:
    |                      ^^^^^^^^^^^^^^^ UP007
164 |         try:
165 |             if a is None or b is None or b == 0:
    |
    = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:163:42: UP007 [*] Use `X | Y` for type annotations
    |
162 |     @staticmethod
163 |     def _safe_div(a: Optional[float], b: Optional[float]) -> Optional[float]:
    |                                          ^^^^^^^^^^^^^^^ UP007
164 |         try:
165 |             if a is None or b is None or b == 0:
    |
    = help: Convert to `X | Y`

src/strategies/components/momentum_signal_generator.py:163:62: UP007 [*] Use `X | Y` for type annotations
    |
162 |     @staticmethod
163 |     def _safe_div(a: Optional[float], b: Optional[float]) -> Optional[float]:
    |                                                              ^^^^^^^^^^^^^^^ UP007
164 |         try:
165 |             if a is None or b is None or b == 0:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:105:27: UP007 [*] Use `X | Y` for type annotations
    |
103 |     reason: str
104 |     confidence: float
105 |     recommended_strategy: Optional[str] = None
    |                           ^^^^^^^^^^^^^ UP007
106 |     degradation_severity: DegradationSeverity = DegradationSeverity.NONE
107 |     timeframe_results: Optional[list[TimeFrameAnalysis]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:107:24: UP007 [*] Use `X | Y` for type annotations
    |
105 |     recommended_strategy: Optional[str] = None
106 |     degradation_severity: DegradationSeverity = DegradationSeverity.NONE
107 |     timeframe_results: Optional[list[TimeFrameAnalysis]] = None
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
108 | 
109 |     def to_dict(self) -> dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:132:32: UP007 [*] Use `X | Y` for type annotations
    |
130 |     """
131 | 
132 |     def __init__(self, config: Optional[PerformanceDegradationConfig] = None):
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
133 |         """
134 |         Initialize performance monitor
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:162:25: UP007 [*] Use `X | Y` for type annotations
    |
160 |         performance_tracker: PerformanceTracker,
161 |         market_data: pd.DataFrame,
162 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
163 |     ) -> SwitchDecision:
164 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:239:17: UP007 [*] Use `X | Y` for type annotations
    |
237 |         strategy_id: str,
238 |         performance_tracker: PerformanceTracker,
239 |         regime: Optional[str] = None,
    |                 ^^^^^^^^^^^^^ UP007
240 |     ) -> None:
241 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:345:25: UP007 [*] Use `X | Y` for type annotations
    |
343 |         strategy_id: str,
344 |         performance_tracker: PerformanceTracker,
345 |         current_regime: Optional[RegimeContext],
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
346 |     ) -> list[TimeFrameAnalysis]:
347 |         """Analyze performance across multiple timeframes"""
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:546:58: UP007 [*] Use `X | Y` for type annotations
    |
545 |     def _is_regime_transition_period(
546 |         self, market_data: pd.DataFrame, current_regime: Optional[RegimeContext]
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^ UP007
547 |     ) -> bool:
548 |         """Check if we're in a regime transition period"""
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:622:28: UP007 [*] Use `X | Y` for type annotations
    |
621 |     def get_degradation_history(
622 |         self, strategy_id: Optional[str] = None, days: int = 30
    |                            ^^^^^^^^^^^^^ UP007
623 |     ) -> list[dict[str, Any]]:
624 |         """Get degradation history for analysis"""
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitor.py:635:44: UP007 [*] Use `X | Y` for type annotations
    |
633 |         return filtered_history
634 | 
635 |     def reset_baselines(self, strategy_id: Optional[str] = None) -> None:
    |                                            ^^^^^^^^^^^^^ UP007
636 |         """Reset performance baselines"""
637 |         if strategy_id:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:10:1: UP035 [*] Import from `collections.abc` instead: `Callable`
   |
 8 | import logging
 9 | from datetime import datetime
10 | from typing import Any, Callable, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
11 | 
12 | import pandas as pd
   |
   = help: Import from `collections.abc`

src/strategies/components/performance_monitoring_system.py:32:29: UP007 [*] Use `X | Y` for type annotations
   |
30 |     def __init__(
31 |         self,
32 |         performance_config: Optional[PerformanceDegradationConfig] = None,
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
33 |         selection_config: Optional[SelectionConfig] = None,
34 |         switch_config: Optional[SwitchConfig] = None,
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:33:27: UP007 [*] Use `X | Y` for type annotations
   |
31 |         self,
32 |         performance_config: Optional[PerformanceDegradationConfig] = None,
33 |         selection_config: Optional[SelectionConfig] = None,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
34 |         switch_config: Optional[SwitchConfig] = None,
35 |         emergency_config: Optional[EmergencyConfig] = None,
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:34:24: UP007 [*] Use `X | Y` for type annotations
   |
32 |         performance_config: Optional[PerformanceDegradationConfig] = None,
33 |         selection_config: Optional[SelectionConfig] = None,
34 |         switch_config: Optional[SwitchConfig] = None,
   |                        ^^^^^^^^^^^^^^^^^^^^^^ UP007
35 |         emergency_config: Optional[EmergencyConfig] = None,
36 |     ):
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:35:27: UP007 [*] Use `X | Y` for type annotations
   |
33 |         selection_config: Optional[SelectionConfig] = None,
34 |         switch_config: Optional[SwitchConfig] = None,
35 |         emergency_config: Optional[EmergencyConfig] = None,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
36 |     ):
37 |         """
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:57:35: UP007 [*] Use `X | Y` for type annotations
   |
56 |         # System state
57 |         self.current_strategy_id: Optional[str] = None
   |                                   ^^^^^^^^^^^^^ UP007
58 |         self.available_strategies: dict[str, PerformanceTracker] = {}
59 |         self.strategy_activation_callback: Optional[Callable[[str], bool]] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:59:44: UP007 [*] Use `X | Y` for type annotations
   |
57 |         self.current_strategy_id: Optional[str] = None
58 |         self.available_strategies: dict[str, PerformanceTracker] = {}
59 |         self.strategy_activation_callback: Optional[Callable[[str], bool]] = None
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
60 | 
61 |         # Monitoring state
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:110:58: UP007 [*] Use `X | Y` for type annotations
    |
109 |     def update_monitoring(
110 |         self, market_data: pd.DataFrame, current_regime: Optional[RegimeContext] = None
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^ UP007
111 |     ) -> dict[str, Any]:
112 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:253:68: UP007 [*] Use `X | Y` for type annotations
    |
252 |     def approve_request(
253 |         self, request_id: str, approved_by: str, rejection_reason: Optional[str] = None
    |                                                                    ^^^^^^^^^^^^^ UP007
254 |     ) -> bool:
255 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:295:45: UP007 [*] Use `X | Y` for type annotations
    |
294 |     def set_manual_override(
295 |         self, active: bool, duration_hours: Optional[int] = None, reason: Optional[str] = None
    |                                             ^^^^^^^^^^^^^ UP007
296 |     ) -> None:
297 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:295:75: UP007 [*] Use `X | Y` for type annotations
    |
294 |     def set_manual_override(
295 |         self, active: bool, duration_hours: Optional[int] = None, reason: Optional[str] = None
    |                                                                           ^^^^^^^^^^^^^ UP007
296 |     ) -> None:
297 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:332:53: UP007 [*] Use `X | Y` for type annotations
    |
330 |         return self.emergency_controls.resolve_alert(alert_id)
331 | 
332 |     def get_strategy_rankings(self, current_regime: Optional[RegimeContext] = None) -> list:
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
333 |         """
334 |         Get current strategy rankings
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:388:27: UP007 [*] Use `X | Y` for type annotations
    |
387 |     def add_switch_callback(
388 |         self, pre_switch: Optional[Callable] = None, post_switch: Optional[Callable] = None
    |                           ^^^^^^^^^^^^^^^^^^ UP007
389 |     ) -> None:
390 |         """Add callbacks for strategy switches"""
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_monitoring_system.py:388:67: UP007 [*] Use `X | Y` for type annotations
    |
387 |     def add_switch_callback(
388 |         self, pre_switch: Optional[Callable] = None, post_switch: Optional[Callable] = None
    |                                                                   ^^^^^^^^^^^^^^^^^^ UP007
389 |     ) -> None:
390 |         """Add callbacks for strategy switches"""
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:58:13: UP007 [*] Use `X | Y` for type annotations
   |
56 |     strategy_id: str
57 |     confidence: float
58 |     regime: Optional[str] = None
   |             ^^^^^^^^^^^^^ UP007
59 |     exit_reason: Optional[str] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:59:18: UP007 [*] Use `X | Y` for type annotations
   |
57 |     confidence: float
58 |     regime: Optional[str] = None
59 |     exit_reason: Optional[str] = None
   |                  ^^^^^^^^^^^^^ UP007
60 | 
61 |     def to_dict(self) -> dict[str, Any]:
   |
   = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:167:76: UP007 [*] Use `X | Y` for type annotations
    |
166 |     def __init__(
167 |         self, strategy_id: str, max_history: int = 10000, storage_backend: Optional[Any] = None
    |                                                                            ^^^^^^^^^^^^^ UP007
168 |     ):
169 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:272:21: UP007 [*] Use `X | Y` for type annotations
    |
270 |         self,
271 |         period: PerformancePeriod = PerformancePeriod.ALL_TIME,
272 |         start_date: Optional[datetime] = None,
    |                     ^^^^^^^^^^^^^^^^^^ UP007
273 |         end_date: Optional[datetime] = None,
274 |     ) -> PerformanceMetrics:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:273:19: UP007 [*] Use `X | Y` for type annotations
    |
271 |         period: PerformancePeriod = PerformancePeriod.ALL_TIME,
272 |         start_date: Optional[datetime] = None,
273 |         end_date: Optional[datetime] = None,
    |                   ^^^^^^^^^^^^^^^^^^ UP007
274 |     ) -> PerformanceMetrics:
275 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:339:46: UP007 [*] Use `X | Y` for type annotations
    |
337 |         return metrics
338 | 
339 |     def get_regime_performance(self, regime: Optional[str] = None) -> dict[str, RegimePerformance]:
    |                                              ^^^^^^^^^^^^^ UP007
340 |         """
341 |         Get performance metrics by market regime
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:442:16: UP007 [*] Use `X | Y` for type annotations
    |
440 |     def get_trade_history(
441 |         self,
442 |         limit: Optional[int] = None,
    |                ^^^^^^^^^^^^^ UP007
443 |         start_date: Optional[datetime] = None,
444 |         end_date: Optional[datetime] = None,
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:443:21: UP007 [*] Use `X | Y` for type annotations
    |
441 |         self,
442 |         limit: Optional[int] = None,
443 |         start_date: Optional[datetime] = None,
    |                     ^^^^^^^^^^^^^^^^^^ UP007
444 |         end_date: Optional[datetime] = None,
445 |     ) -> list[TradeResult]:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:444:19: UP007 [*] Use `X | Y` for type annotations
    |
442 |         limit: Optional[int] = None,
443 |         start_date: Optional[datetime] = None,
444 |         end_date: Optional[datetime] = None,
    |                   ^^^^^^^^^^^^^^^^^^ UP007
445 |     ) -> list[TradeResult]:
446 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:551:21: UP007 [*] Use `X | Y` for type annotations
    |
549 |         self,
550 |         period: PerformancePeriod,
551 |         start_date: Optional[datetime] = None,
    |                     ^^^^^^^^^^^^^^^^^^ UP007
552 |         end_date: Optional[datetime] = None,
553 |     ) -> list[TradeResult]:
    |
    = help: Convert to `X | Y`

src/strategies/components/performance_tracker.py:552:19: UP007 [*] Use `X | Y` for type annotations
    |
550 |         period: PerformancePeriod,
551 |         start_date: Optional[datetime] = None,
552 |         end_date: Optional[datetime] = None,
    |                   ^^^^^^^^^^^^^^^^^^ UP007
553 |     ) -> list[TradeResult]:
554 |         """Filter trades by time period"""
    |
    = help: Convert to `X | Y`

src/strategies/components/position_sizer.py:10:1: UP035 [*] Import from `collections.abc` instead: `Sequence`
   |
 9 | from abc import ABC, abstractmethod
10 | from typing import TYPE_CHECKING, Any, Optional, Sequence
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
11 | 
12 | import numpy as np
   |
   = help: Import from `collections.abc`

src/strategies/components/position_sizer.py:538:29: UP007 [*] Use `X | Y` for type annotations
    |
536 |         self,
537 |         base_fraction: float = 0.03,
538 |         regime_multipliers: Optional[dict[str, float]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
539 |         volatility_adjustment: bool = True,
540 |     ):
    |
    = help: Convert to `X | Y`

src/strategies/components/regime_context.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / from dataclasses import dataclass
 9 | | from datetime import datetime
10 | | from typing import Optional, Sequence, TYPE_CHECKING
11 | | 
12 | | import numpy as np
13 | | import pandas as pd
14 | | 
15 | | if TYPE_CHECKING:
   | |_^ I001
16 |       from .runtime import FeatureGeneratorSpec
   |
   = help: Organize imports

src/strategies/components/regime_context.py:10:1: UP035 [*] Import from `collections.abc` instead: `Sequence`
   |
 8 | from dataclasses import dataclass
 9 | from datetime import datetime
10 | from typing import Optional, Sequence, TYPE_CHECKING
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
11 | 
12 | import numpy as np
   |
   = help: Import from `collections.abc`

src/strategies/components/regime_context.py:43:16: UP007 [*] Use `X | Y` for type annotations
   |
41 |     duration: int
42 |     strength: float
43 |     timestamp: Optional[datetime] = None
   |                ^^^^^^^^^^^^^^^^^^ UP007
44 |     metadata: Optional[dict[str, float]] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/regime_context.py:44:15: UP007 [*] Use `X | Y` for type annotations
   |
42 |     strength: float
43 |     timestamp: Optional[datetime] = None
44 |     metadata: Optional[dict[str, float]] = None
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
45 | 
46 |     def __post_init__(self):
   |
   = help: Convert to `X | Y`

src/strategies/components/regime_context.py:154:24: UP007 [*] Use `X | Y` for type annotations
    |
152 |     def __init__(
153 |         self,
154 |         base_detector: Optional[BaseRegimeDetector] = None,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
155 |         stability_threshold: int = 10,
156 |         max_history: int = 1000,
    |
    = help: Convert to `X | Y`

src/strategies/components/regime_context.py:175:30: UP007 [*] Use `X | Y` for type annotations
    |
174 |         # Current regime state
175 |         self.current_regime: Optional[RegimeContext] = None
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ UP007
176 |         self.regime_start_index: int = 0
    |
    = help: Convert to `X | Y`

src/strategies/components/regime_context.py:276:59: UP007 [*] Use `X | Y` for type annotations
    |
275 |     def is_regime_stable(
276 |         self, df: pd.DataFrame, index: int, min_duration: Optional[int] = None
    |                                                           ^^^^^^^^^^^^^ UP007
277 |     ) -> bool:
278 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/regime_context.py:501:37: UP007 [*] Use `X | Y` for type annotations
    |
499 |             self.regime_history = self.regime_history[-self.max_history :]
500 | 
501 |     def get_current_regime(self) -> Optional[RegimeContext]:
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
502 |         """Get the current regime context"""
503 |         return self.current_regime
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:12:1: UP035 [*] Import from `collections.abc` instead: `Sequence`
   |
10 | from dataclasses import dataclass
11 | from datetime import datetime
12 | from typing import TYPE_CHECKING, Any, Optional, Sequence
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | 
14 | if TYPE_CHECKING:
   |
   = help: Import from `collections.abc`

src/strategies/components/risk_manager.py:107:10: UP007 [*] Use `X | Y` for type annotations
    |
105 |     price: float
106 |     volume: float
107 |     bid: Optional[float] = None
    |          ^^^^^^^^^^^^^^^ UP007
108 |     ask: Optional[float] = None
109 |     timestamp: Optional[datetime] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:108:10: UP007 [*] Use `X | Y` for type annotations
    |
106 |     volume: float
107 |     bid: Optional[float] = None
108 |     ask: Optional[float] = None
    |          ^^^^^^^^^^^^^^^ UP007
109 |     timestamp: Optional[datetime] = None
110 |     volatility: Optional[float] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:109:16: UP007 [*] Use `X | Y` for type annotations
    |
107 |     bid: Optional[float] = None
108 |     ask: Optional[float] = None
109 |     timestamp: Optional[datetime] = None
    |                ^^^^^^^^^^^^^^^^^^ UP007
110 |     volatility: Optional[float] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:110:17: UP007 [*] Use `X | Y` for type annotations
    |
108 |     ask: Optional[float] = None
109 |     timestamp: Optional[datetime] = None
110 |     volatility: Optional[float] = None
    |                 ^^^^^^^^^^^^^^^ UP007
111 | 
112 |     def __post_init__(self):
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:138:29: UP007 [*] Use `X | Y` for type annotations
    |
136 |             )
137 | 
138 |     def get_spread(self) -> Optional[float]:
    |                             ^^^^^^^^^^^^^^^ UP007
139 |         """Get bid-ask spread if both bid and ask are available"""
140 |         if self.bid is not None and self.ask is not None:
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:144:40: UP007 [*] Use `X | Y` for type annotations
    |
142 |         return None
143 | 
144 |     def get_spread_percentage(self) -> Optional[float]:
    |                                        ^^^^^^^^^^^^^^^ UP007
145 |         """Get bid-ask spread as percentage of mid price"""
146 |         spread = self.get_spread()
    |
    = help: Convert to `X | Y`

src/strategies/components/risk_manager.py:543:60: UP007 [*] Use `X | Y` for type annotations
    |
542 |     def __init__(
543 |         self, base_risk: float = 0.02, regime_multipliers: Optional[dict[str, float]] = None
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
544 |     ):
545 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/signal_generator.py:11:1: UP035 [*] Import from `collections.abc` instead: `Sequence`
   |
 9 | from dataclasses import dataclass
10 | from enum import Enum
11 | from typing import TYPE_CHECKING, Any, Optional, Sequence
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import pandas as pd
   |
   = help: Import from `collections.abc`

src/strategies/components/signal_generator.py:208:77: UP007 [*] Use `X | Y` for type annotations
    |
206 |     """
207 | 
208 |     def __init__(self, buy_prob: float = 0.3, sell_prob: float = 0.3, seed: Optional[int] = None):
    |                                                                             ^^^^^^^^^^^^^ UP007
209 |         """
210 |         Initialize random signal generator
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / from __future__ import annotations
10 | | 
11 | | import logging
12 | | import time
13 | | from dataclasses import dataclass
14 | | from datetime import datetime
15 | | from typing import Any, Optional, Sequence, TYPE_CHECKING
16 | | 
17 | | import pandas as pd
18 | | 
19 | | if TYPE_CHECKING:
   | |_^ I001
20 |       from .runtime import FeatureGeneratorSpec, StrategyDataset
   |
   = help: Organize imports

src/strategies/components/strategy.py:15:1: UP035 [*] Import from `collections.abc` instead: `Sequence`
   |
13 | from dataclasses import dataclass
14 | from datetime import datetime
15 | from typing import Any, Optional, Sequence, TYPE_CHECKING
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | import pandas as pd
   |
   = help: Import from `collections.abc`

src/strategies/components/strategy.py:46:13: UP007 [*] Use `X | Y` for type annotations
   |
44 |     signal: Signal
45 |     position_size: float
46 |     regime: Optional[RegimeContext]
   |             ^^^^^^^^^^^^^^^^^^^^^^^ UP007
47 |     risk_metrics: dict[str, float]
48 |     execution_time_ms: float
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy.py:93:26: UP007 [*] Use `X | Y` for type annotations
   |
91 |         risk_manager: RiskManager,
92 |         position_sizer: PositionSizer,
93 |         regime_detector: Optional[EnhancedRegimeDetector] = None,
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
94 |         enable_logging: bool = True,
95 |         max_history: int = 1000,
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy.py:139:32: UP007 [*] Use `X | Y` for type annotations
    |
138 |         # Runtime configuration
139 |         self._warmup_override: Optional[int] = None
    |                                ^^^^^^^^^^^^^ UP007
140 |         self._last_signal: Optional[Signal] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:140:28: UP007 [*] Use `X | Y` for type annotations
    |
138 |         # Runtime configuration
139 |         self._warmup_override: Optional[int] = None
140 |         self._last_signal: Optional[Signal] = None
    |                            ^^^^^^^^^^^^^^^^ UP007
141 | 
142 |         self.logger.info(
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:213:28: UP007 [*] Use `X | Y` for type annotations
    |
211 |         index: int,
212 |         balance: float,
213 |         current_positions: Optional[list[Position]] = None,
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
214 |     ) -> TradingDecision:
215 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:327:69: UP007 [*] Use `X | Y` for type annotations
    |
326 |     def should_exit_position(
327 |         self, position: Position, current_data: MarketData, regime: Optional[RegimeContext] = None
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
328 |     ) -> bool:
329 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:347:59: UP007 [*] Use `X | Y` for type annotations
    |
346 |     def get_stop_loss_price(
347 |         self, entry_price: float, signal: Signal, regime: Optional[RegimeContext] = None
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^ UP007
348 |     ) -> float:
349 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:502:37: UP007 [*] Use `X | Y` for type annotations
    |
500 |         return params
501 | 
502 |     def get_risk_overrides(self) -> Optional[dict[str, Any]]:
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
503 |         """Return configured risk overrides when provided."""
504 |         return getattr(self, "_risk_overrides", None)
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:523:63: UP007 [*] Use `X | Y` for type annotations
    |
521 |             raise ValueError(f"DataFrame missing required columns: {missing_columns}")
522 | 
523 |     def _detect_regime(self, df: pd.DataFrame, index: int) -> Optional[RegimeContext]:
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^ UP007
524 |         """Detect market regime"""
525 |         try:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:532:53: UP007 [*] Use `X | Y` for type annotations
    |
531 |     def _generate_signal(
532 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext]
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
533 |     ) -> Signal:
534 |         """Generate trading signal"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:547:55: UP007 [*] Use `X | Y` for type annotations
    |
546 |     def _calculate_risk_position_size(
547 |         self, signal: Signal, balance: float, regime: Optional[RegimeContext]
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^ UP007
548 |     ) -> float:
549 |         """Calculate risk-based position size"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:557:75: UP007 [*] Use `X | Y` for type annotations
    |
556 |     def _calculate_final_position_size(
557 |         self, signal: Signal, balance: float, risk_amount: float, regime: Optional[RegimeContext]
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^ UP007
558 |     ) -> float:
559 |         """Calculate final position size using position sizer"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:567:77: UP007 [*] Use `X | Y` for type annotations
    |
566 |     def _validate_position_size(
567 |         self, position_size: float, signal: Signal, balance: float, regime: Optional[RegimeContext]
    |                                                                             ^^^^^^^^^^^^^^^^^^^^^^^ UP007
568 |     ) -> float:
569 |         """Validate and bound position size"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:590:17: UP007 [*] Use `X | Y` for type annotations
    |
588 |         risk_position_size: float,
589 |         final_position_size: float,
590 |         regime: Optional[RegimeContext],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ UP007
591 |     ) -> dict[str, float]:
592 |         """Calculate risk-related metrics"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:610:28: UP007 [*] Use `X | Y` for type annotations
    |
608 |         index: int,
609 |         balance: float,
610 |         current_positions: Optional[list[Position]],
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
611 |         regime: Optional[RegimeContext],
612 |         signal: Signal,
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy.py:611:17: UP007 [*] Use `X | Y` for type annotations
    |
609 |         balance: float,
610 |         current_positions: Optional[list[Position]],
611 |         regime: Optional[RegimeContext],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ UP007
612 |         signal: Signal,
613 |         risk_position_size: float,
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / from copy import deepcopy
 9 | | from typing import Any, Optional
10 | | 
11 | | from .position_sizer import (
12 | |     ConfidenceWeightedSizer,
13 | |     FixedFractionSizer,
14 | |     KellySizer,
15 | |     PositionSizer,
16 | |     RegimeAdaptiveSizer,
17 | | )
18 | | from .regime_context import EnhancedRegimeDetector
19 | | from .risk_manager import (
20 | |     FixedRiskManager,
21 | |     RegimeAdaptiveRiskManager,
22 | |     RiskManager,
23 | |     VolatilityRiskManager,
24 | | )
25 | | from .signal_generator import (
26 | |     HierarchicalSignalGenerator,
27 | |     HoldSignalGenerator,
28 | |     RandomSignalGenerator,
29 | |     RegimeAdaptiveSignalGenerator,
30 | |     SignalGenerator,
31 | |     WeightedVotingSignalGenerator,
32 | | )
33 | | from .ml_signal_generator import MLBasicSignalGenerator, MLSignalGenerator
34 | | from .momentum_signal_generator import MomentumSignalGenerator
35 | | from .strategy import Strategy
36 | | 
37 | | 
38 | | class StrategyFactory:
   | |_^ I001
39 |       """
40 |       Factory for creating pre-configured strategies
   |
   = help: Organize imports

src/strategies/components/strategy_factory.py:228:21: UP007 [*] Use `X | Y` for type annotations
    |
226 |         sequence_length: int = 120,
227 |         use_prediction_engine: bool = False,
228 |         model_name: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
229 |         model_type: str = "basic",
230 |         timeframe: str = "1h",
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:281:21: UP007 [*] Use `X | Y` for type annotations
    |
279 |         sequence_length: int = 120,
280 |         use_prediction_engine: bool = False,
281 |         model_name: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
282 |     ) -> Strategy:
283 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:327:21: UP007 [*] Use `X | Y` for type annotations
    |
325 |         sequence_length: int = 120,
326 |         use_prediction_engine: bool = False,
327 |         model_name: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
328 |         model_type: str = "sentiment",
329 |         timeframe: str = "1h",
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:482:33: UP007 [*] Use `X | Y` for type annotations
    |
480 |         """
481 |         self.name = name
482 |         self._signal_generator: Optional[SignalGenerator] = None
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
483 |         self._risk_manager: Optional[RiskManager] = None
484 |         self._position_sizer: Optional[PositionSizer] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:483:29: UP007 [*] Use `X | Y` for type annotations
    |
481 |         self.name = name
482 |         self._signal_generator: Optional[SignalGenerator] = None
483 |         self._risk_manager: Optional[RiskManager] = None
    |                             ^^^^^^^^^^^^^^^^^^^^^ UP007
484 |         self._position_sizer: Optional[PositionSizer] = None
485 |         self._regime_detector: Optional[EnhancedRegimeDetector] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:484:31: UP007 [*] Use `X | Y` for type annotations
    |
482 |         self._signal_generator: Optional[SignalGenerator] = None
483 |         self._risk_manager: Optional[RiskManager] = None
484 |         self._position_sizer: Optional[PositionSizer] = None
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ UP007
485 |         self._regime_detector: Optional[EnhancedRegimeDetector] = None
486 |         self._enable_logging: bool = True
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_factory.py:485:32: UP007 [*] Use `X | Y` for type annotations
    |
483 |         self._risk_manager: Optional[RiskManager] = None
484 |         self._position_sizer: Optional[PositionSizer] = None
485 |         self._regime_detector: Optional[EnhancedRegimeDetector] = None
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
486 |         self._enable_logging: bool = True
487 |         self._max_history: int = 1000
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:62:25: UP007 [*] Use `X | Y` for type annotations
   |
60 |     changed_components: list[str]
61 |     parameter_changes: dict[str, Any]
62 |     performance_impact: Optional[dict[str, float]]
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
63 |     created_at: datetime
64 |     created_by: str
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:167:41: UP007 [*] Use `X | Y` for type annotations
    |
165 |     """
166 | 
167 |     def __init__(self, storage_backend: Optional[Any] = None):
    |                                         ^^^^^^^^^^^^^ UP007
168 |         """
169 |         Initialize lineage tracker
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:195:20: UP007 [*] Use `X | Y` for type annotations
    |
193 |         self,
194 |         strategy_id: str,
195 |         parent_id: Optional[str] = None,
    |                    ^^^^^^^^^^^^^ UP007
196 |         metadata: Optional[dict[str, Any]] = None,
197 |     ) -> None:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:196:19: UP007 [*] Use `X | Y` for type annotations
    |
194 |         strategy_id: str,
195 |         parent_id: Optional[str] = None,
196 |         metadata: Optional[dict[str, Any]] = None,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
197 |     ) -> None:
198 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:252:29: UP007 [*] Use `X | Y` for type annotations
    |
250 |         description: str,
251 |         impact_level: ImpactLevel = ImpactLevel.MEDIUM,
252 |         changed_components: Optional[list[str]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^ UP007
253 |         parameter_changes: Optional[dict[str, Any]] = None,
254 |         performance_impact: Optional[dict[str, float]] = None,
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:253:28: UP007 [*] Use `X | Y` for type annotations
    |
251 |         impact_level: ImpactLevel = ImpactLevel.MEDIUM,
252 |         changed_components: Optional[list[str]] = None,
253 |         parameter_changes: Optional[dict[str, Any]] = None,
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
254 |         performance_impact: Optional[dict[str, float]] = None,
255 |         created_by: str = "system",
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:254:29: UP007 [*] Use `X | Y` for type annotations
    |
252 |         changed_components: Optional[list[str]] = None,
253 |         parameter_changes: Optional[dict[str, Any]] = None,
254 |         performance_impact: Optional[dict[str, float]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
255 |         created_by: str = "system",
256 |     ) -> str:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:394:30: UP007 [*] Use `X | Y` for type annotations
    |
392 |         source_strategy_ids: list[str],
393 |         merge_strategy: str = "best_performance",
394 |         conflict_resolution: Optional[dict[str, Any]] = None,
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
395 |         created_by: str = "system",
396 |     ) -> str:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_lineage.py:733:10: UP007 [*] Use `X | Y` for type annotations
    |
731 |     def visualize_lineage(
732 |         self, strategy_id: str, format: str = "dict"
733 |     ) -> Union[dict[str, Any], str]:
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
734 |         """
735 |         Create visualization data for strategy lineage
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:14:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
12 | from datetime import datetime
13 | from enum import Enum
14 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | from uuid import uuid4
   |

src/strategies/components/strategy_registry.py:14:1: UP035 `typing.List` is deprecated, use `list` instead
   |
12 | from datetime import datetime
13 | from enum import Enum
14 | from typing import Any, Dict, List, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | from uuid import uuid4
   |

src/strategies/components/strategy_registry.py:43:26: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
41 |     version: str
42 | 
43 |     def to_dict(self) -> Dict[str, Any]:
   |                          ^^^^ UP006
44 |         """Convert to dictionary for serialization"""
45 |         return asdict(self)
   |
   = help: Replace with `dict`

src/strategies/components/strategy_registry.py:60:16: UP007 [*] Use `X | Y` for type annotations
   |
58 |     name: str
59 |     version: str
60 |     parent_id: Optional[str]
   |                ^^^^^^^^^^^^^ UP007
61 |     created_at: datetime
62 |     created_by: str
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:74:17: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
73 |     # Additional metadata
74 |     parameters: Dict[str, Any]
   |                 ^^^^ UP006
75 |     performance_summary: Optional[Dict[str, Any]]
76 |     validation_results: Optional[Dict[str, Any]]
   |
   = help: Replace with `dict`

src/strategies/components/strategy_registry.py:75:26: UP007 [*] Use `X | Y` for type annotations
   |
73 |     # Additional metadata
74 |     parameters: Dict[str, Any]
75 |     performance_summary: Optional[Dict[str, Any]]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
76 |     validation_results: Optional[Dict[str, Any]]
77 |     # Lineage tracking
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:75:35: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
73 |     # Additional metadata
74 |     parameters: Dict[str, Any]
75 |     performance_summary: Optional[Dict[str, Any]]
   |                                   ^^^^ UP006
76 |     validation_results: Optional[Dict[str, Any]]
77 |     # Lineage tracking
   |
   = help: Replace with `dict`

src/strategies/components/strategy_registry.py:76:25: UP007 [*] Use `X | Y` for type annotations
   |
74 |     parameters: Dict[str, Any]
75 |     performance_summary: Optional[Dict[str, Any]]
76 |     validation_results: Optional[Dict[str, Any]]
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
77 |     # Lineage tracking
78 |     lineage_path: list[str]  # Path from root ancestor to this strategy
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:76:34: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
74 |     parameters: Dict[str, Any]
75 |     performance_summary: Optional[Dict[str, Any]]
76 |     validation_results: Optional[Dict[str, Any]]
   |                                  ^^^^ UP006
77 |     # Lineage tracking
78 |     lineage_path: list[str]  # Path from root ancestor to this strategy
   |
   = help: Replace with `dict`

src/strategies/components/strategy_registry.py:79:18: UP007 [*] Use `X | Y` for type annotations
   |
77 |     # Lineage tracking
78 |     lineage_path: list[str]  # Path from root ancestor to this strategy
79 |     branch_name: Optional[str]
   |                  ^^^^^^^^^^^^^ UP007
80 |     merge_source: Optional[str]
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:80:19: UP007 [*] Use `X | Y` for type annotations
   |
78 |     lineage_path: list[str]  # Path from root ancestor to this strategy
79 |     branch_name: Optional[str]
80 |     merge_source: Optional[str]
   |                   ^^^^^^^^^^^^^ UP007
81 | 
82 |     # Checksums for integrity
   |
   = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:86:26: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
84 |     component_hash: str
85 | 
86 |     def to_dict(self) -> Dict[str, Any]:
   |                          ^^^^ UP006
87 |         """Convert to dictionary for serialization"""
88 |         data = asdict(self)
   |
   = help: Replace with `dict`

src/strategies/components/strategy_registry.py:114:24: UP007 [*] Use `X | Y` for type annotations
    |
112 |     created_at: datetime
113 |     changes: list[str]
114 |     performance_delta: Optional[dict[str, float]]
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
115 |     is_major: bool
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:118:30: UP007 [*] Use `X | Y` for type annotations
    |
117 |     # Configuration snapshot for this version
118 |     signal_generator_config: Optional[dict[str, Any]] = None
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
119 |     risk_manager_config: Optional[dict[str, Any]] = None
120 |     position_sizer_config: Optional[dict[str, Any]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:119:26: UP007 [*] Use `X | Y` for type annotations
    |
117 |     # Configuration snapshot for this version
118 |     signal_generator_config: Optional[dict[str, Any]] = None
119 |     risk_manager_config: Optional[dict[str, Any]] = None
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
120 |     position_sizer_config: Optional[dict[str, Any]] = None
121 |     regime_detector_config: Optional[dict[str, Any]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:120:28: UP007 [*] Use `X | Y` for type annotations
    |
118 |     signal_generator_config: Optional[dict[str, Any]] = None
119 |     risk_manager_config: Optional[dict[str, Any]] = None
120 |     position_sizer_config: Optional[dict[str, Any]] = None
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
121 |     regime_detector_config: Optional[dict[str, Any]] = None
122 |     parameters: Optional[dict[str, Any]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:121:29: UP007 [*] Use `X | Y` for type annotations
    |
119 |     risk_manager_config: Optional[dict[str, Any]] = None
120 |     position_sizer_config: Optional[dict[str, Any]] = None
121 |     regime_detector_config: Optional[dict[str, Any]] = None
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
122 |     parameters: Optional[dict[str, Any]] = None
123 |     config_hash: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:122:17: UP007 [*] Use `X | Y` for type annotations
    |
120 |     position_sizer_config: Optional[dict[str, Any]] = None
121 |     regime_detector_config: Optional[dict[str, Any]] = None
122 |     parameters: Optional[dict[str, Any]] = None
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
123 |     config_hash: Optional[str] = None
124 |     component_hash: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:123:18: UP007 [*] Use `X | Y` for type annotations
    |
121 |     regime_detector_config: Optional[dict[str, Any]] = None
122 |     parameters: Optional[dict[str, Any]] = None
123 |     config_hash: Optional[str] = None
    |                  ^^^^^^^^^^^^^ UP007
124 |     component_hash: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:124:21: UP007 [*] Use `X | Y` for type annotations
    |
122 |     parameters: Optional[dict[str, Any]] = None
123 |     config_hash: Optional[str] = None
124 |     component_hash: Optional[str] = None
    |                     ^^^^^^^^^^^^^ UP007
125 | 
126 |     def to_dict(self) -> Dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:126:26: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
124 |     component_hash: Optional[str] = None
125 | 
126 |     def to_dict(self) -> Dict[str, Any]:
    |                          ^^^^ UP006
127 |         """Convert to dictionary for serialization"""
128 |         data = asdict(self)
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:155:41: UP007 [*] Use `X | Y` for type annotations
    |
153 |     """
154 | 
155 |     def __init__(self, storage_backend: Optional[Any] = None):
    |                                         ^^^^^^^^^^^^^ UP007
156 |         """
157 |         Initialize strategy registry
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:166:27: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
165 |         # In-memory storage
166 |         self._strategies: Dict[str, StrategyMetadata] = {}
    |                           ^^^^ UP006
167 |         self._versions: Dict[str, List[StrategyVersion]] = {}
168 |         self._lineage: Dict[str, List[str]] = {}  # parent_id -> [child_ids]
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:167:25: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
165 |         # In-memory storage
166 |         self._strategies: Dict[str, StrategyMetadata] = {}
167 |         self._versions: Dict[str, List[StrategyVersion]] = {}
    |                         ^^^^ UP006
168 |         self._lineage: Dict[str, List[str]] = {}  # parent_id -> [child_ids]
169 |         # Component type registry for validation
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:167:35: UP006 [*] Use `list` instead of `List` for type annotation
    |
165 |         # In-memory storage
166 |         self._strategies: Dict[str, StrategyMetadata] = {}
167 |         self._versions: Dict[str, List[StrategyVersion]] = {}
    |                                   ^^^^ UP006
168 |         self._lineage: Dict[str, List[str]] = {}  # parent_id -> [child_ids]
169 |         # Component type registry for validation
    |
    = help: Replace with `list`

src/strategies/components/strategy_registry.py:168:24: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
166 |         self._strategies: Dict[str, StrategyMetadata] = {}
167 |         self._versions: Dict[str, List[StrategyVersion]] = {}
168 |         self._lineage: Dict[str, List[str]] = {}  # parent_id -> [child_ids]
    |                        ^^^^ UP006
169 |         # Component type registry for validation
170 |         self._component_types = {
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:168:34: UP006 [*] Use `list` instead of `List` for type annotation
    |
166 |         self._strategies: Dict[str, StrategyMetadata] = {}
167 |         self._versions: Dict[str, List[StrategyVersion]] = {}
168 |         self._lineage: Dict[str, List[str]] = {}  # parent_id -> [child_ids]
    |                                  ^^^^ UP006
169 |         # Component type registry for validation
170 |         self._component_types = {
    |
    = help: Replace with `list`

src/strategies/components/strategy_registry.py:180:45: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
179 |     def register_strategy(
180 |         self, strategy: Strategy, metadata: Dict[str, Any], parent_id: Optional[str] = None
    |                                             ^^^^ UP006
181 |     ) -> str:
182 |         """
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:180:72: UP007 [*] Use `X | Y` for type annotations
    |
179 |     def register_strategy(
180 |         self, strategy: Strategy, metadata: Dict[str, Any], parent_id: Optional[str] = None
    |                                                                        ^^^^^^^^^^^^^ UP007
181 |     ) -> str:
182 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:363:58: UP007 [*] Use `X | Y` for type annotations
    |
361 |         return new_version
362 | 
363 |     def get_strategy_metadata(self, strategy_id: str) -> Optional[StrategyMetadata]:
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
364 |         """
365 |         Get strategy metadata by ID
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:375:58: UP006 [*] Use `list` instead of `List` for type annotation
    |
373 |         return self._strategies.get(strategy_id)
374 | 
375 |     def get_strategy_versions(self, strategy_id: str) -> List[StrategyVersion]:
    |                                                          ^^^^ UP006
376 |         """
377 |         Get all versions for a strategy
    |
    = help: Replace with `list`

src/strategies/components/strategy_registry.py:527:23: UP007 [*] Use `X | Y` for type annotations
    |
526 |     def list_strategies(
527 |         self, status: Optional[StrategyStatus] = None, tags: Optional[list[str]] = None
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
528 |     ) -> list[StrategyMetadata]:
529 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:527:62: UP007 [*] Use `X | Y` for type annotations
    |
526 |     def list_strategies(
527 |         self, status: Optional[StrategyStatus] = None, tags: Optional[list[str]] = None
    |                                                              ^^^^^^^^^^^^^^^^^^^ UP007
528 |     ) -> list[StrategyMetadata]:
529 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:549:57: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
547 |         return strategies
548 | 
549 |     def get_strategy_lineage(self, strategy_id: str) -> Dict[str, Any]:
    |                                                         ^^^^ UP006
550 |         """
551 |         Get complete lineage information for a strategy
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:591:55: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
589 |         }
590 | 
591 |     def serialize_strategy(self, strategy_id: str) -> Dict[str, Any]:
    |                                                       ^^^^ UP006
592 |         """
593 |         Serialize strategy to dictionary
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:616:42: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
614 |         }
615 | 
616 |     def deserialize_strategy(self, data: Dict[str, Any]) -> str:
    |                                          ^^^^ UP006
617 |         """
618 |         Deserialize strategy from dictionary
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:655:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
654 |         except Exception as e:
655 |             raise StrategyValidationError(f"Failed to deserialize strategy: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
656 | 
657 |     def validate_strategy_integrity(self, strategy_id: str) -> Dict[str, Any]:
    |

src/strategies/components/strategy_registry.py:657:64: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
655 |             raise StrategyValidationError(f"Failed to deserialize strategy: {e}")
656 | 
657 |     def validate_strategy_integrity(self, strategy_id: str) -> Dict[str, Any]:
    |                                                                ^^^^ UP006
658 |         """
659 |         Validate strategy integrity and consistency
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:737:65: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
735 |             raise StrategyValidationError("Strategy missing position_sizer")
736 | 
737 |     def _extract_component_configs(self, strategy: Strategy) -> Dict[str, ComponentConfig]:
    |                                                                 ^^^^ UP006
738 |         """Extract component configurations from strategy"""
739 |         return {
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:767:34: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
766 |     def _calculate_config_hash(
767 |         self, component_configs: Dict[str, ComponentConfig], parameters: Dict[str, Any]
    |                                  ^^^^ UP006
768 |     ) -> str:
769 |         """Calculate configuration hash for integrity checking"""
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:767:74: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
766 |     def _calculate_config_hash(
767 |         self, component_configs: Dict[str, ComponentConfig], parameters: Dict[str, Any]
    |                                                                          ^^^^ UP006
768 |     ) -> str:
769 |         """Calculate configuration hash for integrity checking"""
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:796:46: UP007 [*] Use `X | Y` for type annotations
    |
794 |         return hashlib.sha256(component_str.encode()).hexdigest()
795 | 
796 |     def _build_lineage_path(self, parent_id: Optional[str]) -> List[str]:
    |                                              ^^^^^^^^^^^^^ UP007
797 |         """Build lineage path from root to current strategy"""
798 |         if not parent_id or parent_id not in self._strategies:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_registry.py:796:64: UP006 [*] Use `list` instead of `List` for type annotation
    |
794 |         return hashlib.sha256(component_str.encode()).hexdigest()
795 | 
796 |     def _build_lineage_path(self, parent_id: Optional[str]) -> List[str]:
    |                                                                ^^^^ UP006
797 |         """Build lineage path from root to current strategy"""
798 |         if not parent_id or parent_id not in self._strategies:
    |
    = help: Replace with `list`

src/strategies/components/strategy_registry.py:817:53: UP006 [*] Use `list` instead of `List` for type annotation
    |
815 |             return f"{major}.{minor}.{patch + 1}"
816 | 
817 |     def _get_descendants(self, strategy_id: str) -> List[Dict[str, Any]]:
    |                                                     ^^^^ UP006
818 |         """Get all descendants of a strategy"""
819 |         descendants = []
    |
    = help: Replace with `list`

src/strategies/components/strategy_registry.py:817:58: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
815 |             return f"{major}.{minor}.{patch + 1}"
816 | 
817 |     def _get_descendants(self, strategy_id: str) -> List[Dict[str, Any]]:
    |                                                          ^^^^ UP006
818 |         """Get all descendants of a strategy"""
819 |         descendants = []
    |
    = help: Replace with `dict`

src/strategies/components/strategy_registry.py:851:53: UP006 [*] Use `list` instead of `List` for type annotation
    |
850 |     def _validate_serialized_data(
851 |         self, metadata: StrategyMetadata, versions: List[StrategyVersion]
    |                                                     ^^^^ UP006
852 |     ) -> None:
853 |         """Validate serialized data consistency"""
    |
    = help: Replace with `list`

src/strategies/components/strategy_selector.py:113:32: UP007 [*] Use `X | Y` for type annotations
    |
111 |     """
112 | 
113 |     def __init__(self, config: Optional[SelectionConfig] = None):
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
114 |         """
115 |         Initialize strategy selector
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:131:40: UP007 [*] Use `X | Y` for type annotations
    |
129 |         self.correlation_matrix: dict[tuple[str, str], float] = {}
130 |         self.correlation_cache_expiry = datetime.min
131 |         self.correlation_strategy_set: Optional[frozenset[str]] = (
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
132 |             None  # Track which strategies are cached
133 |         )
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:144:25: UP007 [*] Use `X | Y` for type annotations
    |
142 |         self,
143 |         available_strategies: dict[str, PerformanceTracker],
144 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
145 |         exclude_strategies: Optional[list[str]] = None,
146 |     ) -> Optional[str]:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:145:29: UP007 [*] Use `X | Y` for type annotations
    |
143 |         available_strategies: dict[str, PerformanceTracker],
144 |         current_regime: Optional[RegimeContext] = None,
145 |         exclude_strategies: Optional[list[str]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^ UP007
146 |     ) -> Optional[str]:
147 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:146:10: UP007 [*] Use `X | Y` for type annotations
    |
144 |         current_regime: Optional[RegimeContext] = None,
145 |         exclude_strategies: Optional[list[str]] = None,
146 |     ) -> Optional[str]:
    |          ^^^^^^^^^^^^^ UP007
147 |         """
148 |         Select the best strategy based on multi-criteria analysis
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:196:25: UP007 [*] Use `X | Y` for type annotations
    |
194 |         self,
195 |         available_strategies: dict[str, PerformanceTracker],
196 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
197 |         exclude_strategies: Optional[list[str]] = None,
198 |     ) -> list[StrategyScore]:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:197:29: UP007 [*] Use `X | Y` for type annotations
    |
195 |         available_strategies: dict[str, PerformanceTracker],
196 |         current_regime: Optional[RegimeContext] = None,
197 |         exclude_strategies: Optional[list[str]] = None,
    |                             ^^^^^^^^^^^^^^^^^^^ UP007
198 |     ) -> list[StrategyScore]:
199 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:230:25: UP007 [*] Use `X | Y` for type annotations
    |
228 |         strategy_ids: list[str],
229 |         performance_trackers: dict[str, PerformanceTracker],
230 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
231 |     ) -> dict[str, Any]:
232 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:339:74: UP007 [*] Use `X | Y` for type annotations
    |
338 |     def _calculate_strategy_scores(
339 |         self, strategies: dict[str, PerformanceTracker], current_regime: Optional[RegimeContext]
    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^ UP007
340 |     ) -> list[StrategyScore]:
341 |         """Calculate comprehensive scores for all strategies"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:433:60: UP007 [*] Use `X | Y` for type annotations
    |
432 |     def _calculate_regime_scores(
433 |         self, tracker: PerformanceTracker, current_regime: Optional[RegimeContext]
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^ UP007
434 |     ) -> dict[str, float]:
435 |         """Calculate regime-specific performance scores"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_selector.py:532:25: UP007 [*] Use `X | Y` for type annotations
    |
530 |         risk_adjusted_score: float,
531 |         correlation_penalty: float,
532 |         current_regime: Optional[RegimeContext],
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
533 |     ) -> float:
534 |         """Calculate total weighted score for strategy"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:17:1: UP035 [*] Import from `collections.abc` instead: `Callable`
   |
15 | from datetime import datetime, timedelta
16 | from enum import Enum
17 | from typing import Any, Callable, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
18 | 
19 | import pandas as pd
   |
   = help: Import from `collections.abc`

src/strategies/components/strategy_switcher.py:181:18: UP007 [*] Use `X | Y` for type annotations
    |
179 |     trigger: SwitchTrigger
180 |     from_strategy: str
181 |     to_strategy: Optional[str]  # None for auto-selection
    |                  ^^^^^^^^^^^^^ UP007
182 |     reason: str
183 |     requested_at: datetime
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:188:22: UP007 [*] Use `X | Y` for type annotations
    |
187 |     # Switch decision context
188 |     switch_decision: Optional[SwitchDecision] = None
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
189 |     alternative_scores: Optional[list[StrategyScore]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:189:25: UP007 [*] Use `X | Y` for type annotations
    |
187 |     # Switch decision context
188 |     switch_decision: Optional[SwitchDecision] = None
189 |     alternative_scores: Optional[list[StrategyScore]] = None
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
190 | 
191 |     def to_dict(self) -> dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:217:18: UP007 [*] Use `X | Y` for type annotations
    |
215 |     validation_result: ValidationResult
216 |     status: SwitchStatus
217 |     executed_at: Optional[datetime] = None
    |                  ^^^^^^^^^^^^^^^^^^ UP007
218 |     completed_at: Optional[datetime] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:218:19: UP007 [*] Use `X | Y` for type annotations
    |
216 |     status: SwitchStatus
217 |     executed_at: Optional[datetime] = None
218 |     completed_at: Optional[datetime] = None
    |                   ^^^^^^^^^^^^^^^^^^ UP007
219 | 
220 |     # Performance tracking
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:221:29: UP007 [*] Use `X | Y` for type annotations
    |
220 |     # Performance tracking
221 |     pre_switch_performance: Optional[dict[str, float]] = None
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
222 |     post_switch_performance: Optional[dict[str, float]] = None
223 |     performance_impact: Optional[dict[str, float]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:222:30: UP007 [*] Use `X | Y` for type annotations
    |
220 |     # Performance tracking
221 |     pre_switch_performance: Optional[dict[str, float]] = None
222 |     post_switch_performance: Optional[dict[str, float]] = None
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
223 |     performance_impact: Optional[dict[str, float]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:223:25: UP007 [*] Use `X | Y` for type annotations
    |
221 |     pre_switch_performance: Optional[dict[str, float]] = None
222 |     post_switch_performance: Optional[dict[str, float]] = None
223 |     performance_impact: Optional[dict[str, float]] = None
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
224 | 
225 |     # Error information
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:226:20: UP007 [*] Use `X | Y` for type annotations
    |
225 |     # Error information
226 |     error_message: Optional[str] = None
    |                    ^^^^^^^^^^^^^ UP007
227 | 
228 |     def to_dict(self) -> dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:256:17: UP007 [*] Use `X | Y` for type annotations
    |
254 |         performance_monitor: PerformanceMonitor,
255 |         strategy_selector: StrategySelector,
256 |         config: Optional[SwitchConfig] = None,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ UP007
257 |     ):
258 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:274:32: UP007 [*] Use `X | Y` for type annotations
    |
272 |         self.switch_history: deque[SwitchRecord] = deque(maxlen=1000)
273 |         self.pending_requests: dict[str, SwitchRequest] = {}
274 |         self.last_switch_time: Optional[datetime] = None
    |                                ^^^^^^^^^^^^^^^^^^ UP007
275 | 
276 |         # Manual override controls
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:278:37: UP007 [*] Use `X | Y` for type annotations
    |
276 |         # Manual override controls
277 |         self.manual_override_active = False
278 |         self.manual_override_until: Optional[datetime] = None
    |                                     ^^^^^^^^^^^^^^^^^^ UP007
279 |         self.manual_override_reason: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:279:38: UP007 [*] Use `X | Y` for type annotations
    |
277 |         self.manual_override_active = False
278 |         self.manual_override_until: Optional[datetime] = None
279 |         self.manual_override_reason: Optional[str] = None
    |                                      ^^^^^^^^^^^^^ UP007
280 | 
281 |         # Circuit breaker for critical failures
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:283:44: UP007 [*] Use `X | Y` for type annotations
    |
281 |         # Circuit breaker for critical failures
282 |         self.circuit_breaker_active = False
283 |         self.circuit_breaker_activated_at: Optional[datetime] = None
    |                                            ^^^^^^^^^^^^^^^^^^ UP007
284 |         self.circuit_breaker_reason: Optional[str] = None
285 |         self.last_active_strategy: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:284:38: UP007 [*] Use `X | Y` for type annotations
    |
282 |         self.circuit_breaker_active = False
283 |         self.circuit_breaker_activated_at: Optional[datetime] = None
284 |         self.circuit_breaker_reason: Optional[str] = None
    |                                      ^^^^^^^^^^^^^ UP007
285 |         self.last_active_strategy: Optional[str] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:285:36: UP007 [*] Use `X | Y` for type annotations
    |
283 |         self.circuit_breaker_activated_at: Optional[datetime] = None
284 |         self.circuit_breaker_reason: Optional[str] = None
285 |         self.last_active_strategy: Optional[str] = None
    |                                    ^^^^^^^^^^^^^ UP007
286 | 
287 |         # Switch callbacks
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:302:25: UP007 [*] Use `X | Y` for type annotations
    |
300 |         available_strategies: dict[str, PerformanceTracker],
301 |         market_data: pd.DataFrame,
302 |         current_regime: Optional[RegimeContext] = None,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
303 |     ) -> Optional[SwitchRequest]:
304 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:303:10: UP007 [*] Use `X | Y` for type annotations
    |
301 |         market_data: pd.DataFrame,
302 |         current_regime: Optional[RegimeContext] = None,
303 |     ) -> Optional[SwitchRequest]:
    |          ^^^^^^^^^^^^^^^^^^^^^^^ UP007
304 |         """
305 |         Evaluate if a strategy switch is needed
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:413:31: UP007 [*] Use `X | Y` for type annotations
    |
411 |         request: SwitchRequest,
412 |         strategy_activation_callback: Callable[[str], bool],
413 |         performance_trackers: Optional[dict[str, PerformanceTracker]] = None,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
414 |     ) -> SwitchRecord:
415 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:610:45: UP007 [*] Use `X | Y` for type annotations
    |
609 |     def set_manual_override(
610 |         self, active: bool, duration_hours: Optional[int] = None, reason: Optional[str] = None
    |                                             ^^^^^^^^^^^^^ UP007
611 |     ) -> None:
612 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:610:75: UP007 [*] Use `X | Y` for type annotations
    |
609 |     def set_manual_override(
610 |         self, active: bool, duration_hours: Optional[int] = None, reason: Optional[str] = None
    |                                                                           ^^^^^^^^^^^^^ UP007
611 |     ) -> None:
612 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:636:44: UP007 [*] Use `X | Y` for type annotations
    |
635 |     def get_switch_history(
636 |         self, days: int = 30, strategy_id: Optional[str] = None
    |                                            ^^^^^^^^^^^^^ UP007
637 |     ) -> list[SwitchRecord]:
638 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:949:54: UP007 [*] Use `X | Y` for type annotations
    |
948 |     def _capture_performance_snapshot(
949 |         self, strategy_id: str, performance_tracker: Optional[PerformanceTracker] = None
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
950 |     ) -> dict[str, float]:
951 |         """Capture performance snapshot before/after switch"""
    |
    = help: Convert to `X | Y`

src/strategies/components/strategy_switcher.py:1089:49: UP007 [*] Use `X | Y` for type annotations
     |
1088 |     def _activate_circuit_breaker(
1089 |         self, reason: str, last_known_strategy: Optional[str] = None
     |                                                 ^^^^^^^^^^^^^ UP007
1090 |     ) -> None:
1091 |         """
     |
     = help: Convert to `X | Y`

src/strategies/components/technical_signal_generator.py:103:53: UP007 [*] Use `X | Y` for type annotations
    |
102 |     def generate_signal(
103 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
104 |     ) -> Signal:
105 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/technical_signal_generator.py:352:17: UP007 [*] Use `X | Y` for type annotations
    |
350 |         ma_signal: int,
351 |         bb_signal: int,
352 |         regime: Optional[RegimeContext] = None,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^ UP007
353 |     ) -> SignalDirection:
354 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/technical_signal_generator.py:556:53: UP007 [*] Use `X | Y` for type annotations
    |
555 |     def generate_signal(
556 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
557 |     ) -> Signal:
558 |         """Generate signal based on RSI levels"""
    |
    = help: Convert to `X | Y`

src/strategies/components/technical_signal_generator.py:686:53: UP007 [*] Use `X | Y` for type annotations
    |
685 |     def generate_signal(
686 |         self, df: pd.DataFrame, index: int, regime: Optional[RegimeContext] = None
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^ UP007
687 |     ) -> Signal:
688 |         """Generate signal based on MACD crossovers"""
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:17:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
15 | from dataclasses import dataclass
16 | from datetime import datetime
17 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
18 | 
19 | import numpy as np
   |

src/strategies/components/testing/component_performance_tester.py:17:1: UP035 `typing.List` is deprecated, use `list` instead
   |
15 | from dataclasses import dataclass
16 | from datetime import datetime
17 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
18 | 
19 | import numpy as np
   |

src/strategies/components/testing/component_performance_tester.py:17:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
15 | from dataclasses import dataclass
16 | from datetime import datetime
17 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
18 | 
19 | import numpy as np
   |

src/strategies/components/testing/component_performance_tester.py:71:23: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
70 |     # Regime breakdown (if regime data available)
71 |     regime_breakdown: Dict[str, Dict[str, float]]
   |                       ^^^^ UP006
72 | 
73 |     # Error analysis
   |
   = help: Replace with `dict`

src/strategies/components/testing/component_performance_tester.py:71:33: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
70 |     # Regime breakdown (if regime data available)
71 |     regime_breakdown: Dict[str, Dict[str, float]]
   |                                 ^^^^ UP006
72 | 
73 |     # Error analysis
   |
   = help: Replace with `dict`

src/strategies/components/testing/component_performance_tester.py:176:21: UP007 [*] Use `X | Y` for type annotations
    |
174 |     """Combined results from all component tests"""
175 | 
176 |     signal_results: Optional[SignalTestResults] = None
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
177 |     risk_results: Optional[RiskTestResults] = None
178 |     sizing_results: Optional[SizingTestResults] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:177:19: UP007 [*] Use `X | Y` for type annotations
    |
176 |     signal_results: Optional[SignalTestResults] = None
177 |     risk_results: Optional[RiskTestResults] = None
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
178 |     sizing_results: Optional[SizingTestResults] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:178:21: UP007 [*] Use `X | Y` for type annotations
    |
176 |     signal_results: Optional[SignalTestResults] = None
177 |     risk_results: Optional[RiskTestResults] = None
178 |     sizing_results: Optional[SizingTestResults] = None
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
179 | 
180 |     # Overall metrics
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:197:62: UP007 [*] Use `X | Y` for type annotations
    |
195 |     """
196 | 
197 |     def __init__(self, test_data: pd.DataFrame, regime_data: Optional[pd.DataFrame] = None):
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^ UP007
198 |         """
199 |         Initialize component performance tester
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:282:43: UP006 [*] Use `list` instead of `List` for type annotation
    |
280 |         return true_range.rolling(window=period).mean()
281 | 
282 |     def _generate_test_scenarios(self) -> List[Dict[str, Any]]:
    |                                           ^^^^ UP006
283 |         """Generate various test scenarios for comprehensive testing"""
284 |         scenarios = []
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:282:48: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
280 |         return true_range.rolling(window=period).mean()
281 | 
282 |     def _generate_test_scenarios(self) -> List[Dict[str, Any]]:
    |                                                ^^^^ UP006
283 |         """Generate various test scenarios for comprehensive testing"""
284 |         scenarios = []
    |
    = help: Replace with `dict`

src/strategies/components/testing/component_performance_tester.py:349:59: UP006 [*] Use `list` instead of `List` for type annotation
    |
347 |         return scenarios
348 | 
349 |     def _identify_trend_periods(self, trend_type: str) -> List[Tuple[int, int]]:
    |                                                           ^^^^ UP006
350 |         """Identify periods of specific trend direction"""
351 |         # Simple trend identification using moving averages
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:349:64: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
347 |         return scenarios
348 | 
349 |     def _identify_trend_periods(self, trend_type: str) -> List[Tuple[int, int]]:
    |                                                                ^^^^^ UP006
350 |         """Identify periods of specific trend direction"""
351 |         # Simple trend identification using moving averages
    |
    = help: Replace with `tuple`

src/strategies/components/testing/component_performance_tester.py:381:62: UP006 [*] Use `list` instead of `List` for type annotation
    |
379 |         return periods
380 | 
381 |     def _identify_volatility_periods(self, vol_type: str) -> List[Tuple[int, int]]:
    |                                                              ^^^^ UP006
382 |         """Identify periods of specific volatility level"""
383 |         # Calculate rolling volatility
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:381:67: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
379 |         return periods
380 | 
381 |     def _identify_volatility_periods(self, vol_type: str) -> List[Tuple[int, int]]:
    |                                                                   ^^^^^ UP006
382 |         """Identify periods of specific volatility level"""
383 |         # Calculate rolling volatility
    |
    = help: Replace with `tuple`

src/strategies/components/testing/component_performance_tester.py:414:54: UP007 [*] Use `X | Y` for type annotations
    |
413 |     def test_signal_generator(
414 |         self, generator: SignalGenerator, scenarios: Optional[List[str]] = None
    |                                                      ^^^^^^^^^^^^^^^^^^^ UP007
415 |     ) -> SignalTestResults:
416 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:414:63: UP006 [*] Use `list` instead of `List` for type annotation
    |
413 |     def test_signal_generator(
414 |         self, generator: SignalGenerator, scenarios: Optional[List[str]] = None
    |                                                               ^^^^ UP006
415 |     ) -> SignalTestResults:
416 |         """
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:621:49: UP006 [*] Use `list` instead of `List` for type annotation
    |
619 |         )
620 | 
621 |     def _simulate_signal_trading(self, signals: List[Dict[str, Any]]) -> pd.Series:
    |                                                 ^^^^ UP006
622 |         """Simulate trading based on signals to calculate performance"""
623 |         returns = []
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:621:54: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
619 |         )
620 | 
621 |     def _simulate_signal_trading(self, signals: List[Dict[str, Any]]) -> pd.Series:
    |                                                      ^^^^ UP006
622 |         """Simulate trading based on signals to calculate performance"""
623 |         returns = []
    |
    = help: Replace with `dict`

src/strategies/components/testing/component_performance_tester.py:665:20: UP007 [*] Use `X | Y` for type annotations
    |
663 |         risk_manager: RiskManager,
664 |         test_balance: float = 10000.0,
665 |         scenarios: Optional[List[str]] = None,
    |                    ^^^^^^^^^^^^^^^^^^^ UP007
666 |     ) -> RiskTestResults:
667 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:665:29: UP006 [*] Use `list` instead of `List` for type annotation
    |
663 |         risk_manager: RiskManager,
664 |         test_balance: float = 10000.0,
665 |         scenarios: Optional[List[str]] = None,
    |                             ^^^^ UP006
666 |     ) -> RiskTestResults:
667 |         """
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:783:43: B905 [*] `zip()` without an explicit `strict=` parameter
    |
781 |         late_exits = 0
782 | 
783 |         for should_exit, actual_return in zip(exit_decisions, actual_returns):
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
784 |             if should_exit and actual_return < -0.02:  # Correctly exited before big loss
785 |                 correct_exits += 1
    |
    = help: Add explicit `strict=False`

src/strategies/components/testing/component_performance_tester.py:850:20: UP007 [*] Use `X | Y` for type annotations
    |
848 |         position_sizer: PositionSizer,
849 |         test_balance: float = 10000.0,
850 |         scenarios: Optional[List[str]] = None,
    |                    ^^^^^^^^^^^^^^^^^^^ UP007
851 |     ) -> SizingTestResults:
852 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:850:29: UP006 [*] Use `list` instead of `List` for type annotation
    |
848 |         position_sizer: PositionSizer,
849 |         test_balance: float = 10000.0,
850 |         scenarios: Optional[List[str]] = None,
    |                             ^^^^ UP006
851 |     ) -> SizingTestResults:
852 |         """
    |
    = help: Replace with `list`

src/strategies/components/testing/component_performance_tester.py:1005:27: UP007 [*] Use `X | Y` for type annotations
     |
1003 |     def test_all_components(
1004 |         self,
1005 |         signal_generator: Optional[SignalGenerator] = None,
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
1006 |         risk_manager: Optional[RiskManager] = None,
1007 |         position_sizer: Optional[PositionSizer] = None,
     |
     = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:1006:23: UP007 [*] Use `X | Y` for type annotations
     |
1004 |         self,
1005 |         signal_generator: Optional[SignalGenerator] = None,
1006 |         risk_manager: Optional[RiskManager] = None,
     |                       ^^^^^^^^^^^^^^^^^^^^^ UP007
1007 |         position_sizer: Optional[PositionSizer] = None,
1008 |         test_balance: float = 10000.0,
     |
     = help: Convert to `X | Y`

src/strategies/components/testing/component_performance_tester.py:1007:25: UP007 [*] Use `X | Y` for type annotations
     |
1005 |         signal_generator: Optional[SignalGenerator] = None,
1006 |         risk_manager: Optional[RiskManager] = None,
1007 |         position_sizer: Optional[PositionSizer] = None,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^ UP007
1008 |         test_balance: float = 10000.0,
1009 |     ) -> ComponentTestResults:
     |
     = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:11:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
 9 | import time
10 | from dataclasses import dataclass
11 | from typing import Any, Dict, List, Optional, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import numpy as np
   |

src/strategies/components/testing/performance_attribution.py:11:1: UP035 `typing.List` is deprecated, use `list` instead
   |
 9 | import time
10 | from dataclasses import dataclass
11 | from typing import Any, Dict, List, Optional, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import numpy as np
   |

src/strategies/components/testing/performance_attribution.py:57:25: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
56 |     # Regime-specific attribution
57 |     regime_attribution: Dict[str, float]  # Performance by regime
   |                         ^^^^ UP006
58 | 
59 |     # Optimization recommendations
   |
   = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:61:30: UP006 [*] Use `list` instead of `List` for type annotation
   |
59 |     # Optimization recommendations
60 |     optimization_potential: float  # Potential for improvement
61 |     recommended_adjustments: List[str]  # Specific recommendations
   |                              ^^^^ UP006
   |
   = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:73:25: UP007 [*] Use `X | Y` for type annotations
   |
72 |     # Component attributions
73 |     signal_attribution: Optional[ComponentAttribution] = None
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
74 |     risk_attribution: Optional[ComponentAttribution] = None
75 |     sizing_attribution: Optional[ComponentAttribution] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:74:23: UP007 [*] Use `X | Y` for type annotations
   |
72 |     # Component attributions
73 |     signal_attribution: Optional[ComponentAttribution] = None
74 |     risk_attribution: Optional[ComponentAttribution] = None
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
75 |     sizing_attribution: Optional[ComponentAttribution] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:75:25: UP007 [*] Use `X | Y` for type annotations
   |
73 |     signal_attribution: Optional[ComponentAttribution] = None
74 |     risk_attribution: Optional[ComponentAttribution] = None
75 |     sizing_attribution: Optional[ComponentAttribution] = None
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
76 | 
77 |     # Cross-component analysis
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:78:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
77 |     # Cross-component analysis
78 |     component_correlations: Dict[str, Dict[str, float]] = None
   |                             ^^^^ UP006
79 |     interaction_effects: Dict[str, float] = None
   |
   = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:78:39: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
77 |     # Cross-component analysis
78 |     component_correlations: Dict[str, Dict[str, float]] = None
   |                                       ^^^^ UP006
79 |     interaction_effects: Dict[str, float] = None
   |
   = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:79:26: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
77 |     # Cross-component analysis
78 |     component_correlations: Dict[str, Dict[str, float]] = None
79 |     interaction_effects: Dict[str, float] = None
   |                          ^^^^ UP006
80 | 
81 |     # Overall attribution summary
   |
   = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:89:28: UP006 [*] Use `list` instead of `List` for type annotation
   |
87 |     primary_performance_driver: str = ""
88 |     weakest_component: str = ""
89 |     optimization_priority: List[str] = None
   |                            ^^^^ UP006
90 | 
91 |     # Replacement analysis
   |
   = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:92:35: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
91 |     # Replacement analysis
92 |     component_replacement_impact: Dict[str, float] = None
   |                                   ^^^^ UP006
   |
   = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:103:62: UP007 [*] Use `X | Y` for type annotations
    |
101 |     """
102 | 
103 |     def __init__(self, test_data: pd.DataFrame, regime_data: Optional[pd.DataFrame] = None):
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^ UP007
104 |         """
105 |         Initialize performance attribution analyzer
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:152:46: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
150 |         self.test_data = self.test_data.dropna()
151 | 
152 |     def _calculate_baseline_metrics(self) -> Dict[str, float]:
    |                                              ^^^^ UP006
153 |         """Calculate baseline performance metrics for comparison"""
154 |         returns = self.test_data["returns"]
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:262:9: F841 Local variable `analysis_duration` is assigned to but never used
    |
260 |         replacement_impact = self._calculate_replacement_impact(strategy, baseline_results)
261 | 
262 |         analysis_duration = time.time() - start_time
    |         ^^^^^^^^^^^^^^^^^ F841
263 | 
264 |         return AttributionReport(
    |
    = help: Remove assignment to unused variable `analysis_duration`

src/strategies/components/testing/performance_attribution.py:282:81: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
280 |         )
281 | 
282 |     def _simulate_strategy(self, strategy: Strategy, initial_balance: float) -> Dict[str, Any]:
    |                                                                                 ^^^^ UP006
283 |         """Simulate strategy performance and collect detailed metrics"""
284 |         balance = initial_balance
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:289:9: F841 Local variable `risk_decisions` is assigned to but never used
    |
287 |         signals = []
288 |         position_sizes = []
289 |         risk_decisions = []
    |         ^^^^^^^^^^^^^^ F841
290 |         error_count = 0
291 |         total_iterations = len(self.test_data) - 1
    |
    = help: Remove assignment to unused variable `risk_decisions`

src/strategies/components/testing/performance_attribution.py:383:10: UP007 [*] Use `X | Y` for type annotations
    |
381 |     def _execute_attribution_trade(
382 |         self, decision, entry_data: pd.Series, exit_data: pd.Series, balance: float
383 |     ) -> Optional[Dict[str, Any]]:
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
384 |         """Execute trade for attribution analysis"""
385 |         try:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:383:19: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
381 |     def _execute_attribution_trade(
382 |         self, decision, entry_data: pd.Series, exit_data: pd.Series, balance: float
383 |     ) -> Optional[Dict[str, Any]]:
    |                   ^^^^ UP006
384 |         """Execute trade for attribution analysis"""
385 |         try:
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:432:68: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
431 |     def _analyze_signal_generator_attribution(
432 |         self, signal_generator: SignalGenerator, baseline_results: Dict[str, Any]
    |                                                                    ^^^^ UP006
433 |     ) -> ComponentAttribution:
434 |         """Analyze signal generator's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:502:60: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
501 |     def _analyze_risk_manager_attribution(
502 |         self, risk_manager: RiskManager, baseline_results: Dict[str, Any]
    |                                                            ^^^^ UP006
503 |     ) -> ComponentAttribution:
504 |         """Analyze risk manager's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:567:64: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
566 |     def _analyze_position_sizer_attribution(
567 |         self, position_sizer: PositionSizer, baseline_results: Dict[str, Any]
    |                                                                ^^^^ UP006
568 |     ) -> ComponentAttribution:
569 |         """Analyze position sizer's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:585:9: F841 Local variable `sizes` is assigned to but never used
    |
584 |         # Calculate sizing-specific metrics
585 |         sizes = [p["size"] for p in position_sizes]
    |         ^^^^^ F841
586 |         size_fractions = [p["size_fraction"] for p in position_sizes]
    |
    = help: Remove assignment to unused variable `sizes`

src/strategies/components/testing/performance_attribution.py:669:24: UP006 [*] Use `list` instead of `List` for type annotation
    |
668 |     def _calculate_signal_accuracy(
669 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                        ^^^^ UP006
670 |     ) -> float:
671 |         """Calculate signal accuracy based on trade outcomes"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:669:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
668 |     def _calculate_signal_accuracy(
669 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                             ^^^^ UP006
670 |     ) -> float:
671 |         """Calculate signal accuracy based on trade outcomes"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:669:54: UP006 [*] Use `list` instead of `List` for type annotation
    |
668 |     def _calculate_signal_accuracy(
669 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                      ^^^^ UP006
670 |     ) -> float:
671 |         """Calculate signal accuracy based on trade outcomes"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:669:59: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
668 |     def _calculate_signal_accuracy(
669 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                           ^^^^ UP006
670 |     ) -> float:
671 |         """Calculate signal accuracy based on trade outcomes"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:704:24: UP006 [*] Use `list` instead of `List` for type annotation
    |
703 |     def _calculate_signal_timing_quality(
704 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                        ^^^^ UP006
705 |     ) -> float:
706 |         """Calculate quality of signal timing"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:704:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
703 |     def _calculate_signal_timing_quality(
704 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                             ^^^^ UP006
705 |     ) -> float:
706 |         """Calculate quality of signal timing"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:704:54: UP006 [*] Use `list` instead of `List` for type annotation
    |
703 |     def _calculate_signal_timing_quality(
704 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                      ^^^^ UP006
705 |     ) -> float:
706 |         """Calculate quality of signal timing"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:704:59: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
703 |     def _calculate_signal_timing_quality(
704 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                           ^^^^ UP006
705 |     ) -> float:
706 |         """Calculate quality of signal timing"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:711:24: UP006 [*] Use `list` instead of `List` for type annotation
    |
710 |     def _estimate_signal_contribution(
711 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                        ^^^^ UP006
712 |     ) -> float:
713 |         """Estimate signal generator's contribution to total returns"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:711:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
710 |     def _estimate_signal_contribution(
711 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                             ^^^^ UP006
712 |     ) -> float:
713 |         """Estimate signal generator's contribution to total returns"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:711:54: UP006 [*] Use `list` instead of `List` for type annotation
    |
710 |     def _estimate_signal_contribution(
711 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                      ^^^^ UP006
712 |     ) -> float:
713 |         """Estimate signal generator's contribution to total returns"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:711:59: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
710 |     def _estimate_signal_contribution(
711 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                           ^^^^ UP006
712 |     ) -> float:
713 |         """Estimate signal generator's contribution to total returns"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:722:23: UP006 [*] Use `list` instead of `List` for type annotation
    |
721 |     def _estimate_risk_manager_contribution(
722 |         self, trades: List[Dict[str, Any]], baseline_results: Dict[str, Any]
    |                       ^^^^ UP006
723 |     ) -> float:
724 |         """Estimate risk manager's contribution to performance"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:722:28: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
721 |     def _estimate_risk_manager_contribution(
722 |         self, trades: List[Dict[str, Any]], baseline_results: Dict[str, Any]
    |                            ^^^^ UP006
723 |     ) -> float:
724 |         """Estimate risk manager's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:722:63: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
721 |     def _estimate_risk_manager_contribution(
722 |         self, trades: List[Dict[str, Any]], baseline_results: Dict[str, Any]
    |                                                               ^^^^ UP006
723 |     ) -> float:
724 |         """Estimate risk manager's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:740:25: UP006 [*] Use `list` instead of `List` for type annotation
    |
738 |     def _estimate_sizing_contribution(
739 |         self,
740 |         position_sizes: List[Dict[str, Any]],
    |                         ^^^^ UP006
741 |         trades: List[Dict[str, Any]],
742 |         baseline_results: Dict[str, Any],
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:740:30: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
738 |     def _estimate_sizing_contribution(
739 |         self,
740 |         position_sizes: List[Dict[str, Any]],
    |                              ^^^^ UP006
741 |         trades: List[Dict[str, Any]],
742 |         baseline_results: Dict[str, Any],
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:741:17: UP006 [*] Use `list` instead of `List` for type annotation
    |
739 |         self,
740 |         position_sizes: List[Dict[str, Any]],
741 |         trades: List[Dict[str, Any]],
    |                 ^^^^ UP006
742 |         baseline_results: Dict[str, Any],
743 |     ) -> float:
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:741:22: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
739 |         self,
740 |         position_sizes: List[Dict[str, Any]],
741 |         trades: List[Dict[str, Any]],
    |                      ^^^^ UP006
742 |         baseline_results: Dict[str, Any],
743 |     ) -> float:
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:742:27: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
740 |         position_sizes: List[Dict[str, Any]],
741 |         trades: List[Dict[str, Any]],
742 |         baseline_results: Dict[str, Any],
    |                           ^^^^ UP006
743 |     ) -> float:
744 |         """Estimate position sizer's contribution to performance"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:770:31: UP006 [*] Use `list` instead of `List` for type annotation
    |
769 |     def _calculate_sizing_optimality(
770 |         self, position_sizes: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                               ^^^^ UP006
771 |     ) -> float:
772 |         """Calculate how optimal the position sizing was"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:770:36: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
769 |     def _calculate_sizing_optimality(
770 |         self, position_sizes: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                    ^^^^ UP006
771 |     ) -> float:
772 |         """Calculate how optimal the position sizing was"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:770:61: UP006 [*] Use `list` instead of `List` for type annotation
    |
769 |     def _calculate_sizing_optimality(
770 |         self, position_sizes: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                             ^^^^ UP006
771 |     ) -> float:
772 |         """Calculate how optimal the position sizing was"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:770:66: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
769 |     def _calculate_sizing_optimality(
770 |         self, position_sizes: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                                  ^^^^ UP006
771 |     ) -> float:
772 |         """Calculate how optimal the position sizing was"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:793:24: UP006 [*] Use `list` instead of `List` for type annotation
    |
792 |     def _calculate_regime_attribution(
793 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                        ^^^^ UP006
794 |     ) -> Dict[str, float]:
795 |         """Calculate performance attribution by regime"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:793:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
792 |     def _calculate_regime_attribution(
793 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                             ^^^^ UP006
794 |     ) -> Dict[str, float]:
795 |         """Calculate performance attribution by regime"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:793:54: UP006 [*] Use `list` instead of `List` for type annotation
    |
792 |     def _calculate_regime_attribution(
793 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                      ^^^^ UP006
794 |     ) -> Dict[str, float]:
795 |         """Calculate performance attribution by regime"""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:793:59: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
792 |     def _calculate_regime_attribution(
793 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
    |                                                           ^^^^ UP006
794 |     ) -> Dict[str, float]:
795 |         """Calculate performance attribution by regime"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:794:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
792 |     def _calculate_regime_attribution(
793 |         self, signals: List[Dict[str, Any]], trades: List[Dict[str, Any]]
794 |     ) -> Dict[str, float]:
    |          ^^^^ UP006
795 |         """Calculate performance attribution by regime"""
796 |         # Placeholder implementation
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:801:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
799 |     def _generate_signal_recommendations(
800 |         self, accuracy: float, avg_confidence: float, avg_strength: float
801 |     ) -> List[str]:
    |          ^^^^ UP006
802 |         """Generate recommendations for signal generator improvement"""
803 |         recommendations = []
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:823:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
821 |     def _generate_risk_recommendations(
822 |         self, drawdown_control: float, avg_position_size: float, volatility: float
823 |     ) -> List[str]:
    |          ^^^^ UP006
824 |         """Generate recommendations for risk manager improvement"""
825 |         recommendations = []
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:843:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
841 |     def _generate_sizing_recommendations(
842 |         self, optimality: float, avg_size: float, consistency: float
843 |     ) -> List[str]:
    |          ^^^^ UP006
844 |         """Generate recommendations for position sizer improvement"""
845 |         recommendations = []
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:871:22: UP007 [*] Use `X | Y` for type annotations
    |
869 |     def _calculate_component_correlations(
870 |         self,
871 |         signal_attr: Optional[ComponentAttribution],
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
872 |         risk_attr: Optional[ComponentAttribution],
873 |         sizing_attr: Optional[ComponentAttribution],
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:872:20: UP007 [*] Use `X | Y` for type annotations
    |
870 |         self,
871 |         signal_attr: Optional[ComponentAttribution],
872 |         risk_attr: Optional[ComponentAttribution],
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
873 |         sizing_attr: Optional[ComponentAttribution],
874 |     ) -> Dict[str, Dict[str, float]]:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:873:22: UP007 [*] Use `X | Y` for type annotations
    |
871 |         signal_attr: Optional[ComponentAttribution],
872 |         risk_attr: Optional[ComponentAttribution],
873 |         sizing_attr: Optional[ComponentAttribution],
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
874 |     ) -> Dict[str, Dict[str, float]]:
875 |         """Calculate correlations between component contributions"""
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:874:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
872 |         risk_attr: Optional[ComponentAttribution],
873 |         sizing_attr: Optional[ComponentAttribution],
874 |     ) -> Dict[str, Dict[str, float]]:
    |          ^^^^ UP006
875 |         """Calculate correlations between component contributions"""
876 |         correlations = {}
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:874:20: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
872 |         risk_attr: Optional[ComponentAttribution],
873 |         sizing_attr: Optional[ComponentAttribution],
874 |     ) -> Dict[str, Dict[str, float]]:
    |                    ^^^^ UP006
875 |         """Calculate correlations between component contributions"""
876 |         correlations = {}
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:891:53: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
890 |     def _calculate_interaction_effects(
891 |         self, strategy: Strategy, baseline_results: Dict[str, Any]
    |                                                     ^^^^ UP006
892 |     ) -> Dict[str, float]:
893 |         """Calculate interaction effects between components"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:892:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
890 |     def _calculate_interaction_effects(
891 |         self, strategy: Strategy, baseline_results: Dict[str, Any]
892 |     ) -> Dict[str, float]:
    |          ^^^^ UP006
893 |         """Calculate interaction effects between components"""
894 |         # Placeholder implementation - would need component isolation testing
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:904:22: UP007 [*] Use `X | Y` for type annotations
    |
902 |     def _generate_optimization_priorities(
903 |         self,
904 |         signal_attr: Optional[ComponentAttribution],
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
905 |         risk_attr: Optional[ComponentAttribution],
906 |         sizing_attr: Optional[ComponentAttribution],
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:905:20: UP007 [*] Use `X | Y` for type annotations
    |
903 |         self,
904 |         signal_attr: Optional[ComponentAttribution],
905 |         risk_attr: Optional[ComponentAttribution],
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
906 |         sizing_attr: Optional[ComponentAttribution],
907 |     ) -> List[str]:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:906:22: UP007 [*] Use `X | Y` for type annotations
    |
904 |         signal_attr: Optional[ComponentAttribution],
905 |         risk_attr: Optional[ComponentAttribution],
906 |         sizing_attr: Optional[ComponentAttribution],
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
907 |     ) -> List[str]:
908 |         """Generate optimization priorities based on attribution analysis"""
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:907:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
905 |         risk_attr: Optional[ComponentAttribution],
906 |         sizing_attr: Optional[ComponentAttribution],
907 |     ) -> List[str]:
    |          ^^^^ UP006
908 |         """Generate optimization priorities based on attribution analysis"""
909 |         priorities = []
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_attribution.py:930:53: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
929 |     def _calculate_replacement_impact(
930 |         self, strategy: Strategy, baseline_results: Dict[str, Any]
    |                                                     ^^^^ UP006
931 |     ) -> Dict[str, float]:
932 |         """Calculate impact of replacing each component"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:931:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
929 |     def _calculate_replacement_impact(
930 |         self, strategy: Strategy, baseline_results: Dict[str, Any]
931 |     ) -> Dict[str, float]:
    |          ^^^^ UP006
932 |         """Calculate impact of replacing each component"""
933 |         # Placeholder implementation - would need actual component replacement testing
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:952:32: UP007 [*] Use `X | Y` for type annotations
    |
950 |         strategy: Strategy,
951 |         component_type: str,
952 |         replacement_component: Union[SignalGenerator, RiskManager, PositionSizer],
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
953 |         initial_balance: float = 10000.0,
954 |     ) -> Dict[str, Any]:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_attribution.py:954:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
952 |         replacement_component: Union[SignalGenerator, RiskManager, PositionSizer],
953 |         initial_balance: float = 10000.0,
954 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
955 |         """
956 |         Analyze the impact of replacing a specific component
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_attribution.py:1026:32: UP007 [*] Use `X | Y` for type annotations
     |
1024 |         original_strategy: Strategy,
1025 |         component_type: str,
1026 |         replacement_component: Union[SignalGenerator, RiskManager, PositionSizer],
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
1027 |     ) -> Strategy:
1028 |         """Create a modified strategy with replaced component"""
     |
     = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / from __future__ import annotations
 9 | | 
10 | | import logging
11 | | from dataclasses import dataclass, field
12 | | from datetime import datetime
13 | | from pathlib import Path
14 | | from typing import Any, Dict, List, Optional, Tuple, Union, Protocol
15 | | 
16 | | import pandas as pd
17 | | 
18 | | from src.strategies.components import Strategy
19 | | 
20 | | # Note: Using a simplified interface for backtesting
   | |_^ I001
21 |   # In production, this would integrate with the actual Backtester class
   |
   = help: Organize imports

src/strategies/components/testing/performance_comparison_engine.py:14:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
12 | from datetime import datetime
13 | from pathlib import Path
14 | from typing import Any, Dict, List, Optional, Tuple, Union, Protocol
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | import pandas as pd
   |

src/strategies/components/testing/performance_comparison_engine.py:14:1: UP035 `typing.List` is deprecated, use `list` instead
   |
12 | from datetime import datetime
13 | from pathlib import Path
14 | from typing import Any, Dict, List, Optional, Tuple, Union, Protocol
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | import pandas as pd
   |

src/strategies/components/testing/performance_comparison_engine.py:14:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
12 | from datetime import datetime
13 | from pathlib import Path
14 | from typing import Any, Dict, List, Optional, Tuple, Union, Protocol
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | import pandas as pd
   |

src/strategies/components/testing/performance_comparison_engine.py:14:54: F401 [*] `typing.Union` imported but unused
   |
12 | from datetime import datetime
13 | from pathlib import Path
14 | from typing import Any, Dict, List, Optional, Tuple, Union, Protocol
   |                                                      ^^^^^ F401
15 | 
16 | import pandas as pd
   |
   = help: Remove unused import: `typing.Union`

src/strategies/components/testing/performance_comparison_engine.py:76:23: UP007 [*] Use `X | Y` for type annotations
   |
74 |     generate_detailed_report: bool = True
75 |     export_results: bool = True
76 |     export_directory: Optional[str] = None
   |                       ^^^^^^^^^^^^^ UP007
77 | 
78 |     # Validation requirements
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:98:24: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
 97 |     # Statistical test results
 98 |     statistical_tests: Dict[str, List[StatisticalTestResult]]
    |                        ^^^^ UP006
 99 | 
100 |     # Equivalence test results
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_comparison_engine.py:98:34: UP006 [*] Use `list` instead of `List` for type annotation
    |
 97 |     # Statistical test results
 98 |     statistical_tests: Dict[str, List[StatisticalTestResult]]
    |                                  ^^^^ UP006
 99 | 
100 |     # Equivalence test results
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_comparison_engine.py:101:24: UP006 [*] Use `list` instead of `List` for type annotation
    |
100 |     # Equivalence test results
101 |     equivalence_tests: List[StatisticalTestResult]
    |                        ^^^^ UP006
102 | 
103 |     # Overall assessment
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_comparison_engine.py:106:22: UP006 [*] Use `list` instead of `List` for type annotation
    |
104 |     overall_validation_result: ValidationResult
105 |     certification_status: str
106 |     recommendations: List[str] = field(default_factory=list)
    |                      ^^^^ UP006
107 | 
108 |     # Raw data for further analysis
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_comparison_engine.py:109:30: UP007 [*] Use `X | Y` for type annotations
    |
108 |     # Raw data for further analysis
109 |     legacy_backtest_results: Optional[pd.DataFrame] = None
    |                              ^^^^^^^^^^^^^^^^^^^^^^ UP007
110 |     new_backtest_results: Optional[pd.DataFrame] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:110:27: UP007 [*] Use `X | Y` for type annotations
    |
108 |     # Raw data for further analysis
109 |     legacy_backtest_results: Optional[pd.DataFrame] = None
110 |     new_backtest_results: Optional[pd.DataFrame] = None
    |                           ^^^^^^^^^^^^^^^^^^^^^^ UP007
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:127:17: UP007 [*] Use `X | Y` for type annotations
    |
125 |     def __init__(
126 |         self,
127 |         config: Optional[ComparisonConfig] = None,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
128 |         backtest_engine: Optional[BacktestEngineProtocol] = None,
129 |     ):
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:128:26: UP007 [*] Use `X | Y` for type annotations
    |
126 |         self,
127 |         config: Optional[ComparisonConfig] = None,
128 |         backtest_engine: Optional[BacktestEngineProtocol] = None,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
129 |     ):
130 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:154:24: UP007 [*] Use `X | Y` for type annotations
    |
152 |         new_strategy: Strategy,
153 |         market_data: pd.DataFrame,
154 |         comparison_id: Optional[str] = None,
    |                        ^^^^^^^^^^^^^ UP007
155 |     ) -> StrategyComparisonResult:
156 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:296:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
294 |     def _perform_statistical_analysis(
295 |         self, legacy_results: pd.DataFrame, new_results: pd.DataFrame
296 |     ) -> Dict[str, List[StatisticalTestResult]]:
    |          ^^^^ UP006
297 |         """Perform comprehensive statistical analysis."""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_comparison_engine.py:296:20: UP006 [*] Use `list` instead of `List` for type annotation
    |
294 |     def _perform_statistical_analysis(
295 |         self, legacy_results: pd.DataFrame, new_results: pd.DataFrame
296 |     ) -> Dict[str, List[StatisticalTestResult]]:
    |                    ^^^^ UP006
297 |         """Perform comprehensive statistical analysis."""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_comparison_engine.py:310:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
308 |     def _perform_equivalence_tests(
309 |         self, legacy_results: pd.DataFrame, new_results: pd.DataFrame
310 |     ) -> List[StatisticalTestResult]:
    |          ^^^^ UP006
311 |         """Perform equivalence tests."""
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_comparison_engine.py:528:23: UP007 [*] Use `X | Y` for type annotations
    |
526 |     new_strategy: Strategy,
527 |     market_data: pd.DataFrame,
528 |     tolerance_config: Optional[ToleranceConfig] = None,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
529 | ) -> StrategyComparisonResult:
530 |     """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_comparison_engine.py:555:6: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
553 |     market_data: pd.DataFrame,
554 |     strict_validation: bool = True,
555 | ) -> Tuple[bool, List[str]]:
    |      ^^^^^ UP006
556 |     """
557 |     Validate if a strategy migration is ready for production.
    |
    = help: Replace with `tuple`

src/strategies/components/testing/performance_comparison_engine.py:555:18: UP006 [*] Use `list` instead of `List` for type annotation
    |
553 |     market_data: pd.DataFrame,
554 |     strict_validation: bool = True,
555 | ) -> Tuple[bool, List[str]]:
    |                  ^^^^ UP006
556 |     """
557 |     Validate if a strategy migration is ready for production.
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_parity_validator.py:15:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | import numpy as np
   |

src/strategies/components/testing/performance_parity_validator.py:15:1: UP035 `typing.List` is deprecated, use `list` instead
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | import numpy as np
   |

src/strategies/components/testing/performance_parity_validator.py:15:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | import numpy as np
   |

src/strategies/components/testing/performance_parity_validator.py:15:54: F401 [*] `typing.Union` imported but unused
   |
13 | from datetime import datetime
14 | from enum import Enum
15 | from typing import Any, Dict, List, Optional, Tuple, Union
   |                                                      ^^^^^ F401
16 | 
17 | import numpy as np
   |
   = help: Remove unused import: `typing.Union`

src/strategies/components/testing/performance_parity_validator.py:90:14: UP007 [*] Use `X | Y` for type annotations
   |
88 |     tolerance: float
89 |     result: ValidationResult
90 |     p_value: Optional[float] = None
   |              ^^^^^^^^^^^^^^^ UP007
91 |     confidence_interval: Optional[Tuple[float, float]] = None
92 |     notes: str = ""
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:91:26: UP007 [*] Use `X | Y` for type annotations
   |
89 |     result: ValidationResult
90 |     p_value: Optional[float] = None
91 |     confidence_interval: Optional[Tuple[float, float]] = None
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
92 |     notes: str = ""
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:91:35: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
   |
89 |     result: ValidationResult
90 |     p_value: Optional[float] = None
91 |     confidence_interval: Optional[Tuple[float, float]] = None
   |                                   ^^^^^ UP006
92 |     notes: str = ""
   |
   = help: Replace with `tuple`

src/strategies/components/testing/performance_parity_validator.py:108:25: UP006 [*] Use `list` instead of `List` for type annotation
    |
107 |     # Individual metric comparisons
108 |     metric_comparisons: List[MetricComparison] = field(default_factory=list)
    |                         ^^^^ UP006
109 | 
110 |     # Statistical tests
    |
    = help: Replace with `list`

src/strategies/components/testing/performance_parity_validator.py:112:30: UP007 [*] Use `X | Y` for type annotations
    |
110 |     # Statistical tests
111 |     equity_curve_correlation: float = 0.0
112 |     kolmogorov_smirnov_test: Optional[Tuple[float, float]] = None
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
113 |     mann_whitney_test: Optional[Tuple[float, float]] = None
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:112:39: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
110 |     # Statistical tests
111 |     equity_curve_correlation: float = 0.0
112 |     kolmogorov_smirnov_test: Optional[Tuple[float, float]] = None
    |                                       ^^^^^ UP006
113 |     mann_whitney_test: Optional[Tuple[float, float]] = None
    |
    = help: Replace with `tuple`

src/strategies/components/testing/performance_parity_validator.py:113:24: UP007 [*] Use `X | Y` for type annotations
    |
111 |     equity_curve_correlation: float = 0.0
112 |     kolmogorov_smirnov_test: Optional[Tuple[float, float]] = None
113 |     mann_whitney_test: Optional[Tuple[float, float]] = None
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
114 | 
115 |     # Trade-level analysis
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:113:33: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
111 |     equity_curve_correlation: float = 0.0
112 |     kolmogorov_smirnov_test: Optional[Tuple[float, float]] = None
113 |     mann_whitney_test: Optional[Tuple[float, float]] = None
    |                                 ^^^^^ UP006
114 | 
115 |     # Trade-level analysis
    |
    = help: Replace with `tuple`

src/strategies/components/testing/performance_parity_validator.py:128:30: UP007 [*] Use `X | Y` for type annotations
    |
126 |     # Certification
127 |     certified: bool = False
128 |     certification_timestamp: Optional[datetime] = None
    |                              ^^^^^^^^^^^^^^^^^^ UP007
129 |     certification_notes: str = ""
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:132:24: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
131 |     # Detailed analysis
132 |     detailed_analysis: Dict[str, Any] = field(default_factory=dict)
    |                        ^^^^ UP006
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_parity_validator.py:144:42: UP007 [*] Use `X | Y` for type annotations
    |
142 |     """
143 | 
144 |     def __init__(self, tolerance_config: Optional[ToleranceConfig] = None):
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
145 |         """
146 |         Initialize the performance parity validator.
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/performance_parity_validator.py:635:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
633 |     def _calculate_temporal_overlap(
634 |         self, legacy_results: pd.DataFrame, new_results: pd.DataFrame
635 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
636 |         """Calculate temporal overlap statistics."""
    |
    = help: Replace with `dict`

src/strategies/components/testing/performance_parity_validator.py:662:13: F541 [*] f-string without any placeholders
    |
660 |         lines = [
661 |             "=" * 80,
662 |             f"PERFORMANCE PARITY VALIDATION REPORT",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F541
663 |             "=" * 80,
664 |             f"Strategy: {report.strategy_name}",
    |
    = help: Remove extraneous `f` prefix

src/strategies/components/testing/regime_tester.py:11:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
 9 | import time
10 | from dataclasses import dataclass
11 | from typing import Any, Dict, List, Optional, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import numpy as np
   |

src/strategies/components/testing/regime_tester.py:11:1: UP035 `typing.List` is deprecated, use `list` instead
   |
 9 | import time
10 | from dataclasses import dataclass
11 | from typing import Any, Dict, List, Optional, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
12 | 
13 | import numpy as np
   |

src/strategies/components/testing/regime_tester.py:65:32: UP007 [*] Use `X | Y` for type annotations
   |
64 |     # Component performance (if available)
65 |     signal_accuracy_in_regime: Optional[float] = None
   |                                ^^^^^^^^^^^^^^^ UP007
66 |     risk_control_effectiveness: Optional[float] = None
67 |     position_sizing_optimality: Optional[float] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:66:33: UP007 [*] Use `X | Y` for type annotations
   |
64 |     # Component performance (if available)
65 |     signal_accuracy_in_regime: Optional[float] = None
66 |     risk_control_effectiveness: Optional[float] = None
   |                                 ^^^^^^^^^^^^^^^ UP007
67 |     position_sizing_optimality: Optional[float] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:67:33: UP007 [*] Use `X | Y` for type annotations
   |
65 |     signal_accuracy_in_regime: Optional[float] = None
66 |     risk_control_effectiveness: Optional[float] = None
67 |     position_sizing_optimality: Optional[float] = None
   |                                 ^^^^^^^^^^^^^^^ UP007
68 | 
69 |     # Regime transition analysis
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:70:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
69 |     # Regime transition analysis
70 |     transition_performance: Dict[str, float] = None  # Performance during regime changes
   |                             ^^^^ UP006
71 | 
72 |     # Error tracking
   |
   = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:81:21: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
79 |     """Results from comparing performance across multiple regimes"""
80 | 
81 |     regime_results: Dict[str, RegimeTestResults]
   |                     ^^^^ UP006
82 | 
83 |     # Cross-regime analysis
   |
   = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:106:65: UP007 [*] Use `X | Y` for type annotations
    |
105 |     def __init__(
106 |         self, test_data: pd.DataFrame, regime_detection_params: Optional[Dict[str, Any]] = None
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
107 |     ):
108 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:106:74: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
105 |     def __init__(
106 |         self, test_data: pd.DataFrame, regime_detection_params: Optional[Dict[str, Any]] = None
    |                                                                          ^^^^ UP006
107 |     ):
108 |         """
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:236:17: B007 Loop control variable `idx` not used within loop body
    |
234 |         current_duration = 0
235 | 
236 |         for i, (idx, row) in enumerate(regime_data.iterrows()):
    |                 ^^^ B007
237 |             regime_key = f"{row['trend']}_{row['volatility']}"
    |
    = help: Rename unused `idx` to `_idx`

src/strategies/components/testing/regime_tester.py:263:42: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
261 |         return overall_strength.fillna(0.5)
262 | 
263 |     def _create_regime_datasets(self) -> Dict[str, pd.DataFrame]:
    |                                          ^^^^ UP006
264 |         """Create filtered datasets for each regime type"""
265 |         regime_datasets = {}
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:314:9: F841 Local variable `positions` is assigned to but never used
    |
312 |         # Initialize tracking variables
313 |         balance = initial_balance
314 |         positions = []
    |         ^^^^^^^^^ F841
315 |         trades = []
316 |         portfolio_values = [balance]
    |
    = help: Remove assignment to unused variable `positions`

src/strategies/components/testing/regime_tester.py:351:17: F841 Local variable `regime_context` is assigned to but never used
    |
349 |                 )
350 | 
351 |                 regime_context = RegimeContext(
    |                 ^^^^^^^^^^^^^^ F841
352 |                     trend=trend,
353 |                     volatility=volatility,
    |
    = help: Remove assignment to unused variable `regime_context`

src/strategies/components/testing/regime_tester.py:456:10: UP007 [*] Use `X | Y` for type annotations
    |
454 |     def _execute_trade(
455 |         self, decision, entry_data: pd.Series, exit_data: pd.Series, balance: float
456 |     ) -> Optional[Dict[str, Any]]:
    |          ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
457 |         """Execute a trade based on strategy decision"""
458 |         try:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:456:19: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
454 |     def _execute_trade(
455 |         self, decision, entry_data: pd.Series, exit_data: pd.Series, balance: float
456 |     ) -> Optional[Dict[str, Any]]:
    |                   ^^^^ UP006
457 |         """Execute a trade based on strategy decision"""
458 |         try:
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:520:23: UP006 [*] Use `list` instead of `List` for type annotation
    |
519 |     def _calculate_regime_entry_accuracy(
520 |         self, trades: List[Dict[str, Any]], regime_data: pd.DataFrame
    |                       ^^^^ UP006
521 |     ) -> float:
522 |         """Calculate how well strategy performs when entering regime"""
    |
    = help: Replace with `list`

src/strategies/components/testing/regime_tester.py:520:28: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
519 |     def _calculate_regime_entry_accuracy(
520 |         self, trades: List[Dict[str, Any]], regime_data: pd.DataFrame
    |                            ^^^^ UP006
521 |     ) -> float:
522 |         """Calculate how well strategy performs when entering regime"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:535:45: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
533 |         return successful_entries / len(early_regime_trades)
534 | 
535 |     def _is_early_regime_trade(self, trade: Dict[str, Any], regime_data: pd.DataFrame) -> bool:
    |                                             ^^^^ UP006
536 |         """Check if trade occurred early in a regime period"""
537 |         try:
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:542:9: E722 Do not use bare `except`
    |
540 |                 duration = regime_data.loc[trade_time, "regime_duration"]
541 |                 return duration <= 5  # Consider first 5 periods as "early"
542 |         except:
    |         ^^^^^^ E722
543 |             pass
544 |         return False
    |

src/strategies/components/testing/regime_tester.py:547:23: UP006 [*] Use `list` instead of `List` for type annotation
    |
546 |     def _calculate_regime_exit_timing(
547 |         self, trades: List[Dict[str, Any]], regime_data: pd.DataFrame
    |                       ^^^^ UP006
548 |     ) -> float:
549 |         """Calculate how well strategy handles regime transitions"""
    |
    = help: Replace with `list`

src/strategies/components/testing/regime_tester.py:547:28: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
546 |     def _calculate_regime_exit_timing(
547 |         self, trades: List[Dict[str, Any]], regime_data: pd.DataFrame
    |                            ^^^^ UP006
548 |     ) -> float:
549 |         """Calculate how well strategy handles regime transitions"""
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:564:43: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
562 |         return successful_transitions / len(transition_trades)
563 | 
564 |     def _is_transition_trade(self, trade: Dict[str, Any], regime_data: pd.DataFrame) -> bool:
    |                                           ^^^^ UP006
565 |         """Check if trade occurred during regime transition"""
566 |         try:
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:571:9: E722 Do not use bare `except`
    |
569 |                 confidence = regime_data.loc[trade_time, "regime_confidence"]
570 |                 return confidence < 0.5  # Low confidence indicates transition
571 |         except:
    |         ^^^^^^ E722
572 |             pass
573 |         return False
    |

src/strategies/components/testing/regime_tester.py:609:23: UP007 [*] Use `X | Y` for type annotations
    |
607 |         self,
608 |         strategy: Strategy,
609 |         regime_types: Optional[List[str]] = None,
    |                       ^^^^^^^^^^^^^^^^^^^ UP007
610 |         initial_balance: float = 10000.0,
611 |     ) -> RegimeComparisonResults:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:609:32: UP006 [*] Use `list` instead of `List` for type annotation
    |
607 |         self,
608 |         strategy: Strategy,
609 |         regime_types: Optional[List[str]] = None,
    |                                ^^^^ UP006
610 |         initial_balance: float = 10000.0,
611 |     ) -> RegimeComparisonResults:
    |
    = help: Replace with `list`

src/strategies/components/testing/regime_tester.py:689:26: UP007 [*] Use `X | Y` for type annotations
    |
688 |     def test_component_in_regime(
689 |         self, component: Union[SignalGenerator, RiskManager, PositionSizer], regime_type: str
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
690 |     ) -> Dict[str, Any]:
691 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/regime_tester.py:690:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
688 |     def test_component_in_regime(
689 |         self, component: Union[SignalGenerator, RiskManager, PositionSizer], regime_type: str
690 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
691 |         """
692 |         Test individual component performance in specific regime
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:717:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
715 |     def _test_signal_generator_in_regime(
716 |         self, generator: SignalGenerator, regime_data: pd.DataFrame, regime_type: str
717 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
718 |         """Test signal generator in specific regime"""
719 |         signals = []
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:805:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
803 |     def _test_risk_manager_in_regime(
804 |         self, risk_manager: RiskManager, regime_data: pd.DataFrame, regime_type: str
805 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
806 |         """Test risk manager in specific regime"""
807 |         # Placeholder implementation - would need more sophisticated testing
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:817:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
815 |     def _test_position_sizer_in_regime(
816 |         self, position_sizer: PositionSizer, regime_data: pd.DataFrame, regime_type: str
817 |     ) -> Dict[str, Any]:
    |          ^^^^ UP006
818 |         """Test position sizer in specific regime"""
819 |         # Placeholder implementation - would need more sophisticated testing
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:827:40: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
825 |         }
826 | 
827 |     def get_regime_statistics(self) -> Dict[str, Any]:
    |                                        ^^^^ UP006
828 |         """Get statistics about regimes in the test data"""
829 |         regime_stats = {}
    |
    = help: Replace with `dict`

src/strategies/components/testing/regime_tester.py:846:52: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
844 |         return regime_stats
845 | 
846 |     def create_regime_transition_analysis(self) -> Dict[str, Any]:
    |                                                    ^^^^ UP006
847 |         """Analyze regime transitions in the data"""
848 |         transitions = []
    |
    = help: Replace with `dict`

src/strategies/components/testing/statistical_tests.py:12:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
10 | import logging
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | 
14 | import numpy as np
   |

src/strategies/components/testing/statistical_tests.py:12:1: UP035 `typing.List` is deprecated, use `list` instead
   |
10 | import logging
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | 
14 | import numpy as np
   |

src/strategies/components/testing/statistical_tests.py:12:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
10 | import logging
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Tuple, Union
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | 
14 | import numpy as np
   |

src/strategies/components/testing/statistical_tests.py:12:42: F401 [*] `typing.Tuple` imported but unused
   |
10 | import logging
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Tuple, Union
   |                                          ^^^^^ F401
13 | 
14 | import numpy as np
   |
   = help: Remove unused import

src/strategies/components/testing/statistical_tests.py:12:49: F401 [*] `typing.Union` imported but unused
   |
10 | import logging
11 | from dataclasses import dataclass
12 | from typing import Dict, List, Optional, Tuple, Union
   |                                                 ^^^^^ F401
13 | 
14 | import numpy as np
   |
   = help: Remove unused import

src/strategies/components/testing/statistical_tests.py:29:21: UP007 [*] Use `X | Y` for type annotations
   |
27 |     statistic: float
28 |     p_value: float
29 |     critical_value: Optional[float] = None
   |                     ^^^^^^^^^^^^^^^ UP007
30 |     confidence_level: float = 0.95
31 |     reject_null: bool = False
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/statistical_tests.py:54:10: UP006 [*] Use `list` instead of `List` for type annotation
   |
52 |     def test_return_distribution_equality(
53 |         self, returns1: pd.Series, returns2: pd.Series
54 |     ) -> List[StatisticalTestResult]:
   |          ^^^^ UP006
55 |         """
56 |         Test if two return series have the same distribution.
   |
   = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:120:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
118 |     def test_mean_equality(
119 |         self, returns1: pd.Series, returns2: pd.Series
120 |     ) -> List[StatisticalTestResult]:
    |          ^^^^ UP006
121 |         """
122 |         Test if two return series have equal means.
    |
    = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:186:10: UP006 [*] Use `list` instead of `List` for type annotation
    |
184 |     def test_variance_equality(
185 |         self, returns1: pd.Series, returns2: pd.Series
186 |     ) -> List[StatisticalTestResult]:
    |          ^^^^ UP006
187 |         """
188 |         Test if two return series have equal variances.
    |
    = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:248:53: UP006 [*] Use `list` instead of `List` for type annotation
    |
246 |         return results
247 | 
248 |     def test_normality(self, returns: pd.Series) -> List[StatisticalTestResult]:
    |                                                     ^^^^ UP006
249 |         """
250 |         Test if return series follows normal distribution.
    |
    = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:390:55: UP006 [*] Use `list` instead of `List` for type annotation
    |
388 |             )
389 | 
390 |     def test_stationarity(self, series: pd.Series) -> List[StatisticalTestResult]:
    |                                                       ^^^^ UP006
391 |         """
392 |         Test for stationarity in time series.
    |
    = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:460:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
458 |         series1_name: str = "Series 1",
459 |         series2_name: str = "Series 2",
460 |     ) -> Dict[str, List[StatisticalTestResult]]:
    |          ^^^^ UP006
461 |         """
462 |         Perform comprehensive statistical comparison of two return series.
    |
    = help: Replace with `dict`

src/strategies/components/testing/statistical_tests.py:460:20: UP006 [*] Use `list` instead of `List` for type annotation
    |
458 |         series1_name: str = "Series 1",
459 |         series2_name: str = "Series 2",
460 |     ) -> Dict[str, List[StatisticalTestResult]]:
    |                    ^^^^ UP006
461 |         """
462 |         Perform comprehensive statistical comparison of two return series.
    |
    = help: Replace with `list`

src/strategies/components/testing/statistical_tests.py:511:77: UP007 [*] Use `X | Y` for type annotations
    |
510 |     def two_one_sided_test(
511 |         self, returns1: pd.Series, returns2: pd.Series, equivalence_margin: Optional[float] = None
    |                                                                             ^^^^^^^^^^^^^^^ UP007
512 |     ) -> StatisticalTestResult:
513 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/statistical_tests.py:587:34: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
587 | def format_test_results(results: Dict[str, List[StatisticalTestResult]]) -> str:
    |                                  ^^^^ UP006
588 |     """
589 |     Format statistical test results into a readable report.
    |
    = help: Replace with `dict`

src/strategies/components/testing/statistical_tests.py:587:44: UP006 [*] Use `list` instead of `List` for type annotation
    |
587 | def format_test_results(results: Dict[str, List[StatisticalTestResult]]) -> str:
    |                                            ^^^^ UP006
588 |     """
589 |     Format statistical test results into a readable report.
    |
    = help: Replace with `list`

src/strategies/components/testing/test_datasets.py:13:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
11 | from datetime import datetime, timedelta
12 | from pathlib import Path
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
14 | 
15 | import numpy as np
   |

src/strategies/components/testing/test_datasets.py:13:1: UP035 `typing.List` is deprecated, use `list` instead
   |
11 | from datetime import datetime, timedelta
12 | from pathlib import Path
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
14 | 
15 | import numpy as np
   |

src/strategies/components/testing/test_datasets.py:13:1: UP035 `typing.Tuple` is deprecated, use `tuple` instead
   |
11 | from datetime import datetime, timedelta
12 | from pathlib import Path
13 | from typing import Any, Dict, List, Optional, Tuple
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
14 | 
15 | import numpy as np
   |

src/strategies/components/testing/test_datasets.py:37:18: UP007 [*] Use `X | Y` for type annotations
   |
35 |     # Price movement parameters
36 |     initial_price: float
37 |     final_price: Optional[float] = None
   |                  ^^^^^^^^^^^^^^^ UP007
38 |     max_drawdown: Optional[float] = None
39 |     max_runup: Optional[float] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:38:19: UP007 [*] Use `X | Y` for type annotations
   |
36 |     initial_price: float
37 |     final_price: Optional[float] = None
38 |     max_drawdown: Optional[float] = None
   |                   ^^^^^^^^^^^^^^^ UP007
39 |     max_runup: Optional[float] = None
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:39:16: UP007 [*] Use `X | Y` for type annotations
   |
37 |     final_price: Optional[float] = None
38 |     max_drawdown: Optional[float] = None
39 |     max_runup: Optional[float] = None
   |                ^^^^^^^^^^^^^^^ UP007
40 | 
41 |     # Market regime labels
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:42:20: UP007 [*] Use `X | Y` for type annotations
   |
41 |     # Market regime labels
42 |     regime_labels: Optional[Dict[str, Any]] = None
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
43 | 
44 |     # Special characteristics
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:42:29: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
41 |     # Market regime labels
42 |     regime_labels: Optional[Dict[str, Any]] = None
   |                             ^^^^ UP006
43 | 
44 |     # Special characteristics
   |
   = help: Replace with `dict`

src/strategies/components/testing/test_datasets.py:61:19: UP007 [*] Use `X | Y` for type annotations
   |
59 |     def __init__(
60 |         self,
61 |         data_dir: Optional[str] = None,
   |                   ^^^^^^^^^^^^^ UP007
62 |         cache_dir: Optional[str] = None,
63 |         max_cache_size_mb: int = 500,
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:62:20: UP007 [*] Use `X | Y` for type annotations
   |
60 |         self,
61 |         data_dir: Optional[str] = None,
62 |         cache_dir: Optional[str] = None,
   |                    ^^^^^^^^^^^^^ UP007
63 |         max_cache_size_mb: int = 500,
64 |     ):
   |
   = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:116:43: UP006 [*] Use `list` instead of `List` for type annotation
    |
114 |             logger.warning(f"Cache eviction failed: {e}")
115 | 
116 |     def _define_market_scenarios(self) -> List[MarketScenario]:
    |                                           ^^^^ UP006
117 |         """Define standard market scenarios for testing"""
118 |         scenarios = [
    |
    = help: Replace with `list`

src/strategies/components/testing/test_datasets.py:270:21: UP007 [*] Use `X | Y` for type annotations
    |
268 |         self,
269 |         symbol: str = "BTCUSDT",
270 |         start_date: Optional[str] = None,
    |                     ^^^^^^^^^^^^^ UP007
271 |         end_date: Optional[str] = None,
272 |         timeframe: str = "1d",
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:271:19: UP007 [*] Use `X | Y` for type annotations
    |
269 |         symbol: str = "BTCUSDT",
270 |         start_date: Optional[str] = None,
271 |         end_date: Optional[str] = None,
    |                   ^^^^^^^^^^^^^ UP007
272 |         timeframe: str = "1d",
273 |     ) -> pd.DataFrame:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:295:17: B028 No explicit `stacklevel` keyword argument found
    |
293 |                 return self._prepare_historical_data(data)
294 |             except Exception as e:
295 |                 warnings.warn(f"Error loading historical data: {e}")
    |                 ^^^^^^^^^^^^^ B028
296 | 
297 |         # If historical data not available, generate synthetic data
    |

src/strategies/components/testing/test_datasets.py:298:9: B028 No explicit `stacklevel` keyword argument found
    |
297 |         # If historical data not available, generate synthetic data
298 |         warnings.warn(f"Historical data not found for {symbol}, generating synthetic data")
    |         ^^^^^^^^^^^^^ B028
299 |         return self.generate_synthetic_dataset("moderate_bull_low_vol")
    |

src/strategies/components/testing/test_datasets.py:414:41: UP007 [*] Use `X | Y` for type annotations
    |
413 |     def generate_synthetic_dataset(
414 |         self, scenario_name: str, seed: Optional[int] = None
    |                                         ^^^^^^^^^^^^^ UP007
415 |     ) -> pd.DataFrame:
416 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:451:13: B028 No explicit `stacklevel` keyword argument found
    |
449 |             data_to_cache.to_feather(cache_file)
450 |         except Exception as e:
451 |             warnings.warn(f"Could not cache synthetic data: {e}")
    |             ^^^^^^^^^^^^^ B028
452 | 
453 |         return data
    |

src/strategies/components/testing/test_datasets.py:455:51: UP007 [*] Use `X | Y` for type annotations
    |
453 |         return data
454 | 
455 |     def _get_scenario_by_name(self, name: str) -> Optional[MarketScenario]:
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
456 |         """Get scenario definition by name"""
457 |         for scenario in self.market_scenarios:
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:462:36: UP006 [*] Use `list` instead of `List` for type annotation
    |
460 |         return None
461 | 
462 |     def get_all_scenarios(self) -> List[str]:
    |                                    ^^^^ UP006
463 |         """Get list of all available scenario names"""
464 |         return [scenario.name for scenario in self.market_scenarios]
    |
    = help: Replace with `list`

src/strategies/components/testing/test_datasets.py:472:63: UP007 [*] Use `X | Y` for type annotations
    |
471 |     def generate_edge_case_dataset(
472 |         self, case_type: str, duration_days: int = 100, seed: Optional[int] = None
    |                                                               ^^^^^^^^^^^^^ UP007
473 |     ) -> pd.DataFrame:
474 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:636:15: UP007 [*] Use `X | Y` for type annotations
    |
634 |         scenario_name: str,
635 |         regime_detection_method: str = "simple",
636 |         seed: Optional[int] = None,
    |               ^^^^^^^^^^^^^ UP007
637 |     ) -> Tuple[pd.DataFrame, pd.DataFrame]:
638 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:637:10: UP006 [*] Use `tuple` instead of `Tuple` for type annotation
    |
635 |         regime_detection_method: str = "simple",
636 |         seed: Optional[int] = None,
637 |     ) -> Tuple[pd.DataFrame, pd.DataFrame]:
    |          ^^^^^ UP006
638 |         """
639 |         Create dataset with regime labels for regime-specific testing
    |
    = help: Replace with `tuple`

src/strategies/components/testing/test_datasets.py:714:50: UP007 [*] Use `X | Y` for type annotations
    |
712 |         return pd.Series(duration.values, index=regime_data.index, dtype=int)
713 | 
714 |     def get_comprehensive_test_suite(self, seed: Optional[int] = None) -> Dict[str, pd.DataFrame]:
    |                                                  ^^^^^^^^^^^^^ UP007
715 |         """
716 |         Get comprehensive test suite with all scenarios and edge cases
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:714:75: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
712 |         return pd.Series(duration.values, index=regime_data.index, dtype=int)
713 | 
714 |     def get_comprehensive_test_suite(self, seed: Optional[int] = None) -> Dict[str, pd.DataFrame]:
    |                                                                           ^^^^ UP006
715 |         """
716 |         Get comprehensive test suite with all scenarios and edge cases
    |
    = help: Replace with `dict`

src/strategies/components/testing/test_datasets.py:770:47: UP007 [*] Use `X | Y` for type annotations
    |
769 |     def generate_scenario_data(
770 |         self, scenario: MarketScenario, seed: Optional[int] = None
    |                                               ^^^^^^^^^^^^^ UP007
771 |     ) -> pd.DataFrame:
772 |         """
    |
    = help: Convert to `X | Y`

src/strategies/components/testing/test_datasets.py:866:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
864 |     def _generate_ohlcv_from_prices(
865 |         self, prices: np.ndarray, scenario: MarketScenario
866 |     ) -> Dict[str, np.ndarray]:
    |          ^^^^ UP006
867 |         """Generate OHLCV data from price series"""
868 |         n_periods = len(prices)
    |
    = help: Replace with `dict`

src/strategies/ensemble_weighted.py:23:1: I001 [*] Import block is un-sorted or un-formatted
   |
21 |   """
22 |   
23 | / from typing import Any, Optional
24 | | 
25 | | from src.strategies.components import (
26 | |     Strategy,
27 | |     WeightedVotingSignalGenerator,
28 | |     VolatilityRiskManager,
29 | |     ConfidenceWeightedSizer,
30 | |     EnhancedRegimeDetector,
31 | |     MLBasicSignalGenerator,
32 | |     MLSignalGenerator,
33 | | )
34 | | 
35 | | 
36 | | # Configuration constants
   | |_^ I001
37 |   MIN_STRATEGIES_FOR_SIGNAL = 1
38 |   PERFORMANCE_WINDOW = 30
   |
   = help: Organize imports

src/strategies/ensemble_weighted.py:23:20: F401 [*] `typing.Any` imported but unused
   |
21 | """
22 | 
23 | from typing import Any, Optional
   |                    ^^^ F401
24 | 
25 | from src.strategies.components import (
   |
   = help: Remove unused import

src/strategies/ensemble_weighted.py:23:25: F401 [*] `typing.Optional` imported but unused
   |
21 | """
22 | 
23 | from typing import Any, Optional
   |                         ^^^^^^^^ F401
24 | 
25 | from src.strategies.components import (
   |
   = help: Remove unused import

src/strategies/ml_adaptive.py:23:1: I001 [*] Import block is un-sorted or un-formatted
   |
21 |   """
22 |   
23 | / from typing import Any, Optional
24 | | 
25 | | from src.strategies.components import (
26 | |     Strategy,
27 | |     MLSignalGenerator,
28 | |     RegimeAdaptiveRiskManager,
29 | |     ConfidenceWeightedSizer,
30 | |     EnhancedRegimeDetector,
31 | | )
32 | | 
33 | | 
34 | | def create_ml_adaptive_strategy(
   | |_^ I001
35 |       name: str = "MlAdaptive",
36 |       model_path: str = "src/ml/btcusdt_price.onnx",
   |
   = help: Organize imports

src/strategies/ml_adaptive.py:23:20: F401 [*] `typing.Any` imported but unused
   |
21 | """
22 | 
23 | from typing import Any, Optional
   |                    ^^^ F401
24 | 
25 | from src.strategies.components import (
   |
   = help: Remove unused import: `typing.Any`

src/strategies/ml_adaptive.py:38:28: UP007 [*] Use `X | Y` for type annotations
   |
36 |     model_path: str = "src/ml/btcusdt_price.onnx",
37 |     sequence_length: int = 120,
38 |     use_prediction_engine: Optional[bool] = None,
   |                            ^^^^^^^^^^^^^^ UP007
39 |     model_name: Optional[str] = None,
40 | ) -> Strategy:
   |
   = help: Convert to `X | Y`

src/strategies/ml_adaptive.py:39:17: UP007 [*] Use `X | Y` for type annotations
   |
37 |     sequence_length: int = 120,
38 |     use_prediction_engine: Optional[bool] = None,
39 |     model_name: Optional[str] = None,
   |                 ^^^^^^^^^^^^^ UP007
40 | ) -> Strategy:
41 |     """
   |
   = help: Convert to `X | Y`

src/strategies/ml_basic.py:22:1: I001 [*] Import block is un-sorted or un-formatted
   |
20 |   """
21 |   
22 | / from typing import Any, Optional
23 | | 
24 | | from src.strategies.components import (
25 | |     Strategy,
26 | |     MLBasicSignalGenerator,
27 | |     FixedRiskManager,
28 | |     ConfidenceWeightedSizer,
29 | |     EnhancedRegimeDetector,
30 | |     HoldSignalGenerator,
31 | |     FixedFractionSizer,
32 | |     RegimeContext,
33 | |     TrendLabel,
34 | |     VolLabel,
35 | | )
36 | | 
37 | | 
38 | | def create_ml_basic_strategy(
   | |_^ I001
39 |       name: str = "MlBasic",
40 |       model_path: str = "src/ml/btcusdt_price.onnx",
   |
   = help: Organize imports

src/strategies/ml_basic.py:22:20: F401 [*] `typing.Any` imported but unused
   |
20 | """
21 | 
22 | from typing import Any, Optional
   |                    ^^^ F401
23 | 
24 | from src.strategies.components import (
   |
   = help: Remove unused import: `typing.Any`

src/strategies/ml_basic.py:42:28: UP007 [*] Use `X | Y` for type annotations
   |
40 |     model_path: str = "src/ml/btcusdt_price.onnx",
41 |     sequence_length: int = 120,
42 |     use_prediction_engine: Optional[bool] = None,
   |                            ^^^^^^^^^^^^^^ UP007
43 |     model_name: Optional[str] = None,
44 |     model_type: Optional[str] = None,
   |
   = help: Convert to `X | Y`

src/strategies/ml_basic.py:43:17: UP007 [*] Use `X | Y` for type annotations
   |
41 |     sequence_length: int = 120,
42 |     use_prediction_engine: Optional[bool] = None,
43 |     model_name: Optional[str] = None,
   |                 ^^^^^^^^^^^^^ UP007
44 |     model_type: Optional[str] = None,
45 |     timeframe: Optional[str] = None,
   |
   = help: Convert to `X | Y`

src/strategies/ml_basic.py:44:17: UP007 [*] Use `X | Y` for type annotations
   |
42 |     use_prediction_engine: Optional[bool] = None,
43 |     model_name: Optional[str] = None,
44 |     model_type: Optional[str] = None,
   |                 ^^^^^^^^^^^^^ UP007
45 |     timeframe: Optional[str] = None,
46 |     fast_mode: bool = False,
   |
   = help: Convert to `X | Y`

src/strategies/ml_basic.py:45:16: UP007 [*] Use `X | Y` for type annotations
   |
43 |     model_name: Optional[str] = None,
44 |     model_type: Optional[str] = None,
45 |     timeframe: Optional[str] = None,
   |                ^^^^^^^^^^^^^ UP007
46 |     fast_mode: bool = False,
47 | ) -> Strategy:
   |
   = help: Convert to `X | Y`

src/strategies/ml_sentiment.py:23:1: I001 [*] Import block is un-sorted or un-formatted
   |
21 |   """
22 |   
23 | / from typing import Optional
24 | | 
25 | | from src.strategies.components import (
26 | |     Strategy,
27 | |     MLSignalGenerator,
28 | |     FixedRiskManager,
29 | |     ConfidenceWeightedSizer,
30 | |     EnhancedRegimeDetector,
31 | | )
32 | | 
33 | | 
34 | | def create_ml_sentiment_strategy(
   | |_^ I001
35 |       name: str = "MlSentiment",
36 |       model_path: str = "src/ml/btcusdt_sentiment.onnx",
   |
   = help: Organize imports

src/strategies/ml_sentiment.py:38:28: UP007 [*] Use `X | Y` for type annotations
   |
36 |     model_path: str = "src/ml/btcusdt_sentiment.onnx",
37 |     sequence_length: int = 120,
38 |     use_prediction_engine: Optional[bool] = None,
   |                            ^^^^^^^^^^^^^^ UP007
39 |     model_name: Optional[str] = None,
40 |     model_type: Optional[str] = None,
   |
   = help: Convert to `X | Y`

src/strategies/ml_sentiment.py:39:17: UP007 [*] Use `X | Y` for type annotations
   |
37 |     sequence_length: int = 120,
38 |     use_prediction_engine: Optional[bool] = None,
39 |     model_name: Optional[str] = None,
   |                 ^^^^^^^^^^^^^ UP007
40 |     model_type: Optional[str] = None,
41 |     timeframe: Optional[str] = None,
   |
   = help: Convert to `X | Y`

src/strategies/ml_sentiment.py:40:17: UP007 [*] Use `X | Y` for type annotations
   |
38 |     use_prediction_engine: Optional[bool] = None,
39 |     model_name: Optional[str] = None,
40 |     model_type: Optional[str] = None,
   |                 ^^^^^^^^^^^^^ UP007
41 |     timeframe: Optional[str] = None,
42 | ) -> Strategy:
   |
   = help: Convert to `X | Y`

src/strategies/ml_sentiment.py:41:16: UP007 [*] Use `X | Y` for type annotations
   |
39 |     model_name: Optional[str] = None,
40 |     model_type: Optional[str] = None,
41 |     timeframe: Optional[str] = None,
   |                ^^^^^^^^^^^^^ UP007
42 | ) -> Strategy:
43 |     """
   |
   = help: Convert to `X | Y`

src/strategies/momentum_leverage.py:22:1: I001 [*] Import block is un-sorted or un-formatted
   |
20 |   """
21 |   
22 | / from typing import Any
23 | | 
24 | | from src.strategies.components import (
25 | |     Strategy,
26 | |     MomentumSignalGenerator,
27 | |     VolatilityRiskManager,
28 | |     ConfidenceWeightedSizer,
29 | |     EnhancedRegimeDetector,
30 | | )
31 | | 
32 | | 
33 | | def create_momentum_leverage_strategy(
   | |_^ I001
34 |       name: str = "MomentumLeverage",
35 |       momentum_entry_threshold: float = 0.01,
   |
   = help: Organize imports

src/strategies/momentum_leverage.py:22:20: F401 [*] `typing.Any` imported but unused
   |
20 | """
21 | 
22 | from typing import Any
   |                    ^^^ F401
23 | 
24 | from src.strategies.components import (
   |
   = help: Remove unused import: `typing.Any`

src/utils/geo_detection.py:13:13: UP007 [*] Use `X | Y` for type annotations
   |
12 | # Cache for geo-location to avoid repeated API calls
13 | _geo_cache: Optional[tuple[str, str]] = None
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
   |
   = help: Convert to `X | Y`

src/utils/geo_detection.py:16:27: UP007 [*] Use `X | Y` for type annotations
   |
16 | def get_country_code() -> Optional[str]:
   |                           ^^^^^^^^^^^^^ UP007
17 |     """
18 |     Get the current country code using IP geolocation.
   |
   = help: Convert to `X | Y`

src/utils/logging_config.py:71:18: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
69 |             if isinstance(record.args, dict):
70 |                 record.args = self._redact_mapping(record.args)
71 |             elif isinstance(record.args, (list, tuple)):
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
72 |                 sanitized = []
73 |                 for a in record.args:  # type: ignore[assignment]
   |
   = help: Convert to `X | Y`

src/utils/project_paths.py:30:36: UP007 [*] Use `X | Y` for type annotations
   |
29 |     # * Helper: look for common project markers while walking up
30 |     def _search_up(start: Path) -> Optional[Path]:
   |                                    ^^^^^^^^^^^^^^ UP007
31 |         markers = ("alembic.ini", "pyproject.toml", "migrations")
32 |         for parent in [start, *start.parents]:
   |
   = help: Convert to `X | Y`

src/utils/project_paths.py:58:16: UP007 [*] Use `X | Y` for type annotations
   |
57 | # Cache the project root to avoid repeated filesystem operations
58 | _PROJECT_ROOT: Optional[Path] = None
   |                ^^^^^^^^^^^^^^ UP007
   |
   = help: Convert to `X | Y`

tests/integration/backtesting/test_dynamic_risk_integration.py:3:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 |   """Integration tests for dynamic risk management in backtesting"""
 2 |   
 3 | / from datetime import datetime
 4 | | 
 5 | | import pandas as pd
 6 | | import pytest
 7 | | 
 8 | | from src.backtesting.engine import Backtester
 9 | | from src.position_management.dynamic_risk import DynamicRiskConfig
10 | | from src.strategies.components.strategy import Strategy
11 | | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
12 | | from src.strategies.components.risk_manager import RiskManager
13 | | from src.strategies.components.position_sizer import PositionSizer
14 | | 
15 | | pytestmark = pytest.mark.integration
   | |_^ I001
   |
   = help: Organize imports

tests/integration/backtesting/test_mfe_mae_integration.py:1:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 | / from datetime import datetime, timedelta
 2 | | 
 3 | | import pandas as pd
 4 | | 
 5 | | from src.backtesting.engine import Backtester
 6 | | from src.data_providers.mock_data_provider import MockDataProvider
 7 | | from src.strategies.components.strategy import Strategy
 8 | | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
 9 | | from src.strategies.components.risk_manager import RiskManager
10 | | from src.strategies.components.position_sizer import PositionSizer
11 | | 
12 | | 
13 | | class SimpleSignalGenerator(SignalGenerator):
   | |_^ I001
14 |       """Simple signal generator that signals BUY at index 10"""
   |
   = help: Organize imports

tests/integration/backtesting/test_regime_integration.py:1:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 | / import sys
 2 | | from datetime import datetime, timedelta
 3 | | from types import ModuleType, SimpleNamespace
 4 | | 
 5 | | import pandas as pd
 6 | | 
 7 | | from src.backtesting import engine as backtesting_engine
 8 | | from src.backtesting.engine import Backtester
 9 | | from src.data_providers.mock_data_provider import MockDataProvider
10 | | from src.regime.detector import RegimeConfig, RegimeDetector
11 | | from src.strategies.components.strategy import Strategy
12 | | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
13 | | from src.strategies.components.risk_manager import RiskManager
14 | | from src.strategies.components.position_sizer import PositionSizer
15 | | 
16 | | 
17 | | class PeriodicSignalGenerator(SignalGenerator):
   | |_^ I001
18 |       """Signal generator that signals BUY every 15 candles"""
   |
   = help: Organize imports

tests/integration/backtesting/test_regime_regression.py:3:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 |   """Regression test for regime-aware backtesting results."""
 2 |   
 3 | / from __future__ import annotations
 4 | | 
 5 | | import json
 6 | | from datetime import datetime
 7 | | from pathlib import Path
 8 | | from typing import Any, Callable
 9 | | 
10 | | import numpy as np
11 | | import pandas as pd
12 | | import pytest
13 | | 
14 | | from src.backtesting.engine import Backtester
15 | | from src.data_providers.data_provider import DataProvider
16 | | from src.strategies.components.strategy import Strategy
17 | | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
18 | | from src.strategies.components.risk_manager import RiskManager
19 | | from src.strategies.components.position_sizer import PositionSizer
20 | | 
21 | | 
22 | | class FixtureDataProvider(DataProvider):
   | |_^ I001
23 |       """Data provider that serves a deterministic OHLCV fixture."""
   |
   = help: Organize imports

tests/integration/backtesting/test_regime_regression.py:8:1: UP035 [*] Import from `collections.abc` instead: `Callable`
   |
 6 | from datetime import datetime
 7 | from pathlib import Path
 8 | from typing import Any, Callable
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
 9 | 
10 | import numpy as np
   |
   = help: Import from `collections.abc`

tests/integration/backtesting/test_regime_regression.py:406:21: B905 [*] `zip()` without an explicit `strict=` parameter
    |
405 |     assert len(observed["strategy_switches"]) == len(expected["strategy_switches"])
406 |     for obs, exp in zip(observed["strategy_switches"], expected["strategy_switches"]):
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
407 |         assert obs["timestamp"] == exp["timestamp"]
408 |         assert obs["old_strategy"] == exp["old_strategy"]
    |
    = help: Add explicit `strict=False`

tests/integration/backtesting/test_regime_regression.py:416:21: B905 [*] `zip()` without an explicit `strict=` parameter
    |
415 |     assert len(observed["regime_history"]) == len(expected["regime_history"])
416 |     for obs, exp in zip(observed["regime_history"], expected["regime_history"]):
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
417 |         assert obs["timestamp"] == exp["timestamp"]
418 |         assert obs["regime"] == exp["regime"]
    |
    = help: Add explicit `strict=False`

tests/integration/live/test_regime_integration_live_engine.py:1:18: F401 [*] `pandas` imported but unused
  |
1 | import pandas as pd
  |                  ^^ F401
2 | 
3 | from src.data_providers.mock_data_provider import MockDataProvider
  |
  = help: Remove unused import: `pandas`

tests/integration/live_trading/test_database_logging.py:273:1: I001 [*] Import block is un-sorted or un-formatted
    |
271 |           """Test that TradingDecision objects are properly logged to database"""
272 |           try:
273 | /             from src.strategies.components import (
274 | |                 Strategy,
275 | |                 MLBasicSignalGenerator,
276 | |                 FixedRiskManager,
277 | |                 ConfidenceWeightedSizer,
278 | |             )
279 | |             import pandas as pd
280 | |         except ImportError:
    | |_^ I001
281 |               pytest.skip("Component strategy not available")
    |
    = help: Organize imports

tests/integration/live_trading/test_database_logging.py:320:9: F841 Local variable `decision_dict` is assigned to but never used
    |
319 |         # Convert decision to dict for logging
320 |         decision_dict = decision.to_dict()
    |         ^^^^^^^^^^^^^ F841
321 | 
322 |         # Log strategy execution with TradingDecision data
    |
    = help: Remove assignment to unused variable `decision_dict`

tests/integration/live_trading/test_database_logging.py:373:1: I001 [*] Import block is un-sorted or un-formatted
    |
371 |           """Test that signal direction from TradingDecision is logged correctly"""
372 |           try:
373 | /             from src.strategies.components import (
374 | |                 Strategy,
375 | |                 MLBasicSignalGenerator,
376 | |                 FixedRiskManager,
377 | |                 ConfidenceWeightedSizer,
378 | |                 SignalDirection,
379 | |             )
380 | |             import pandas as pd
381 | |         except ImportError:
    | |_^ I001
382 |               pytest.skip("Component strategy not available")
    |
    = help: Organize imports

tests/integration/live_trading/test_database_logging.py:378:17: F401 `src.strategies.components.SignalDirection` imported but unused; consider using `importlib.util.find_spec` to test for availability
    |
376 |                 FixedRiskManager,
377 |                 ConfidenceWeightedSizer,
378 |                 SignalDirection,
    |                 ^^^^^^^^^^^^^^^ F401
379 |             )
380 |             import pandas as pd
    |
    = help: Remove unused import: `src.strategies.components.SignalDirection`

tests/integration/live_trading/test_database_logging.py:448:1: I001 [*] Import block is un-sorted or un-formatted
    |
446 |           """Test that regime context from TradingDecision is logged correctly"""
447 |           try:
448 | /             from src.strategies.components import (
449 | |                 Strategy,
450 | |                 MLBasicSignalGenerator,
451 | |                 FixedRiskManager,
452 | |                 ConfidenceWeightedSizer,
453 | |             )
454 | |             import pandas as pd
455 | |         except ImportError:
    | |_^ I001
456 |               pytest.skip("Component strategy not available")
    |
    = help: Organize imports

tests/integration/live_trading/test_database_logging.py:535:1: I001 [*] Import block is un-sorted or un-formatted
    |
533 |           """Test that risk metrics from TradingDecision are logged correctly"""
534 |           try:
535 | /             from src.strategies.components import (
536 | |                 Strategy,
537 | |                 MLBasicSignalGenerator,
538 | |                 FixedRiskManager,
539 | |                 ConfidenceWeightedSizer,
540 | |             )
541 | |             import pandas as pd
542 | |         except ImportError:
    | |_^ I001
543 |               pytest.skip("Component strategy not available")
    |
    = help: Organize imports

tests/integration/live_trading/test_engine_core.py:12:1: I001 [*] Import block is un-sorted or un-formatted
   |
11 |   try:
12 | /     from live.trading_engine import LiveTradingEngine, Position, PositionSide
13 | |     from src.performance.metrics import cash_pnl
14 | |     from src.position_management.trailing_stops import TrailingStopPolicy
15 | |     from src.strategies.components import (
16 | |         Signal,
17 | |         SignalDirection,
18 | |         Strategy,
19 | |         MLBasicSignalGenerator,
20 | |         FixedRiskManager,
21 | |         ConfidenceWeightedSizer,
22 | |         SignalGenerator,
23 | |     )
24 | |     from src.strategies.components.strategy import TradingDecision
25 | | 
   | |_^ I001
26 |       LIVE_TRADING_AVAILABLE = True
27 |   except ImportError:
   |
   = help: Organize imports

tests/integration/live_trading/test_engine_core.py:468:5: F841 Local variable `engine` is assigned to but never used
    |
466 |     )
467 | 
468 |     engine = LiveTradingEngine(
    |     ^^^^^^ F841
469 |         strategy=strategy, data_provider=mock_data_provider, enable_live_trading=False
470 |     )
    |
    = help: Remove assignment to unused variable `engine`

tests/integration/live_trading/test_engine_core.py:522:5: F841 Local variable `engine` is assigned to but never used
    |
520 |     )
521 | 
522 |     engine = LiveTradingEngine(
    |     ^^^^^^ F841
523 |         strategy=strategy,
524 |         data_provider=mock_data_provider,
    |
    = help: Remove assignment to unused variable `engine`

tests/integration/live_trading/test_engine_core.py:544:1: I001 [*] Import block is un-sorted or un-formatted
    |
543 |       # Create a position
544 | /     from src.strategies.components import Position as ComponentPosition, MarketData
545 | | 
    | |_^ I001
546 |       position = ComponentPosition(
547 |           symbol="BTCUSDT",
    |
    = help: Organize imports

tests/integration/live_trading/test_engine_core.py:585:5: F841 Local variable `engine` is assigned to but never used
    |
583 |     )
584 | 
585 |     engine = LiveTradingEngine(
    |     ^^^^^^ F841
586 |         strategy=strategy, data_provider=mock_data_provider, enable_live_trading=False
587 |     )
    |
    = help: Remove assignment to unused variable `engine`

tests/integration/live_trading/test_fallbacks.py:1:22: F401 [*] `datetime.datetime` imported but unused
  |
1 | from datetime import datetime, timedelta
  |                      ^^^^^^^^ F401
2 | from unittest.mock import MagicMock
  |
  = help: Remove unused import

tests/integration/live_trading/test_fallbacks.py:1:32: F401 [*] `datetime.timedelta` imported but unused
  |
1 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^ F401
2 | from unittest.mock import MagicMock
  |
  = help: Remove unused import

tests/integration/live_trading/test_fallbacks.py:2:27: F401 [*] `unittest.mock.MagicMock` imported but unused
  |
1 | from datetime import datetime, timedelta
2 | from unittest.mock import MagicMock
  |                           ^^^^^^^^^ F401
3 | 
4 | import pandas as pd
  |
  = help: Remove unused import: `unittest.mock.MagicMock`

tests/integration/live_trading/test_fallbacks.py:45:1: I001 [*] Import block is un-sorted or un-formatted
   |
43 |           # and log their execution properly
44 |           try:
45 | /             from src.strategies.components import (
46 | |                 Strategy,
47 | |                 MLBasicSignalGenerator,
48 | |                 FixedRiskManager,
49 | |                 ConfidenceWeightedSizer,
50 | |             )
51 | | 
   | |_^ I001
52 |               # Create a component-based strategy
53 |               signal_generator = MLBasicSignalGenerator(name="test_fallback_sg")
   |
   = help: Organize imports

tests/integration/live_trading/test_fallbacks.py:65:13: F841 Local variable `engine` is assigned to but never used
   |
64 |             # Create engine with component strategy
65 |             engine = LiveTradingEngine(
   |             ^^^^^^ F841
66 |                 strategy=strategy,
67 |                 data_provider=mock_data_provider,
   |
   = help: Remove assignment to unused variable `engine`

tests/integration/predictions/test_engine_integration.py:141:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
139 |                 assert result.features_used > 0
140 |                 assert result.model_name in models
141 |                 assert isinstance(result.price, (int, float))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
142 |                 assert isinstance(result.confidence, (int, float))
143 |                 assert result.direction in [-1, 0, 1]
    |
    = help: Convert to `X | Y`

tests/integration/predictions/test_engine_integration.py:142:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
140 |                 assert result.model_name in models
141 |                 assert isinstance(result.price, (int, float))
142 |                 assert isinstance(result.confidence, (int, float))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
143 |                 assert result.direction in [-1, 0, 1]
144 |             else:
    |
    = help: Convert to `X | Y`

tests/integration/test_component_trading_workflows.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / import pytest
 9 | | import pandas as pd
10 | | import numpy as np
11 | | from datetime import datetime, timedelta
12 | | from unittest.mock import Mock, patch
13 | | 
14 | | from src.strategies.components.strategy import Strategy, TradingDecision
15 | | from src.strategies.components.signal_generator import (
16 | |     WeightedVotingSignalGenerator,
17 | |     SignalDirection,
18 | |     Signal,
19 | | )
20 | | from src.strategies.components.technical_signal_generator import TechnicalSignalGenerator
21 | | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
22 | | from src.strategies.components.risk_manager import (
23 | |     FixedRiskManager,
24 | |     VolatilityRiskManager,
25 | |     RegimeAdaptiveRiskManager,
26 | |     Position,
27 | |     MarketData,
28 | | )
29 | | from src.strategies.components.position_sizer import (
30 | |     ConfidenceWeightedSizer,
31 | |     KellySizer,
32 | |     RegimeAdaptiveSizer,
33 | | )
34 | | from src.strategies.components.regime_context import (
35 | |     EnhancedRegimeDetector,
36 | |     RegimeContext,
37 | |     TrendLabel,
38 | |     VolLabel,
39 | | )
40 | | 
41 | | 
42 | | pytestmark = pytest.mark.integration
   | |_^ I001
   |
   = help: Organize imports

tests/integration/test_component_trading_workflows.py:11:22: F401 [*] `datetime.datetime` imported but unused
   |
 9 | import pandas as pd
10 | import numpy as np
11 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
12 | from unittest.mock import Mock, patch
   |
   = help: Remove unused import

tests/integration/test_component_trading_workflows.py:11:32: F401 [*] `datetime.timedelta` imported but unused
   |
 9 | import pandas as pd
10 | import numpy as np
11 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
12 | from unittest.mock import Mock, patch
   |
   = help: Remove unused import

tests/integration/test_component_trading_workflows.py:35:5: F401 [*] `src.strategies.components.regime_context.EnhancedRegimeDetector` imported but unused
   |
33 | )
34 | from src.strategies.components.regime_context import (
35 |     EnhancedRegimeDetector,
   |     ^^^^^^^^^^^^^^^^^^^^^^ F401
36 |     RegimeContext,
37 |     TrendLabel,
   |
   = help: Remove unused import

tests/integration/test_component_trading_workflows.py:36:5: F401 [*] `src.strategies.components.regime_context.RegimeContext` imported but unused
   |
34 | from src.strategies.components.regime_context import (
35 |     EnhancedRegimeDetector,
36 |     RegimeContext,
   |     ^^^^^^^^^^^^^ F401
37 |     TrendLabel,
38 |     VolLabel,
   |
   = help: Remove unused import

tests/integration/test_component_trading_workflows.py:164:14: F841 Local variable `mock_patch` is assigned to but never used
    |
162 |             "src.strategies.components.ml_signal_generator.ort.InferenceSession",
163 |             return_value=mock_session,
164 |         ) as mock_patch:
    |              ^^^^^^^^^^ F841
165 |             with patch.dict("os.environ", {"USE_PREDICTION_ENGINE": "False"}):
166 |                 df = self.create_market_scenario("trending_up", 50)
    |
    = help: Remove assignment to unused variable `mock_patch`

tests/integration/test_component_trading_workflows.py:271:9: F841 Local variable `regime_vols` is assigned to but never used
    |
269 |         # Validate regime detection worked
270 |         regime_trends = [r.trend.value if r else None for r in regimes]
271 |         regime_vols = [r.volatility.value if r else None for r in regimes]
    |         ^^^^^^^^^^^ F841
272 | 
273 |         # Should detect different regimes
    |
    = help: Remove assignment to unused variable `regime_vols`

tests/integration/test_component_trading_workflows.py:454:13: B007 Loop control variable `strategy_name` not used within loop body
    |
452 |         assert len(all_decisions) == 3
453 | 
454 |         for strategy_name, decisions in all_decisions.items():
    |             ^^^^^^^^^^^^^ B007
455 |             assert len(decisions) == 5
456 |             assert all(isinstance(d, TradingDecision) for d in decisions)
    |
    = help: Rename unused `strategy_name` to `_strategy_name`

tests/integration/test_component_trading_workflows.py:469:33: B905 [*] `zip()` without an explicit `strict=` parameter
    |
467 |         different_signals = sum(
468 |             1
469 |             for ml_d, tech_d in zip(ml_decisions, tech_decisions)
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B905
470 |             if ml_d.signal.direction != tech_d.signal.direction
471 |         )
    |
    = help: Add explicit `strict=False`

tests/integration/test_error_handling_workflows.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / import pytest
 9 | | import pandas as pd
10 | | import numpy as np
11 | | from datetime import datetime
12 | | from unittest.mock import Mock, patch
13 | | 
14 | | from src.strategies.components.strategy import Strategy, TradingDecision
15 | | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
16 | | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
17 | | from src.strategies.components.risk_manager import FixedRiskManager, Position, MarketData
18 | | from src.strategies.components.position_sizer import ConfidenceWeightedSizer
19 | | from src.strategies.components.regime_context import EnhancedRegimeDetector
20 | | 
21 | | 
22 | | pytestmark = pytest.mark.integration
   | |_^ I001
   |
   = help: Organize imports

tests/integration/test_error_handling_workflows.py:10:17: F401 [*] `numpy` imported but unused
   |
 8 | import pytest
 9 | import pandas as pd
10 | import numpy as np
   |                 ^^ F401
11 | from datetime import datetime
12 | from unittest.mock import Mock, patch
   |
   = help: Remove unused import: `numpy`

tests/integration/test_error_handling_workflows.py:11:22: F401 [*] `datetime.datetime` imported but unused
   |
 9 | import pandas as pd
10 | import numpy as np
11 | from datetime import datetime
   |                      ^^^^^^^^ F401
12 | from unittest.mock import Mock, patch
   |
   = help: Remove unused import: `datetime.datetime`

tests/integration/test_error_handling_workflows.py:12:27: F401 [*] `unittest.mock.Mock` imported but unused
   |
10 | import numpy as np
11 | from datetime import datetime
12 | from unittest.mock import Mock, patch
   |                           ^^^^ F401
13 | 
14 | from src.strategies.components.strategy import Strategy, TradingDecision
   |
   = help: Remove unused import

tests/integration/test_error_handling_workflows.py:12:33: F401 [*] `unittest.mock.patch` imported but unused
   |
10 | import numpy as np
11 | from datetime import datetime
12 | from unittest.mock import Mock, patch
   |                                 ^^^^^ F401
13 | 
14 | from src.strategies.components.strategy import Strategy, TradingDecision
   |
   = help: Remove unused import

tests/integration/test_error_handling_workflows.py:14:58: F401 [*] `src.strategies.components.strategy.TradingDecision` imported but unused
   |
12 | from unittest.mock import Mock, patch
13 | 
14 | from src.strategies.components.strategy import Strategy, TradingDecision
   |                                                          ^^^^^^^^^^^^^^^ F401
15 | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
16 | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
   |
   = help: Remove unused import: `src.strategies.components.strategy.TradingDecision`

tests/integration/test_error_handling_workflows.py:17:70: F401 [*] `src.strategies.components.risk_manager.Position` imported but unused
   |
15 | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
16 | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
17 | from src.strategies.components.risk_manager import FixedRiskManager, Position, MarketData
   |                                                                      ^^^^^^^^ F401
18 | from src.strategies.components.position_sizer import ConfidenceWeightedSizer
19 | from src.strategies.components.regime_context import EnhancedRegimeDetector
   |
   = help: Remove unused import

tests/integration/test_error_handling_workflows.py:17:80: F401 [*] `src.strategies.components.risk_manager.MarketData` imported but unused
   |
15 | from src.strategies.components.signal_generator import SignalGenerator, Signal, SignalDirection
16 | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
17 | from src.strategies.components.risk_manager import FixedRiskManager, Position, MarketData
   |                                                                                ^^^^^^^^^^ F401
18 | from src.strategies.components.position_sizer import ConfidenceWeightedSizer
19 | from src.strategies.components.regime_context import EnhancedRegimeDetector
   |
   = help: Remove unused import

tests/integration/test_error_handling_workflows.py:319:9: F841 Local variable `original_history_length` is assigned to but never used
    |
318 |         # Simulate state corruption by clearing history
319 |         original_history_length = len(strategy.decision_history)
    |         ^^^^^^^^^^^^^^^^^^^^^^^ F841
320 |         strategy.decision_history.clear()
    |
    = help: Remove assignment to unused variable `original_history_length`

tests/integration/test_error_handling_workflows.py:335:16: F401 [*] `time` imported but unused
    |
333 |         """Test thread safety and concurrent access handling"""
334 |         import threading
335 |         import time
    |                ^^^^ F401
336 | 
337 |         strategy = Strategy(
    |
    = help: Remove unused import: `time`

tests/mocks/mock_database.py:19:38: UP007 [*] Use `X | Y` for type annotations
   |
17 |     """Mock implementation of DatabaseManager for unit tests"""
18 | 
19 |     def __init__(self, database_url: Optional[str] = None):
   |                                      ^^^^^^^^^^^^^ UP007
20 |         """Initialize mock database with in-memory storage"""
21 |         self.database_url = database_url or "mock://memory"
   |
   = help: Convert to `X | Y`

tests/mocks/mock_database.py:82:26: UP007 [*] Use `X | Y` for type annotations
   |
80 |         timeframe: str,
81 |         initial_balance: float,
82 |         strategy_config: Optional[dict] = None,
   |                          ^^^^^^^^^^^^^^ UP007
83 |         mode: str = "backtest",
84 |         time_exit_config: Optional[dict] = None,
   |
   = help: Convert to `X | Y`

tests/mocks/mock_database.py:84:27: UP007 [*] Use `X | Y` for type annotations
   |
82 |         strategy_config: Optional[dict] = None,
83 |         mode: str = "backtest",
84 |         time_exit_config: Optional[dict] = None,
   |                           ^^^^^^^^^^^^^^ UP007
85 |         market_timezone: Optional[str] = None,
86 |         **kwargs: Any,
   |
   = help: Convert to `X | Y`

tests/mocks/mock_database.py:85:26: UP007 [*] Use `X | Y` for type annotations
   |
83 |         mode: str = "backtest",
84 |         time_exit_config: Optional[dict] = None,
85 |         market_timezone: Optional[str] = None,
   |                          ^^^^^^^^^^^^^ UP007
86 |         **kwargs: Any,
87 |     ) -> int:
   |
   = help: Convert to `X | Y`

tests/mocks/mock_database.py:113:27: UP007 [*] Use `X | Y` for type annotations
    |
112 |     def end_trading_session(
113 |         self, session_id: Optional[int] = None, final_balance: Optional[float] = None
    |                           ^^^^^^^^^^^^^ UP007
114 |     ):
115 |         """End a trading session"""
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:113:64: UP007 [*] Use `X | Y` for type annotations
    |
112 |     def end_trading_session(
113 |         self, session_id: Optional[int] = None, final_balance: Optional[float] = None
    |                                                                ^^^^^^^^^^^^^^^ UP007
114 |     ):
115 |         """End a trading session"""
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:149:19: UP007 [*] Use `X | Y` for type annotations
    |
147 |         strategy_name: str,
148 |         source: Any = None,
149 |         order_id: Optional[str] = None,
    |                   ^^^^^^^^^^^^^ UP007
150 |         fees: float = 0.0,
151 |         slippage: float = 0.0,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:152:21: UP007 [*] Use `X | Y` for type annotations
    |
150 |         fees: float = 0.0,
151 |         slippage: float = 0.0,
152 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
153 |         **kwargs: Any,
154 |     ) -> int:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:193:19: UP007 [*] Use `X | Y` for type annotations
    |
191 |         size: float,
192 |         strategy_name: str,
193 |         order_id: Optional[str] = None,
    |                   ^^^^^^^^^^^^^ UP007
194 |         stop_loss: Optional[float] = None,
195 |         take_profit: Optional[float] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:194:20: UP007 [*] Use `X | Y` for type annotations
    |
192 |         strategy_name: str,
193 |         order_id: Optional[str] = None,
194 |         stop_loss: Optional[float] = None,
    |                    ^^^^^^^^^^^^^^^ UP007
195 |         take_profit: Optional[float] = None,
196 |         confidence_score: Optional[float] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:195:22: UP007 [*] Use `X | Y` for type annotations
    |
193 |         order_id: Optional[str] = None,
194 |         stop_loss: Optional[float] = None,
195 |         take_profit: Optional[float] = None,
    |                      ^^^^^^^^^^^^^^^ UP007
196 |         confidence_score: Optional[float] = None,
197 |         quantity: Optional[float] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:196:27: UP007 [*] Use `X | Y` for type annotations
    |
194 |         stop_loss: Optional[float] = None,
195 |         take_profit: Optional[float] = None,
196 |         confidence_score: Optional[float] = None,
    |                           ^^^^^^^^^^^^^^^ UP007
197 |         quantity: Optional[float] = None,
198 |         session_id: Optional[int] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:197:19: UP007 [*] Use `X | Y` for type annotations
    |
195 |         take_profit: Optional[float] = None,
196 |         confidence_score: Optional[float] = None,
197 |         quantity: Optional[float] = None,
    |                   ^^^^^^^^^^^^^^^ UP007
198 |         session_id: Optional[int] = None,
199 |         **kwargs: Any,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:198:21: UP007 [*] Use `X | Y` for type annotations
    |
196 |         confidence_score: Optional[float] = None,
197 |         quantity: Optional[float] = None,
198 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
199 |         **kwargs: Any,
200 |     ) -> int:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:233:24: UP007 [*] Use `X | Y` for type annotations
    |
231 |         self,
232 |         position_id: int,
233 |         current_price: Optional[float] = None,
    |                        ^^^^^^^^^^^^^^^ UP007
234 |         stop_loss: Optional[float] = None,
235 |         take_profit: Optional[float] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:234:20: UP007 [*] Use `X | Y` for type annotations
    |
232 |         position_id: int,
233 |         current_price: Optional[float] = None,
234 |         stop_loss: Optional[float] = None,
    |                    ^^^^^^^^^^^^^^^ UP007
235 |         take_profit: Optional[float] = None,
236 |         status: Optional[Any] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:235:22: UP007 [*] Use `X | Y` for type annotations
    |
233 |         current_price: Optional[float] = None,
234 |         stop_loss: Optional[float] = None,
235 |         take_profit: Optional[float] = None,
    |                      ^^^^^^^^^^^^^^^ UP007
236 |         status: Optional[Any] = None,
237 |         notes: Optional[str] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:236:17: UP007 [*] Use `X | Y` for type annotations
    |
234 |         stop_loss: Optional[float] = None,
235 |         take_profit: Optional[float] = None,
236 |         status: Optional[Any] = None,
    |                 ^^^^^^^^^^^^^ UP007
237 |         notes: Optional[str] = None,
238 |         **kwargs: Any,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:237:16: UP007 [*] Use `X | Y` for type annotations
    |
235 |         take_profit: Optional[float] = None,
236 |         status: Optional[Any] = None,
237 |         notes: Optional[str] = None,
    |                ^^^^^^^^^^^^^ UP007
238 |         **kwargs: Any,
239 |     ):
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:272:21: UP007 [*] Use `X | Y` for type annotations
    |
270 |         self,
271 |         position_id: int,
272 |         exit_price: Optional[float] = None,
    |                     ^^^^^^^^^^^^^^^ UP007
273 |         exit_time: Optional[datetime] = None,
274 |         pnl: Optional[float] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:273:20: UP007 [*] Use `X | Y` for type annotations
    |
271 |         position_id: int,
272 |         exit_price: Optional[float] = None,
273 |         exit_time: Optional[datetime] = None,
    |                    ^^^^^^^^^^^^^^^^^^ UP007
274 |         pnl: Optional[float] = None,
275 |         exit_reason: Optional[str] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:274:14: UP007 [*] Use `X | Y` for type annotations
    |
272 |         exit_price: Optional[float] = None,
273 |         exit_time: Optional[datetime] = None,
274 |         pnl: Optional[float] = None,
    |              ^^^^^^^^^^^^^^^ UP007
275 |         exit_reason: Optional[str] = None,
276 |     ) -> bool:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:275:22: UP007 [*] Use `X | Y` for type annotations
    |
273 |         exit_time: Optional[datetime] = None,
274 |         pnl: Optional[float] = None,
275 |         exit_reason: Optional[str] = None,
    |                      ^^^^^^^^^^^^^ UP007
276 |     ) -> bool:
277 |         """Close a position"""
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:294:22: UP007 [*] Use `X | Y` for type annotations
    |
292 |         self,
293 |         event_type: EventType | str,
294 |         description: Optional[str] = None,
    |                      ^^^^^^^^^^^^^ UP007
295 |         metadata: Optional[dict] = None,
296 |         severity: str = "info",
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:295:19: UP007 [*] Use `X | Y` for type annotations
    |
293 |         event_type: EventType | str,
294 |         description: Optional[str] = None,
295 |         metadata: Optional[dict] = None,
    |                   ^^^^^^^^^^^^^^ UP007
296 |         severity: str = "info",
297 |         session_id: Optional[int] = None,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:297:21: UP007 [*] Use `X | Y` for type annotations
    |
295 |         metadata: Optional[dict] = None,
296 |         severity: str = "info",
297 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
298 |         **kwargs: Any,
299 |     ) -> int:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:325:23: UP007 [*] Use `X | Y` for type annotations
    |
323 |         margin_used: float = 0.0,
324 |         free_margin: float = 0.0,
325 |         margin_level: Optional[float] = None,
    |                       ^^^^^^^^^^^^^^^ UP007
326 |         unrealized_pnl: float = 0.0,
327 |         realized_pnl: float = 0.0,
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:328:21: UP007 [*] Use `X | Y` for type annotations
    |
326 |         unrealized_pnl: float = 0.0,
327 |         realized_pnl: float = 0.0,
328 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
329 |         **kwargs: Any,
330 |     ):
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:351:21: UP007 [*] Use `X | Y` for type annotations
    |
349 |         update_reason: str,
350 |         updated_by: str,
351 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
352 |         **kwargs: Any,
353 |     ) -> bool:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:363:47: UP007 [*] Use `X | Y` for type annotations
    |
361 |         return True
362 | 
363 |     def get_current_balance(self, session_id: Optional[int] = None) -> float:
    |                                               ^^^^^^^^^^^^^ UP007
364 |         sess = session_id or self._current_session_id
365 |         for snap in reversed(self._account_snapshots):
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:376:19: UP007 [*] Use `X | Y` for type annotations
    |
374 |         indicators: dict[str, Any],
375 |         market_conditions: dict[str, Any],
376 |         metadata: Optional[dict] = None,
    |                   ^^^^^^^^^^^^^^ UP007
377 |         session_id: Optional[int] = None,
378 |     ):
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:377:21: UP007 [*] Use `X | Y` for type annotations
    |
375 |         market_conditions: dict[str, Any],
376 |         metadata: Optional[dict] = None,
377 |         session_id: Optional[int] = None,
    |                     ^^^^^^^^^^^^^ UP007
378 |     ):
379 |         """Log strategy execution details"""
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:391:48: UP007 [*] Use `X | Y` for type annotations
    |
389 |         self._strategy_executions.append(execution)
390 | 
391 |     def get_active_positions(self, session_id: Optional[int] = None) -> list[dict]:
    |                                                ^^^^^^^^^^^^^ UP007
392 |         """Get all active positions"""
393 |         positions = []
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:400:63: UP007 [*] Use `X | Y` for type annotations
    |
398 |         return positions
399 | 
400 |     def get_recent_trades(self, limit: int = 100, session_id: Optional[int] = None) -> list[dict]:
    |                                                               ^^^^^^^^^^^^^ UP007
401 |         """Get recent trades"""
402 |         trades = []
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:411:51: UP007 [*] Use `X | Y` for type annotations
    |
409 |         return trades[:limit]
410 | 
411 |     def get_performance_metrics(self, session_id: Optional[int] = None) -> dict[str, Any]:
    |                                                   ^^^^^^^^^^^^^ UP007
412 |         """Get performance metrics"""
413 |         if session_id is None:
    |
    = help: Convert to `X | Y`

tests/mocks/mock_database.py:470:60: UP007 [*] Use `X | Y` for type annotations
    |
468 |         return MockSession()
469 | 
470 |     def set_database_manager(self, db_manager, session_id: Optional[int] = None):
    |                                                            ^^^^^^^^^^^^^ UP007
471 |         """Mock method for strategy compatibility"""
472 |         self._current_session_id = session_id
    |
    = help: Convert to `X | Y`

tests/performance/automated_performance_monitor.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / import subprocess
10 | | import sys
11 | | import time
12 | | import json
13 | | from datetime import datetime
14 | | from pathlib import Path
15 | | from typing import Dict, List, Any
16 | | 
17 | | from performance_baseline_manager import PerformanceBaselineManager, PerformanceRegressionDetector
18 | | 
19 | | 
20 | | class AutomatedPerformanceMonitor:
   | |_^ I001
21 |       """Automated performance monitoring system"""
   |
   = help: Organize imports

tests/performance/automated_performance_monitor.py:15:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
13 | from datetime import datetime
14 | from pathlib import Path
15 | from typing import Dict, List, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | from performance_baseline_manager import PerformanceBaselineManager, PerformanceRegressionDetector
   |

tests/performance/automated_performance_monitor.py:15:1: UP035 `typing.List` is deprecated, use `list` instead
   |
13 | from datetime import datetime
14 | from pathlib import Path
15 | from typing import Dict, List, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
16 | 
17 | from performance_baseline_manager import PerformanceBaselineManager, PerformanceRegressionDetector
   |

tests/performance/automated_performance_monitor.py:15:26: F401 [*] `typing.List` imported but unused
   |
13 | from datetime import datetime
14 | from pathlib import Path
15 | from typing import Dict, List, Any
   |                          ^^^^ F401
16 | 
17 | from performance_baseline_manager import PerformanceBaselineManager, PerformanceRegressionDetector
   |
   = help: Remove unused import: `typing.List`

tests/performance/automated_performance_monitor.py:31:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
29 |     def run_performance_tests(
30 |         self, test_pattern: str = "test_component_performance_regression.py"
31 |     ) -> Dict[str, Any]:
   |          ^^^^ UP006
32 |         """Run performance tests and collect results"""
33 |         print(f"🚀 Running performance tests: {test_pattern}")
   |
   = help: Replace with `dict`

tests/performance/automated_performance_monitor.py:78:74: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
76 |             }
77 | 
78 |     def parse_test_results(self, result: subprocess.CompletedProcess) -> Dict[str, int]:
   |                                                                          ^^^^ UP006
79 |         """Parse pytest results"""
80 |         output = result.stdout
   |
   = help: Replace with `dict`

tests/performance/automated_performance_monitor.py:94:56: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
92 |         }
93 | 
94 |     def extract_performance_data(self, output: str) -> Dict[str, float]:
   |                                                        ^^^^ UP006
95 |         """Extract performance measurements from test output"""
96 |         performance_data = {}
   |
   = help: Replace with `dict`

tests/performance/automated_performance_monitor.py:151:65: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
149 |         return performance_data
150 | 
151 |     def record_performance_measurements(self, performance_data: Dict[str, float]):
    |                                                                 ^^^^ UP006
152 |         """Record performance measurements in baseline manager"""
153 |         for test_name, value in performance_data.items():
    |
    = help: Replace with `dict`

tests/performance/automated_performance_monitor.py:168:42: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
166 |                 self.baseline_manager.record_measurement("memory_usage", value)
167 | 
168 |     def run_regression_analysis(self) -> Dict[str, Any]:
    |                                          ^^^^ UP006
169 |         """Run regression analysis and generate report"""
170 |         print("🔍 Running regression analysis...")
    |
    = help: Replace with `dict`

tests/performance/automated_performance_monitor.py:285:44: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
283 |         return str(dashboard_file)
284 | 
285 |     def run_full_monitoring_cycle(self) -> Dict[str, Any]:
    |                                            ^^^^ UP006
286 |         """Run complete monitoring cycle"""
287 |         print("🔄 Starting automated performance monitoring cycle...")
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / import json
 9 | | import statistics
10 | | from datetime import datetime, timedelta
11 | | from pathlib import Path
12 | | from typing import Dict, List, Any, Optional
13 | | import pandas as pd
14 | | 
15 | | 
16 | | class PerformanceBaselineManager:
   | |_^ I001
17 |       """Manage performance baselines and regression detection"""
   |
   = help: Organize imports

tests/performance/performance_baseline_manager.py:12:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Dict, List, Any, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | import pandas as pd
   |

tests/performance/performance_baseline_manager.py:12:1: UP035 `typing.List` is deprecated, use `list` instead
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Dict, List, Any, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
13 | import pandas as pd
   |

tests/performance/performance_baseline_manager.py:12:26: F401 [*] `typing.List` imported but unused
   |
10 | from datetime import datetime, timedelta
11 | from pathlib import Path
12 | from typing import Dict, List, Any, Optional
   |                          ^^^^ F401
13 | import pandas as pd
   |
   = help: Remove unused import: `typing.List`

tests/performance/performance_baseline_manager.py:23:33: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
21 |         self.baselines = self.load_baselines()
22 | 
23 |     def load_baselines(self) -> Dict[str, Any]:
   |                                 ^^^^ UP006
24 |         """Load existing baselines from file"""
25 |         if self.baseline_file.exists():
   |
   = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:27:22: UP015 [*] Unnecessary open mode parameters
   |
25 |         if self.baseline_file.exists():
26 |             try:
27 |                 with open(self.baseline_file, "r") as f:
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP015
28 |                     return json.load(f)
29 |             except (OSError, json.JSONDecodeError):
   |
   = help: Remove open mode parameters

tests/performance/performance_baseline_manager.py:34:43: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
32 |         return self.create_default_baselines()
33 | 
34 |     def create_default_baselines(self) -> Dict[str, Any]:
   |                                           ^^^^ UP006
35 |         """Create default baseline structure"""
36 |         return {
   |
   = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:106:55: UP007 [*] Use `X | Y` for type annotations
    |
105 |     def record_measurement(
106 |         self, test_name: str, value: float, metadata: Optional[Dict[str, Any]] = None
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ UP007
107 |     ):
108 |         """Record a performance measurement"""
    |
    = help: Convert to `X | Y`

tests/performance/performance_baseline_manager.py:106:64: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
105 |     def record_measurement(
106 |         self, test_name: str, value: float, metadata: Optional[Dict[str, Any]] = None
    |                                                                ^^^^ UP006
107 |     ):
108 |         """Record a performance measurement"""
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:185:66: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
183 |             baseline["trend"] = "stable"
184 | 
185 |     def check_performance(self, test_name: str, value: float) -> Dict[str, Any]:
    |                                                                  ^^^^ UP006
186 |         """Check performance against baseline"""
187 |         if test_name not in self.baselines["baselines"]:
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:238:73: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
236 |         }
237 | 
238 |     def check_regression(self, test_name: str, current_value: float) -> Dict[str, Any]:
    |                                                                         ^^^^ UP006
239 |         """Check for performance regression"""
240 |         if test_name not in self.baselines["baselines"]:
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:287:41: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
285 |             }
286 | 
287 |     def get_performance_report(self) -> Dict[str, Any]:
    |                                         ^^^^ UP006
288 |         """Generate comprehensive performance report"""
289 |         report = {
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:364:13: B007 Loop control variable `test_name` not used within loop body
    |
362 |         cleaned_count = 0
363 | 
364 |         for test_name, baseline in self.baselines["baselines"].items():
    |             ^^^^^^^^^ B007
365 |             original_count = len(baseline["samples"])
    |
    = help: Rename unused `test_name` to `_test_name`

tests/performance/performance_baseline_manager.py:384:42: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
382 |         self.baseline_manager = baseline_manager
383 | 
384 |     def run_regression_analysis(self) -> Dict[str, Any]:
    |                                          ^^^^ UP006
385 |         """Run comprehensive regression analysis"""
386 |         analysis = {
    |
    = help: Replace with `dict`

tests/performance/performance_baseline_manager.py:443:52: UP006 [*] Use `dict` instead of `Dict` for type annotation
    |
441 |         return analysis
442 | 
443 |     def generate_regression_report(self, analysis: Dict[str, Any]) -> str:
    |                                                    ^^^^ UP006
444 |         """Generate human-readable regression report"""
445 |         report = []
    |
    = help: Replace with `dict`

tests/performance/test_component_performance_regression.py:8:1: I001 [*] Import block is un-sorted or un-formatted
   |
 6 |   """
 7 |   
 8 | / import pytest
 9 | | import pandas as pd
10 | | import numpy as np
11 | | import time
12 | | import statistics
13 | | from datetime import datetime
14 | | from typing import Dict, List, Any
15 | | 
16 | | from src.strategies.components.strategy import Strategy
17 | | from src.strategies.components.signal_generator import WeightedVotingSignalGenerator
18 | | from src.strategies.components.technical_signal_generator import TechnicalSignalGenerator
19 | | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
20 | | from src.strategies.components.risk_manager import (
21 | |     FixedRiskManager,
22 | |     VolatilityRiskManager,
23 | |     RegimeAdaptiveRiskManager,
24 | | )
25 | | from src.strategies.components.position_sizer import (
26 | |     ConfidenceWeightedSizer,
27 | |     KellySizer,
28 | |     RegimeAdaptiveSizer,
29 | | )
30 | | 
31 | | 
32 | | pytestmark = pytest.mark.performance
   | |_^ I001
   |
   = help: Organize imports

tests/performance/test_component_performance_regression.py:13:22: F401 [*] `datetime.datetime` imported but unused
   |
11 | import time
12 | import statistics
13 | from datetime import datetime
   |                      ^^^^^^^^ F401
14 | from typing import Dict, List, Any
   |
   = help: Remove unused import: `datetime.datetime`

tests/performance/test_component_performance_regression.py:14:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
12 | import statistics
13 | from datetime import datetime
14 | from typing import Dict, List, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | from src.strategies.components.strategy import Strategy
   |

tests/performance/test_component_performance_regression.py:14:1: UP035 `typing.List` is deprecated, use `list` instead
   |
12 | import statistics
13 | from datetime import datetime
14 | from typing import Dict, List, Any
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
15 | 
16 | from src.strategies.components.strategy import Strategy
   |

tests/performance/test_component_performance_regression.py:14:26: F401 [*] `typing.List` imported but unused
   |
12 | import statistics
13 | from datetime import datetime
14 | from typing import Dict, List, Any
   |                          ^^^^ F401
15 | 
16 | from src.strategies.components.strategy import Strategy
   |
   = help: Remove unused import: `typing.List`

tests/performance/test_component_performance_regression.py:17:56: F401 [*] `src.strategies.components.signal_generator.WeightedVotingSignalGenerator` imported but unused
   |
16 | from src.strategies.components.strategy import Strategy
17 | from src.strategies.components.signal_generator import WeightedVotingSignalGenerator
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ F401
18 | from src.strategies.components.technical_signal_generator import TechnicalSignalGenerator
19 | from src.strategies.components.ml_signal_generator import MLBasicSignalGenerator
   |
   = help: Remove unused import: `src.strategies.components.signal_generator.WeightedVotingSignalGenerator`

tests/performance/test_component_performance_regression.py:53:10: UP006 [*] Use `dict` instead of `Dict` for type annotation
   |
51 |     def check_performance(
52 |         self, test_name: str, actual_value: float, metric_type: str = "ms"
53 |     ) -> Dict[str, Any]:
   |          ^^^^ UP006
54 |         """Check if performance meets baseline requirements"""
55 |         if test_name not in self.baselines:
   |
   = help: Replace with `dict`

tests/performance/test_component_performance_regression.py:344:1: I001 [*] Import block is un-sorted or un-formatted
    |
342 |       def test_memory_usage_performance(self):
343 |           """Test memory usage performance"""
344 | /         import psutil
345 | |         import os
346 | | 
    | |_^ I001
347 |           process = psutil.Process(os.getpid())
    |
    = help: Organize imports

tests/performance/test_component_performance_regression.py:445:1: I001 [*] Import block is un-sorted or un-formatted
    |
443 |       def test_concurrent_strategy_performance(self):
444 |           """Test performance with multiple concurrent strategies"""
445 | /         import threading
446 | |         import queue
447 | | 
    | |_^ I001
448 |           strategies = [
449 |               Strategy(
    |
    = help: Organize imports

tests/performance/test_component_performance_regression.py:533:1: I001 [*] Import block is un-sorted or un-formatted
    |
531 |       def test_memory_stability_under_load(self):
532 |           """Test memory stability during extended processing"""
533 | /         import psutil
534 | |         import os
535 | | 
    | |_^ I001
536 |           process = psutil.Process(os.getpid())
    |
    = help: Organize imports

tests/strategies/components/test_component_testing_framework.py:9:1: I001 [*] Import block is un-sorted or un-formatted
   |
 7 |   """
 8 |   
 9 | / import pytest
10 | | import numpy as np
11 | | import pandas as pd
12 | | from datetime import datetime, timedelta
13 | | 
14 | | from src.strategies.components.testing import (
15 | |     ComponentPerformanceTester,
16 | |     RegimeTester,
17 | |     PerformanceAttributionAnalyzer,
18 | |     TestDatasetGenerator,
19 | |     MarketScenario,
20 | | )
21 | | from src.strategies.components.signal_generator import (
22 | |     HoldSignalGenerator,
23 | |     RandomSignalGenerator,
24 | |     SignalDirection,
25 | | )
26 | | from src.strategies.components.risk_manager import FixedRiskManager
27 | | from src.strategies.components.position_sizer import FixedFractionSizer
28 | | 
29 | | 
30 | | @pytest.fixture
   | |_^ I001
31 |   def sample_test_data():
32 |       """Create sample test data for testing"""
   |
   = help: Organize imports

tests/strategies/components/test_component_testing_framework.py:12:22: F401 [*] `datetime.datetime` imported but unused
   |
10 | import numpy as np
11 | import pandas as pd
12 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
13 | 
14 | from src.strategies.components.testing import (
   |
   = help: Remove unused import

tests/strategies/components/test_component_testing_framework.py:12:32: F401 [*] `datetime.timedelta` imported but unused
   |
10 | import numpy as np
11 | import pandas as pd
12 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
13 | 
14 | from src.strategies.components.testing import (
   |
   = help: Remove unused import

tests/strategies/components/test_component_testing_framework.py:24:5: F401 [*] `src.strategies.components.signal_generator.SignalDirection` imported but unused
   |
22 |     HoldSignalGenerator,
23 |     RandomSignalGenerator,
24 |     SignalDirection,
   |     ^^^^^^^^^^^^^^^ F401
25 | )
26 | from src.strategies.components.risk_manager import FixedRiskManager
   |
   = help: Remove unused import: `src.strategies.components.signal_generator.SignalDirection`

tests/strategies/components/test_component_testing_framework.py:215:13: B007 Loop control variable `regime_type` not used within loop body
    |
213 |         assert len(regime_datasets) > 0
214 | 
215 |         for regime_type, dataset in regime_datasets.items():
    |             ^^^^^^^^^^^ B007
216 |             assert len(dataset) > 0
217 |             assert "regime_confidence" in dataset.columns
    |
    = help: Rename unused `regime_type` to `_regime_type`

tests/strategies/components/test_component_testing_framework.py:229:13: B007 Loop control variable `regime_type` not used within loop body
    |
227 |         assert len(stats) > 0
228 | 
229 |         for regime_type, regime_stats in stats.items():
    |             ^^^^^^^^^^^ B007
230 |             assert "periods" in regime_stats
231 |             assert "coverage" in regime_stats
    |
    = help: Rename unused `regime_type` to `_regime_type`

tests/strategies/components/test_component_testing_framework.py:390:13: B007 Loop control variable `name` not used within loop body
    |
389 |         # All datasets should be valid
390 |         for name, dataset in test_suite.items():
    |             ^^^^ B007
391 |             assert len(dataset) > 0
392 |             assert "close" in dataset.columns
    |
    = help: Rename unused `name` to `_name`

tests/strategies/components/test_component_testing_framework.py:463:5: F841 Local variable `attribution_analyzer` is assigned to but never used
    |
461 |     regime_data = dataset_generator.generate_synthetic_dataset("strong_bull_low_vol", seed=42)
462 |     regime_tester = RegimeTester(regime_data)
463 |     attribution_analyzer = PerformanceAttributionAnalyzer(sample_test_data)
    |     ^^^^^^^^^^^^^^^^^^^^ F841
464 | 
465 |     # Create components to test
    |
    = help: Remove assignment to unused variable `attribution_analyzer`

tests/strategies/components/test_ml_signal_generator.py:103:9: F841 Local variable `signal` is assigned to but never used
    |
102 |         # Generate signal - this should trigger lazy initialization
103 |         signal = generator.generate_signal(df, 150)
    |         ^^^^^^ F841
104 | 
105 |         # Now session should be initialized
    |
    = help: Remove assignment to unused variable `signal`

tests/strategies/components/test_performance_tracker.py:400:13: B007 Loop control variable `i` not used within loop body
    |
399 |         # Add different trades to second tracker (modify PnL)
400 |         for i, trade in enumerate(sample_trades[5:]):
    |             ^ B007
401 |             modified_trade = TradeResult(
402 |                 timestamp=trade.timestamp,
    |
    = help: Rename unused `i` to `_i`

tests/strategies/components/test_regime_context.py:451:9: F841 Local variable `regime` is assigned to but never used
    |
450 |         # Detect regime at a specific index
451 |         regime = detector.detect_regime(df, 49)
    |         ^^^^^^ F841
452 | 
453 |         # Check if the detected regime has sufficient duration
    |
    = help: Remove assignment to unused variable `regime`

tests/strategies/components/test_regime_context.py:519:9: F841 Local variable `regime1` is assigned to but never used
    |
518 |         # Detect regime multiple times
519 |         regime1 = detector.detect_regime(df, 30)
    |         ^^^^^^^ F841
520 |         regime2 = detector.detect_regime(df, 31)
    |
    = help: Remove assignment to unused variable `regime1`

tests/strategies/components/test_regime_context.py:520:9: F841 Local variable `regime2` is assigned to but never used
    |
518 |         # Detect regime multiple times
519 |         regime1 = detector.detect_regime(df, 30)
520 |         regime2 = detector.detect_regime(df, 31)
    |         ^^^^^^^ F841
521 | 
522 |         # Should have history
    |
    = help: Remove assignment to unused variable `regime2`

tests/strategies/components/test_regime_tester.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import pytest
 6 | | import pandas as pd
 7 | | import numpy as np
 8 | | from unittest.mock import Mock, patch
 9 | | 
10 | | from src.strategies.components.testing.regime_tester import RegimeTester
11 | | from src.strategies.components.regime_context import RegimeContext
12 | | from src.regime.detector import TrendLabel, VolLabel
13 | | 
14 | | 
15 | | class TestRegimeTesterVolatilityParsing:
   | |_^ I001
16 |       """Test RegimeTester volatility parsing fix"""
   |
   = help: Organize imports

tests/strategies/components/test_regime_tester.py:5:8: F401 [*] `pytest` imported but unused
  |
3 | """
4 | 
5 | import pytest
  |        ^^^^^^ F401
6 | import pandas as pd
7 | import numpy as np
  |
  = help: Remove unused import: `pytest`

tests/strategies/components/test_regime_tester.py:8:27: F401 [*] `unittest.mock.Mock` imported but unused
   |
 6 | import pandas as pd
 7 | import numpy as np
 8 | from unittest.mock import Mock, patch
   |                           ^^^^ F401
 9 | 
10 | from src.strategies.components.testing.regime_tester import RegimeTester
   |
   = help: Remove unused import: `unittest.mock.Mock`

tests/strategies/components/test_regime_tester.py:11:54: F401 [*] `src.strategies.components.regime_context.RegimeContext` imported but unused
   |
10 | from src.strategies.components.testing.regime_tester import RegimeTester
11 | from src.strategies.components.regime_context import RegimeContext
   |                                                      ^^^^^^^^^^^^^ F401
12 | from src.regime.detector import TrendLabel, VolLabel
   |
   = help: Remove unused import: `src.strategies.components.regime_context.RegimeContext`

tests/strategies/components/test_regime_tester.py:72:9: F841 Local variable `tester` is assigned to but never used
   |
70 |     def test_regime_string_parsing_with_vol_suffix(self):
71 |         """Test that regime string parsing correctly handles _vol suffix"""
72 |         tester = RegimeTester(self.create_test_data())
   |         ^^^^^^ F841
73 | 
74 |         # Test the fixed parsing logic directly
   |
   = help: Remove assignment to unused variable `tester`

tests/strategies/components/test_regime_tester.py:110:9: F841 Local variable `tester` is assigned to but never used
    |
108 |     def test_regime_string_parsing_legacy_format(self):
109 |         """Test that regime string parsing handles legacy format without _vol suffix"""
110 |         tester = RegimeTester(self.create_test_data())
    |         ^^^^^^ F841
111 | 
112 |         # Test legacy format (should still work)
    |
    = help: Remove assignment to unused variable `tester`

tests/strategies/components/test_regime_tester.py:142:9: F841 Local variable `tester` is assigned to but never used
    |
140 |     def test_regime_string_parsing_edge_cases(self):
141 |         """Test regime string parsing with edge cases"""
142 |         tester = RegimeTester(self.create_test_data())
    |         ^^^^^^ F841
143 | 
144 |         # Test edge cases
    |
    = help: Remove assignment to unused variable `tester`

tests/strategies/components/test_regime_tester.py:175:9: F841 Local variable `tester` is assigned to but never used
    |
173 |     def test_regime_string_parsing_with_logging(self, mock_logger):
174 |         """Test that regime string parsing logs warnings for unexpected formats"""
175 |         tester = RegimeTester(self.create_test_data())
    |         ^^^^^^ F841
176 | 
177 |         # Test with unexpected format
    |
    = help: Remove assignment to unused variable `tester`

tests/strategies/components/test_signal_generator.py:662:36: F821 Undefined name `name`
    |
661 |             def generate_signal(self, df, index, regime=None):
662 |                 raise Exception(f"{name} failed")
    |                                    ^^^^ F821
663 | 
664 |             def get_confidence(self, df, index):
    |

tests/strategies/components/test_signal_generator.py:877:36: F821 Undefined name `name`
    |
876 |             def generate_signal(self, df, index, regime=None):
877 |                 raise Exception(f"{name} failed")
    |                                    ^^^^ F821
878 | 
879 |             def get_confidence(self, df, index):
    |

tests/strategies/components/test_strategy_lineage.py:95:16: E712 Avoid equality comparisons to `True`; use `if branch.active:` for truth checks
   |
93 |         assert branch.branch_id == "branch_123"
94 |         assert branch.branch_name == "experimental_features"
95 |         assert branch.active == True
   |                ^^^^^^^^^^^^^^^^^^^^^ E712
96 |         assert len(branch.strategies) == 2
   |
   = help: Replace with `branch.active`

tests/strategies/components/test_strategy_lineage.py:116:16: E712 Avoid equality comparisons to `False`; use `if not branch_dict["active"]:` for false checks
    |
114 |         assert branch_dict["branch_name"] == "performance_optimization"
115 |         assert branch_dict["created_at"] == timestamp.isoformat()
116 |         assert branch_dict["active"] == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
117 | 
118 |         # Test deserialization
    |
    = help: Replace with `not branch_dict["active"]`

tests/strategies/components/test_strategy_lineage.py:250:16: E712 Avoid equality comparisons to `True`; use `if branch.active:` for truth checks
    |
248 |         assert branch.branch_name == "experimental"
249 |         assert branch.parent_strategy_id == "parent_001"
250 |         assert branch.active == True
    |                ^^^^^^^^^^^^^^^^^^^^^ E712
251 |         assert "parent_001" in branch.strategies
    |
    = help: Replace with `branch.active`

tests/strategies/components/test_strategy_lineage.py:613:9: F841 Local variable `merge_id` is assigned to but never used
    |
612 |         # Merge experimental into main
613 |         merge_id = tracker.merge_strategies("main_v2", ["exp_v2"], "best_performance")
    |         ^^^^^^^^ F841
614 | 
615 |         # Verify complex structure
    |
    = help: Remove assignment to unused variable `merge_id`

tests/strategies/components/test_strategy_manager.py:364:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
363 |         # Check that values are numeric (performance metrics)
364 |         assert isinstance(comparison[version1], (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
365 |         assert isinstance(comparison[version2], (int, float))
    |
    = help: Convert to `X | Y`

tests/strategies/components/test_strategy_manager.py:365:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
363 |         # Check that values are numeric (performance metrics)
364 |         assert isinstance(comparison[version1], (int, float))
365 |         assert isinstance(comparison[version2], (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
366 | 
367 |     def test_compare_strategies_insufficient_data(self, manager):
    |
    = help: Convert to `X | Y`

tests/strategies/components/test_technical_signal_generator.py:499:16: E712 Avoid equality comparisons to `True`; use `if signal.metadata["crossover_detected"]:` for truth checks
    |
497 |         assert signal.strength > 0.0
498 |         assert signal.confidence > 0.0
499 |         assert signal.metadata["crossover_detected"] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
500 |         assert signal.metadata["macd_value"] == 0.1
501 |         assert signal.metadata["macd_signal_value"] == 0.0
    |
    = help: Replace with `signal.metadata["crossover_detected"]`

tests/strategies/components/test_technical_signal_generator.py:520:16: E712 Avoid equality comparisons to `True`; use `if signal.metadata["crossover_detected"]:` for truth checks
    |
518 |         assert signal.strength > 0.0
519 |         assert signal.confidence > 0.0
520 |         assert signal.metadata["crossover_detected"] == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
521 | 
522 |     def test_generate_signal_no_crossover(self):
    |
    = help: Replace with `signal.metadata["crossover_detected"]`

tests/strategies/components/test_technical_signal_generator.py:538:16: E712 Avoid equality comparisons to `False`; use `if not signal.metadata["crossover_detected"]:` for false checks
    |
536 |         assert signal.direction == SignalDirection.HOLD
537 |         assert signal.strength == 0.0
538 |         assert signal.metadata["crossover_detected"] == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
539 | 
540 |     def test_confidence_based_on_histogram(self):
    |
    = help: Replace with `not signal.metadata["crossover_detected"]`

tests/unit/backtesting/test_returns_calculations.py:1:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 | / from datetime import datetime
 2 | | from typing import Optional
 3 | | 
 4 | | import numpy as np
 5 | | import pandas as pd
 6 | | import pytest
 7 | | 
 8 | | from src.backtesting.engine import Backtester
 9 | | from src.data_providers.data_provider import DataProvider
10 | | from src.strategies.components import (
11 | |     Signal,
12 | |     SignalDirection,
13 | |     SignalGenerator,
14 | |     Strategy,
15 | |     EnhancedRegimeDetector,
16 | | )
17 | | from src.strategies.components.risk_manager import RiskManager
18 | | from src.strategies.components.position_sizer import PositionSizer
19 | | 
20 | | pytestmark = pytest.mark.unit
   | |_^ I001
   |
   = help: Organize imports

tests/unit/backtesting/test_returns_calculations.py:29:66: UP007 [*] Use `X | Y` for type annotations
   |
28 |     def get_historical_data(
29 |         self, symbol: str, timeframe: str, start: datetime, end: Optional[datetime] = None
   |                                                                  ^^^^^^^^^^^^^^^^^^ UP007
30 |     ):
31 |         return self._df.copy()
   |
   = help: Convert to `X | Y`

tests/unit/data_providers/test_feargreed_provider.py:13:43: UP017 [*] Use `datetime.UTC` alias
   |
11 | def sample_api_payload():
12 |     # Two days of data
13 |     now = int(datetime(2024, 6, 2, tzinfo=timezone.utc).timestamp())
   |                                           ^^^^^^^^^^^^ UP017
14 |     prev = int(datetime(2024, 6, 1, tzinfo=timezone.utc).timestamp())
15 |     return {
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/data_providers/test_feargreed_provider.py:14:44: UP017 [*] Use `datetime.UTC` alias
   |
12 |     # Two days of data
13 |     now = int(datetime(2024, 6, 2, tzinfo=timezone.utc).timestamp())
14 |     prev = int(datetime(2024, 6, 1, tzinfo=timezone.utc).timestamp())
   |                                            ^^^^^^^^^^^^ UP017
15 |     return {
16 |         "name": "Fear and Greed Index",
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/data_providers/test_feargreed_provider.py:57:41: UP017 [*] Use `datetime.UTC` alias
   |
56 |     prov = FearGreedProvider()
57 |     start = datetime(2024, 6, 1, tzinfo=timezone.utc)
   |                                         ^^^^^^^^^^^^ UP017
58 |     end = datetime(2024, 6, 3, tzinfo=timezone.utc)
59 |     df = prov.get_historical_sentiment("BTCUSDT", start, end)
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/data_providers/test_feargreed_provider.py:58:39: UP017 [*] Use `datetime.UTC` alias
   |
56 |     prov = FearGreedProvider()
57 |     start = datetime(2024, 6, 1, tzinfo=timezone.utc)
58 |     end = datetime(2024, 6, 3, tzinfo=timezone.utc)
   |                                       ^^^^^^^^^^^^ UP017
59 |     df = prov.get_historical_sentiment("BTCUSDT", start, end)
60 |     assert not df.empty
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/live/test_close_position_parity.py:1:1: I001 [*] Import block is un-sorted or un-formatted
   |
 1 | / from datetime import datetime
 2 | | from unittest.mock import Mock
 3 | | 
 4 | | import pytest
 5 | | 
 6 | | from src.live.trading_engine import LiveTradingEngine, Position, PositionSide
 7 | | from src.strategies.components import (
 8 | |     FixedFractionSizer,
 9 | |     FixedRiskManager,
10 | |     HoldSignalGenerator,
11 | |     Strategy,
12 | |     StrategyRuntime,
13 | | )
14 | | from src.performance.metrics import Side, cash_pnl, pnl_percent
15 | | 
16 | | 
17 | | @pytest.mark.parametrize(
   | |_^ I001
18 |       "side, fraction, entry_price, exit_price",
19 |       [
   |
   = help: Organize imports

tests/unit/position_management/test_strategy_overrides.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / from unittest.mock import Mock
 6 | | 
 7 | | import pandas as pd
 8 | | 
 9 | | from src.backtesting.engine import Backtester
10 | | from src.live.trading_engine import LiveTradingEngine
11 | | from src.position_management.dynamic_risk import DynamicRiskConfig
12 | | from src.strategies.components import (
13 | |     Strategy,
14 | |     MLBasicSignalGenerator,
15 | |     FixedRiskManager,
16 | |     ConfidenceWeightedSizer,
17 | | )
18 | | 
19 | | 
20 | | def create_mock_strategy_with_overrides(name="test_strategy", overrides=None):
   | |_^ I001
21 |       """Create a mock strategy with risk overrides for testing"""
22 |       signal_generator = MLBasicSignalGenerator()
   |
   = help: Organize imports

tests/unit/position_management/test_strategy_overrides.py:7:18: F401 [*] `pandas` imported but unused
  |
5 | from unittest.mock import Mock
6 | 
7 | import pandas as pd
  |                  ^^ F401
8 | 
9 | from src.backtesting.engine import Backtester
  |
  = help: Remove unused import: `pandas`

tests/unit/predictions/test_engine_utilities.py:150:36: UP017 [*] Use `datetime.UTC` alias
    |
148 |             direction=1,
149 |             model_name="test",
150 |             timestamp=datetime.now(timezone.utc),
    |                                    ^^^^^^^^^^^^ UP017
151 |             inference_time=0.1,
152 |             features_used=10,
    |
    = help: Convert to `datetime.UTC` alias

tests/unit/predictions/test_features.py:50:50: B905 [*] `zip()` without an explicit `strict=` parameter
   |
48 |             {
49 |                 "open": prices,
50 |                 "high": [p * (1 + h) for p, h in zip(prices, high_offset)],
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^ B905
51 |                 "low": [p * (1 + low_delta) for p, low_delta in zip(prices, low_offset)],
52 |                 "close": prices,
   |
   = help: Add explicit `strict=False`

tests/unit/predictions/test_features.py:51:65: B905 [*] `zip()` without an explicit `strict=` parameter
   |
49 |                 "open": prices,
50 |                 "high": [p * (1 + h) for p, h in zip(prices, high_offset)],
51 |                 "low": [p * (1 + low_delta) for p, low_delta in zip(prices, low_offset)],
   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^ B905
52 |                 "close": prices,
53 |                 "volume": volume,
   |
   = help: Add explicit `strict=False`

tests/unit/predictions/test_features.py:415:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
413 |             # Check value constraints
414 |             if feature_def.min_value is not None:
415 |                 assert isinstance(feature_def.min_value, (int, float))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
416 |             if feature_def.max_value is not None:
417 |                 assert isinstance(feature_def.max_value, (int, float))
    |
    = help: Convert to `X | Y`

tests/unit/predictions/test_features.py:417:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
415 |                 assert isinstance(feature_def.min_value, (int, float))
416 |             if feature_def.max_value is not None:
417 |                 assert isinstance(feature_def.max_value, (int, float))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
418 |             if feature_def.default_value is not None:
419 |                 assert isinstance(feature_def.default_value, (int, float))
    |
    = help: Convert to `X | Y`

tests/unit/predictions/test_features.py:419:24: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
417 |                 assert isinstance(feature_def.max_value, (int, float))
418 |             if feature_def.default_value is not None:
419 |                 assert isinstance(feature_def.default_value, (int, float))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
    |
    = help: Convert to `X | Y`

tests/unit/predictions/test_prediction_result.py:13:34: UP017 [*] Use `datetime.UTC` alias
   |
11 |     def test_prediction_result_creation(self):
12 |         """Test creating a PredictionResult"""
13 |         timestamp = datetime.now(timezone.utc)
   |                                  ^^^^^^^^^^^^ UP017
14 |         result = PredictionResult(
15 |             price=100.5,
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/predictions/test_prediction_result.py:42:36: UP017 [*] Use `datetime.UTC` alias
   |
40 |             direction=0,
41 |             model_name="test_model",
42 |             timestamp=datetime.now(timezone.utc),
   |                                    ^^^^^^^^^^^^ UP017
43 |             inference_time=0.1,
44 |             features_used=0,
   |
   = help: Convert to `datetime.UTC` alias

tests/unit/predictions/test_smoke.py:51:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
49 |     # Either successful prediction or an informative error without crashing
50 |     if result.error is None:
51 |         assert isinstance(result.price, (int, float))
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
52 |         assert isinstance(result.confidence, (int, float))
53 |         assert result.direction in [-1, 0, 1]
   |
   = help: Convert to `X | Y`

tests/unit/predictions/test_smoke.py:52:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
   |
50 |     if result.error is None:
51 |         assert isinstance(result.price, (int, float))
52 |         assert isinstance(result.confidence, (int, float))
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
53 |         assert result.direction in [-1, 0, 1]
54 |     else:
   |
   = help: Convert to `X | Y`

tests/unit/regime/test_regime_detector.py:103:10: UP007 [*] Use `X | Y` for type annotations
    |
101 |     noise=0.0,
102 |     start=30000.0,
103 |     rng: Optional[np.random.Generator] = None,
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP007
104 | ):
105 |     """Create a synthetic trend series with optional noise.
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_performance_comparison_engine.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import numpy as np
 6 | | import pandas as pd
 7 | | import pytest
 8 | | from datetime import datetime
 9 | | from unittest.mock import Mock, patch
10 | | 
11 | | from src.strategies.components.testing.performance_comparison_engine import (
12 | |     ComparisonConfig,
13 | |     PerformanceComparisonEngine,
14 | |     StrategyComparisonResult,
15 | |     quick_strategy_comparison,
16 | |     validate_migration_readiness,
17 | | )
18 | | from src.strategies.components.testing.performance_parity_validator import (
19 | |     ToleranceConfig,
20 | |     ValidationResult,
21 | | )
22 | | 
23 | | 
24 | | class TestComparisonConfig:
   | |_^ I001
25 |       """Test ComparisonConfig dataclass."""
   |
   = help: Organize imports

tests/unit/strategies/components/test_performance_comparison_engine.py:36:16: E712 Avoid equality comparisons to `True`; use `if config.generate_detailed_report:` for truth checks
   |
34 |         assert config.initial_balance == 10000.0
35 |         assert config.commission_rate == 0.001
36 |         assert config.generate_detailed_report == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
37 |         assert config.export_results == True
38 |         assert config.export_directory is None
   |
   = help: Replace with `config.generate_detailed_report`

tests/unit/strategies/components/test_performance_comparison_engine.py:37:16: E712 Avoid equality comparisons to `True`; use `if config.export_results:` for truth checks
   |
35 |         assert config.commission_rate == 0.001
36 |         assert config.generate_detailed_report == True
37 |         assert config.export_results == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
38 |         assert config.export_directory is None
39 |         assert config.require_statistical_equivalence == True
   |
   = help: Replace with `config.export_results`

tests/unit/strategies/components/test_performance_comparison_engine.py:39:16: E712 Avoid equality comparisons to `True`; use `if config.require_statistical_equivalence:` for truth checks
   |
37 |         assert config.export_results == True
38 |         assert config.export_directory is None
39 |         assert config.require_statistical_equivalence == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
40 |         assert config.require_performance_parity == True
41 |         assert config.minimum_correlation_threshold == 0.95
   |
   = help: Replace with `config.require_statistical_equivalence`

tests/unit/strategies/components/test_performance_comparison_engine.py:40:16: E712 Avoid equality comparisons to `True`; use `if config.require_performance_parity:` for truth checks
   |
38 |         assert config.export_directory is None
39 |         assert config.require_statistical_equivalence == True
40 |         assert config.require_performance_parity == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
41 |         assert config.minimum_correlation_threshold == 0.95
   |
   = help: Replace with `config.require_performance_parity`

tests/unit/strategies/components/test_performance_comparison_engine.py:59:16: E712 Avoid equality comparisons to `False`; use `if not config.export_results:` for false checks
   |
57 |         assert config.equivalence_margin == 0.02
58 |         assert config.initial_balance == 50000.0
59 |         assert config.export_results == False
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
   |
   = help: Replace with `not config.export_results`

tests/unit/strategies/components/test_performance_comparison_engine.py:339:1: I001 [*] Import block is un-sorted or un-formatted
    |
337 |       def test_assess_overall_result_pass(self, mock_backtest_engine):
338 |           """Test overall result assessment for passing case."""
339 | /         from src.strategies.components.testing.performance_parity_validator import (
340 | |             PerformanceComparisonReport,
341 | |             MetricComparison,
342 | |             MetricType,
343 | |         )
344 | |         from src.strategies.components.testing.statistical_tests import StatisticalTestResult
345 | | 
    | |_^ I001
346 |           engine = PerformanceComparisonEngine(backtest_engine=mock_backtest_engine)
    |
    = help: Organize imports

tests/unit/strategies/components/test_performance_comparison_engine.py:401:1: I001 [*] Import block is un-sorted or un-formatted
    |
399 |       def test_assess_overall_result_fail(self, mock_backtest_engine):
400 |           """Test overall result assessment for failing case."""
401 | /         from src.strategies.components.testing.performance_parity_validator import (
402 | |             PerformanceComparisonReport,
403 | |             MetricComparison,
404 | |             MetricType,
405 | |         )
406 | | 
    | |_^ I001
407 |           engine = PerformanceComparisonEngine(backtest_engine=mock_backtest_engine)
    |
    = help: Organize imports

tests/unit/strategies/components/test_performance_comparison_engine.py:496:1: I001 [*] Import block is un-sorted or un-formatted
    |
494 |       def test_generate_text_report(self, mock_backtest_engine):
495 |           """Test text report generation."""
496 | /         from src.strategies.components.testing.performance_parity_validator import (
497 | |             PerformanceComparisonReport,
498 | |             MetricComparison,
499 | |             MetricType,
500 | |         )
501 | |         from src.strategies.components.testing.statistical_tests import StatisticalTestResult
502 | | 
    | |_^ I001
503 |           engine = PerformanceComparisonEngine(backtest_engine=mock_backtest_engine)
    |
    = help: Organize imports

tests/unit/strategies/components/test_performance_comparison_engine.py:688:16: E712 Avoid equality comparisons to `True`; use `if is_ready:` for truth checks
    |
686 |         )
687 | 
688 |         assert is_ready == True
    |                ^^^^^^^^^^^^^^^^ E712
689 |         assert len(issues) == 0
    |
    = help: Replace with `is_ready`

tests/unit/strategies/components/test_performance_comparison_engine.py:730:16: E712 Avoid equality comparisons to `False`; use `if not is_ready:` for false checks
    |
728 |         )
729 | 
730 |         assert is_ready == False
    |                ^^^^^^^^^^^^^^^^^ E712
731 |         assert len(issues) > 0
732 |         assert any("Fix performance issues" in issue for issue in issues)
    |
    = help: Replace with `not is_ready`

tests/unit/strategies/components/test_performance_comparison_engine.py:757:16: E712 Avoid equality comparisons to `True`; use `if is_ready:` for truth checks
    |
755 |         )
756 | 
757 |         assert is_ready == True  # WARNING is acceptable for lenient validation
    |                ^^^^^^^^^^^^^^^^ E712
758 | 
759 |         # Check that lenient tolerances were used
    |
    = help: Replace with `is_ready`

tests/unit/strategies/components/test_performance_parity_validator.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import numpy as np
 6 | | import pandas as pd
 7 | | import pytest
 8 | | from datetime import datetime, timedelta
 9 | | 
10 | | from src.strategies.components.testing.performance_parity_validator import (
11 | |     MetricComparison,
12 | |     MetricType,
13 | |     PerformanceComparisonReport,
14 | |     PerformanceParityValidator,
15 | |     ToleranceConfig,
16 | |     ValidationResult,
17 | | )
18 | | 
19 | | 
20 | | class TestToleranceConfig:
   | |_^ I001
21 |       """Test ToleranceConfig dataclass."""
   |
   = help: Organize imports

tests/unit/strategies/components/test_performance_parity_validator.py:8:22: F401 [*] `datetime.datetime` imported but unused
   |
 6 | import pandas as pd
 7 | import pytest
 8 | from datetime import datetime, timedelta
   |                      ^^^^^^^^ F401
 9 | 
10 | from src.strategies.components.testing.performance_parity_validator import (
   |
   = help: Remove unused import

tests/unit/strategies/components/test_performance_parity_validator.py:8:32: F401 [*] `datetime.timedelta` imported but unused
   |
 6 | import pandas as pd
 7 | import pytest
 8 | from datetime import datetime, timedelta
   |                                ^^^^^^^^^ F401
 9 | 
10 | from src.strategies.components.testing.performance_parity_validator import (
   |
   = help: Remove unused import

tests/unit/strategies/components/test_performance_parity_validator.py:400:16: E712 Avoid equality comparisons to `True`; use `if report.certified:` for truth checks
    |
399 |         assert report.overall_result == ValidationResult.PASS
400 |         assert report.certified == True
    |                ^^^^^^^^^^^^^^^^^^^^^^^^ E712
401 |         assert report.total_metrics_tested == 2
402 |         assert report.metrics_passed == 2
    |
    = help: Replace with `report.certified`

tests/unit/strategies/components/test_performance_parity_validator.py:433:16: E712 Avoid equality comparisons to `False`; use `if not report.certified:` for false checks
    |
432 |         assert report.overall_result == ValidationResult.FAIL
433 |         assert report.certified == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ E712
434 |         assert report.metrics_failed == 1
    |
    = help: Replace with `not report.certified`

tests/unit/strategies/components/test_performance_parity_validator.py:463:16: E712 Avoid equality comparisons to `False`; use `if not report.certified:` for false checks
    |
462 |         assert report.overall_result == ValidationResult.WARNING
463 |         assert report.certified == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ E712
464 |         assert report.metrics_warning == 1
    |
    = help: Replace with `not report.certified`

tests/unit/strategies/components/test_performance_parity_validator.py:547:16: E712 Avoid equality comparisons to `False`; use `if not report.certified:` for false checks
    |
545 |         assert report.trade_count_legacy == 0
546 |         assert report.trade_count_new == 0
547 |         assert report.certified == False
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^ E712
548 |         assert report.certification_timestamp is None
    |
    = help: Replace with `not report.certified`

tests/unit/strategies/components/test_statistical_tests.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import numpy as np
 6 | | import pandas as pd
 7 | | import pytest
 8 | | from unittest.mock import patch
 9 | | 
10 | | from src.strategies.components.testing.statistical_tests import (
11 | |     EquivalenceTests,
12 | |     FinancialStatisticalTests,
13 | |     StatisticalTestResult,
14 | |     format_test_results,
15 | | )
16 | | 
17 | | 
18 | | class TestStatisticalTestResult:
   | |_^ I001
19 |       """Test StatisticalTestResult dataclass."""
   |
   = help: Organize imports

tests/unit/strategies/components/test_statistical_tests.py:39:16: E712 Avoid equality comparisons to `True`; use `if result.reject_null:` for truth checks
   |
37 |         assert result.critical_value == 1.96
38 |         assert result.confidence_level == 0.95
39 |         assert result.reject_null == True
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
40 |         assert result.interpretation == "Significant result"
41 |         assert result.notes == "Test notes"
   |
   = help: Replace with `result.reject_null`

tests/unit/strategies/components/test_statistical_tests.py:134:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
132 |         # All results should have valid statistics
133 |         for result in results:
134 |             assert isinstance(result.statistic, (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
135 |             assert 0 <= result.p_value <= 1
136 |             assert isinstance(result.reject_null, bool)
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:153:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
151 |         # All results should have valid statistics
152 |         for result in results:
153 |             assert isinstance(result.statistic, (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
154 |             assert 0 <= result.p_value <= 1
155 |             assert isinstance(result.reject_null, bool)
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:172:20: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
170 |         # (though this is probabilistic, so we just check structure)
171 |         for result in results:
172 |             assert isinstance(result.statistic, (int, float))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
173 |             assert 0 <= result.p_value <= 1
174 |             assert isinstance(result.reject_null, bool)
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:184:9: F841 Local variable `rejection_count` is assigned to but never used
    |
183 |         # For clearly non-normal data, at least some tests should reject normality
184 |         rejection_count = sum(1 for r in results if r.reject_null)
    |         ^^^^^^^^^^^^^^^ F841
185 |         # We expect at least one test to detect non-normality, but this is probabilistic
186 |         # so we just check that tests ran
    |
    = help: Remove assignment to unused variable `rejection_count`

tests/unit/strategies/components/test_statistical_tests.py:214:16: E712 Avoid equality comparisons to `False`; use `if not result.reject_null:` for false checks
    |
212 |         assert result.statistic == 3.0  # Last statistic
213 |         assert result.p_value == 0.1  # Last p-value
214 |         assert result.reject_null == False  # p > 0.05
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
215 |         assert "3 lags" in result.notes
    |
    = help: Replace with `not result.reject_null`

tests/unit/strategies/components/test_statistical_tests.py:240:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
238 |         assert len(adf_results) == 1
239 |         adf_result = adf_results[0]
240 |         assert isinstance(adf_result.statistic, (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
241 |         assert isinstance(adf_result.p_value, (int, float))
242 |         assert isinstance(adf_result.reject_null, bool)
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:241:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
239 |         adf_result = adf_results[0]
240 |         assert isinstance(adf_result.statistic, (int, float))
241 |         assert isinstance(adf_result.p_value, (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
242 |         assert isinstance(adf_result.reject_null, bool)
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:248:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
246 |         assert len(kpss_results) == 1
247 |         kpss_result = kpss_results[0]
248 |         assert isinstance(kpss_result.statistic, (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
249 |         assert isinstance(kpss_result.p_value, (int, float))
250 |         assert kpss_result.reject_null == False  # p > 0.05
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:249:16: UP038 Use `X | Y` in `isinstance` call instead of `(X, Y)`
    |
247 |         kpss_result = kpss_results[0]
248 |         assert isinstance(kpss_result.statistic, (int, float))
249 |         assert isinstance(kpss_result.p_value, (int, float))
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP038
250 |         assert kpss_result.reject_null == False  # p > 0.05
    |
    = help: Convert to `X | Y`

tests/unit/strategies/components/test_statistical_tests.py:250:16: E712 Avoid equality comparisons to `False`; use `if not kpss_result.reject_null:` for false checks
    |
248 |         assert isinstance(kpss_result.statistic, (int, float))
249 |         assert isinstance(kpss_result.p_value, (int, float))
250 |         assert kpss_result.reject_null == False  # p > 0.05
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E712
251 | 
252 |     def test_stationarity_tests_insufficient_data(self, test_engine):
    |
    = help: Replace with `not kpss_result.reject_null`

tests/unit/strategies/components/test_statistical_tests.py:287:13: B007 Loop control variable `category` not used within loop body
    |
286 |         # Each category should have test results
287 |         for category, test_list in results.items():
    |             ^^^^^^^^ B007
288 |             if test_list:  # Some categories might be empty due to insufficient data
289 |                 assert all(isinstance(test, StatisticalTestResult) for test in test_list)
    |
    = help: Rename unused `category` to `_category`

tests/unit/strategies/test_ensemble_strategies.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import numpy as np
 6 | | import pandas as pd
 7 | | import pytest
 8 | | 
 9 | | from src.strategies.ensemble_weighted import (
10 | |     create_ensemble_weighted_strategy,
11 | |     BASE_POSITION_SIZE,
12 | |     MIN_POSITION_SIZE_RATIO,
13 | |     MAX_POSITION_SIZE_RATIO,
14 | |     STOP_LOSS_PCT,
15 | |     TAKE_PROFIT_PCT,
16 | | )
17 | | from src.strategies.components import (
18 | |     Strategy,
19 | |     SignalDirection,
20 | |     WeightedVotingSignalGenerator,
21 | |     ConfidenceWeightedSizer,
22 | |     MLBasicSignalGenerator,
23 | |     MLSignalGenerator,
24 | | )
25 | | 
26 | | pytestmark = pytest.mark.unit
   | |_^ I001
   |
   = help: Organize imports

tests/unit/strategies/test_ml_sentiment_unit.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / from types import MethodType
 6 | | 
 7 | | import pytest
 8 | | 
 9 | | from src.strategies.components import Strategy, SignalDirection
10 | | from src.strategies.ml_sentiment import create_ml_sentiment_strategy
11 | | 
12 | | pytestmark = pytest.mark.unit
   | |_^ I001
   |
   = help: Organize imports

tests/unit/strategies/test_momentum_leverage_unit.py:5:1: I001 [*] Import block is un-sorted or un-formatted
   |
 3 |   """
 4 |   
 5 | / import pytest
 6 | | 
 7 | | from src.strategies.momentum_leverage import create_momentum_leverage_strategy
 8 | | from src.strategies.components import Strategy, SignalDirection
 9 | | 
10 | | pytestmark = pytest.mark.unit
   | |_^ I001
   |
   = help: Organize imports

tests/unit/test_time_exits.py:109:55: UP017 [*] Use `datetime.UTC` alias
    |
107 |         from datetime import timezone
108 | 
109 |         entry_utc = datetime(2024, 1, 1, 0, 0, tzinfo=timezone.utc)
    |                                                       ^^^^^^^^^^^^ UP017
110 |         now_utc = datetime(2024, 1, 2, 1, 0, tzinfo=timezone.utc)
111 |         should_exit, reason = policy.check_time_exit_conditions(entry_utc, now_utc)
    |
    = help: Convert to `datetime.UTC` alias

tests/unit/test_time_exits.py:110:53: UP017 [*] Use `datetime.UTC` alias
    |
109 |         entry_utc = datetime(2024, 1, 1, 0, 0, tzinfo=timezone.utc)
110 |         now_utc = datetime(2024, 1, 2, 1, 0, tzinfo=timezone.utc)
    |                                                     ^^^^^^^^^^^^ UP017
111 |         should_exit, reason = policy.check_time_exit_conditions(entry_utc, now_utc)
112 |         assert should_exit
    |
    = help: Convert to `datetime.UTC` alias

Found 845 errors.
[*] 719 fixable with the `--fix` option (87 hidden fixes can be enabled with the `--unsafe-fixes` option).


        # STDERR
        reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/models.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/backtest.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/strategies.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/dev.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/migration.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/regime.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/railway.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/test_commands.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/train.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions/0002_strategy_management.py
reformatted /Users/alex/Sites/ai-trading-bot/examples/component_testing_example.py
reformatted /Users/alex/Sites/ai-trading-bot/examples/performance_parity_validation_example.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0004_time_exits.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/data.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0005_mfe_mae_tracking.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0007_bridge_migration.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0003_dynamic_risk_tables.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0009_correlation_tables.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0006_partial_operations.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0008_trailing_stops.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0010_add_prediction_cache_table.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/1c703144e570_remove_order_id_from_positions.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0011_fix_orderstatus_enum.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/5dd66bc421f8_update_positions_to_use_positionstatus.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/793bd06278f0_consolidated_schema_from_models.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions_backup/0012_fix_position_status_consistency.py
reformatted /Users/alex/Sites/ai-trading-bot/src/config/constants.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions/0002_add_strategy_management_tables.py
reformatted /Users/alex/Sites/ai-trading-bot/src/dashboards/backtesting/dashboard.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/db.py
reformatted /Users/alex/Sites/ai-trading-bot/src/dashboards/market_prediction/dashboard.py
reformatted /Users/alex/Sites/ai-trading-bot/cli/commands/train_commands.py
reformatted /Users/alex/Sites/ai-trading-bot/src/data_providers/cached_data_provider.py
reformatted /Users/alex/Sites/ai-trading-bot/src/data_providers/binance_provider.py
reformatted /Users/alex/Sites/ai-trading-bot/src/data_providers/coinbase_provider.py
reformatted /Users/alex/Sites/ai-trading-bot/src/examples/live_trading_example.py
reformatted /Users/alex/Sites/ai-trading-bot/migrations/versions/0001_initial_schema.py
reformatted /Users/alex/Sites/ai-trading-bot/src/live/runner.py
reformatted /Users/alex/Sites/ai-trading-bot/src/live/strategy_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/live/regime_strategy_switcher.py
reformatted /Users/alex/Sites/ai-trading-bot/src/live/account_sync.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/src/database/models.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/mfe_mae_analyzer.py
reformatted /Users/alex/Sites/ai-trading-bot/src/ml/safe_model_trainer.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/mfe_mae_tracker.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/partial_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/correlation_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/time_exits.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/trailing_stops.py
reformatted /Users/alex/Sites/ai-trading-bot/src/dashboards/monitoring/dashboard.py
reformatted /Users/alex/Sites/ai-trading-bot/src/position_management/dynamic_risk.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/features/selector.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/config.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/models/exceptions.py
reformatted /Users/alex/Sites/ai-trading-bot/src/backtesting/engine.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/models/registry.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/features/pipeline.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/models/onnx_runner.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/src/regime/detector.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/utils/caching.py
reformatted /Users/alex/Sites/ai-trading-bot/src/database/manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/risk/risk_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/momentum_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/src/prediction/engine.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/emergency_controls.py
reformatted /Users/alex/Sites/ai-trading-bot/src/regime/enhanced_detector.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/performance_monitoring_system.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/runtime.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/regime_context.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/ml_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/performance_monitor.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/position_sizer.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/risk_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/performance_tracker.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_factory.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/src/live/trading_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_lineage.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_registry.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/performance_comparison_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_selector.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/technical_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/performance_parity_validator.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/component_performance_tester.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/strategy_switcher.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/regime_tester.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/statistical_tests.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/performance_attribution.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_emergency_controls.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/ml_adaptive.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/ml_sentiment.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/ensemble_weighted.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/ml_basic.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_strategy_selector.py
reformatted /Users/alex/Sites/ai-trading-bot/src/utils/cache_utils.py
reformatted /Users/alex/Sites/ai-trading-bot/src/utils/logging_events.py
reformatted /Users/alex/Sites/ai-trading-bot/src/utils/geo_detection.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/momentum_leverage.py
reformatted /Users/alex/Sites/ai-trading-bot/src/utils/logging_context.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_mfe_mae_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_performance_monitor.py
reformatted /Users/alex/Sites/ai-trading-bot/src/utils/logging_config.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_partial_operations_backtester.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_dynamic_risk_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/contracts/test_engine_database_contracts.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_datasets.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/test_dynamic_risk_integration_live_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_trailing_stops_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/test_correlation_enforcement.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/test_mfe_mae_persistence_throttle.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/test_time_exits_live_engine_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_database_concurrency.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_database_error_paths.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live/test_partial_operations_live_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_regime_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_correlation_enforcement_backtester.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_full_position_lifecycle.py
reformatted /Users/alex/Sites/ai-trading-bot/src/strategies/components/testing/test_strategy_switcher.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_fallbacks.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/conftest.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/backtesting/test_regime_regression.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_order_table_integration.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_order_management_methods.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_database_logging.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_error_handling_workflows.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/live_trading/test_engine_core.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_component_trading_workflows.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_position_entry_order.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_order_lifecycle.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/integration/test_account_sync.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_component_testing_framework.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/performance/automated_performance_monitor.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/performance/test_component_performance_regression.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/mocks/mock_database.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/performance/performance_baseline_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/run_tests.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_performance_tracker.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_regime_tester.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_ml_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_regime_context.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_position_sizer.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_strategy_factory.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_strategy_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/backtesting/test_backtester_initialization.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_strategy_runtime.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_risk_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/database/test_correlation_models.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/backtesting/test_returns_calculations.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/database/test_utility_methods.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/database/test_data_retrieval.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/__init__.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_strategy_lineage.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/database/test_mfe_mae_database.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_mfe_mae_tracker.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_strategy_registry.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_strategy_overrides.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_dynamic_risk_database.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/strategies/components/test_technical_signal_generator.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_mfe_mae_analyzer.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/predictions/test_engine_structured.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/predictions/test_config.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_correlation_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_dynamic_risk.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/risk/test_correlation_in_risk_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_partial_manager.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/position_management/test_trailing_stops.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_ml_basic_logging_unit.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/predictions/test_prediction_caching.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/components/test_performance_parity_validator.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/predictions/test_models.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_ml_basic_unit.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_ml_sentiment_unit.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/test_model_registry.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_ensemble_strategies.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/test_smoke.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_ml_adaptive_position_management.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/test_order_models.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/components/test_statistical_tests.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/test_momentum_leverage_unit.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/test_order_status_methods.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/strategies/components/test_performance_comparison_engine.py
reformatted /Users/alex/Sites/ai-trading-bot/tests/unit/test_time_exits.py

All done! ✨ 🍰 ✨
192 files reformatted, 165 files left unchanged.
make: *** [code-quality] Error 1

