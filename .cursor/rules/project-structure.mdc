# 📁 Trading Bot Project Structure

## 🎯 Project Overview

Sophisticated cryptocurrency trading system with **trend-following risk containment**. Supports backtesting, live trading, ML models, and multiple data sources.

**Core Philosophy**: Trade with the trend, not against it. Protect capital above all else.

---

## 📁 Directory Structure & Purpose

### **Core Application (`src/`)**
```
src/
├── data_providers/          # Market & sentiment data adapters
│   ├── data_provider.py     # Abstract base class
│   ├── binance_provider.py    # Live/historical price data
│   ├── senticrypt_provider.py      # Sentiment data (SentiCrypt API)
│   ├── cryptocompare_sentiment.py  # Alternative sentiment source
│   ├── cached_data_provider.py     # API response caching
│   └── mock_data_provider.py       # Test data provider
│
├── indicators/              # Technical indicator calculations
│   └── technical.py         # RSI, EMA, MACD, ATR, Bollinger Bands
│
├── strategies/              # Trading strategy implementations
│   ├── base.py              # Abstract base class
│   ├── adaptive.py          # Adaptive EMA strategy
│   ├── enhanced.py          # Multi-indicator strategy
│   ├── ml_basic.py          # ML price prediction strategy
│   ├── ml_with_sentiment.py # Advanced ML + sentiment strategy
│   └── high_risk_high_reward.py # Aggressive trading strategy
│
├── risk/                    # Risk management system
│   └── risk_manager.py      # Position sizing, stop-loss, exposure limits
│
├── live/                    # Live trading engine
│   ├── trading_engine.py    # Main live trading orchestrator
│   └── strategy_manager.py  # Strategy hot-swapping & management
│
├── backtesting/             # Historical simulation engine
│   └── engine.py            # Vectorized backtesting with sentiment
│
├── database/                # Database management & models
│   ├── manager.py           # Database connection & operations
│   └── models.py            # SQLAlchemy models (trades, positions, etc.)
│
├── config/                  # Configuration management
│   ├── config_manager.py    # Multi-provider config system
│   ├── constants.py         # System constants
│   └── providers/           # Config providers (env, Railway, etc.)
│
├── performance/             # Performance metrics calculation
│   └── metrics.py           # Sharpe ratio, drawdown, returns
│
└── monitoring/              # Real-time monitoring dashboard
    ├── dashboard.py         # Web dashboard application
    └── templates/           # Dashboard HTML templates
```

### **Supporting Directories**
```
├── ml/                      # Trained ML models & metadata
│   ├── btcusdt_price.*      # Price prediction models (.h5/.keras/.onnx)
│   ├── btcusdt_sentiment.*  # Sentiment-enhanced models
│   └── *_metadata.json      # Model training metadata
│
├── data/                    # Cached market & sentiment data
│   ├── BTCUSDT_1d.csv       # Historical price data
│   └── senticrypt_sentiment_data.csv  # Cached sentiment data
│
├── scripts/                 # CLI utilities & automation
│   ├── run_backtest.py      # Backtesting runner
│   ├── run_live_trading.py  # Live trading launcher
│   ├── train_model.py       # ML model training
│   ├── cache_manager.py     # Data cache management
│   └── start_dashboard.py   # Monitoring dashboard launcher
│
├── tests/                   # Comprehensive test suite
│   ├── run_tests.py         # Enhanced test runner
│   ├── test_live_trading.py # Live trading tests (CRITICAL)
│   ├── test_risk_management.py # Risk management tests
│   └── test_strategies.py   # Strategy logic tests
│
├── docs/                    # Documentation & guides
├── migrations/              # Database schema migrations
└── logs/                    # Application logs
```

---

## 🏗️ Core Architecture Components

### **1. Data Layer (`src/data_providers/`)**
**Purpose**: Abstracts data acquisition from multiple sources

- **Base Class**: `data_provider.py` - Defines the interface all providers must implement
- **Implementations**:
  - `binance_provider.py` - Live/historical price data from Binance
  - `senticrypt_provider.py` - Sentiment data from SentiCrypt API
  - `cryptocompare_sentiment.py` - CryptoCompare sentiment integration
  - `cached_data_provider.py` - Caches API responses to reduce load and costs

**Usage Pattern**:
```python
# Always prefer cached providers for backtesting
provider = CachedDataProvider(BinanceDataProvider())
data = provider.get_historical_data('BTCUSDT', start_date, end_date)
```

### **2. Indicator Layer (`src/indicators/`)**
**Purpose**: Calculate technical indicators for trading signals

- `technical.py` - Contains all technical indicator calculations (RSI, EMA, Bollinger Bands, etc.)
- Indicators should be pure functions that operate on price/volume data
- Always return pandas Series or DataFrames

### **3. Strategy Layer (`src/strategies/`)**
**Purpose**: Implement trading logic

**Base Class Pattern**:
```python
class YourStrategy(BaseStrategy):
    def __init__(self, name):
        super().__init__(name)
        # Strategy-specific initialization
    
    def calculate_indicators(self, df):
        # Calculate strategy-specific indicators
        pass
    
    def check_entry_conditions(self, df, index):
        # Entry signal logic
        pass
    
    def check_exit_conditions(self, df, index, entry_price):
        # Exit signal logic
        pass
```

**Strategy Types**:
- `adaptive.py` - Adjusts to market conditions
- `enhanced.py` - Combines multiple indicators
- `ml_basic.py` - Uses ML price predictions
- `ml_with_sentiment.py` - Advanced ML with sentiment
- `high_risk_high_reward.py` - Aggressive trading

### **4. Execution Layer**

**Backtesting (`src/backtesting/`)**: 
- `engine.py` - Simulates trades on historical data
- Tracks performance metrics, drawdowns, and generates reports

**Live Trading (`src/live/`)**: 
- `trading_engine.py` - Executes real trades via exchange APIs
- `strategy_manager.py` - Manages strategy lifecycle and switching

**Risk Management (`src/risk/`)**: 
- `risk_manager.py` - Position sizing, stop-loss management, exposure limits
- Always enforces max risk per trade (1-2% of capital)

### **5. ML Layer (`ml/`)**
**Purpose**: Store trained models and metadata

- Models are saved in multiple formats: `.h5`, `.keras`, `.onnx`
- Each model has accompanying metadata JSON and training visualization PNG
- Two main model types:
  - Price prediction models (`btcusdt_price.*`)
  - Sentiment-based models (`btcusdt_sentiment.*`)

---

## 🔧 Development Workflows

### **1. Creating a New Strategy**
1. Create new file in `src/strategies/` extending `BaseStrategy`
2. Implement required methods: `calculate_indicators()`, `check_entry_conditions()`, etc.
3. Add strategy to `src/strategies/__init__.py`
4. Test with backtesting before live deployment

### **2. Adding New Data Sources**
1. Create new provider in `src/data_providers/` extending `DataProvider`
2. Implement required methods: `get_historical_data()`, `get_live_data()`
3. Add caching wrapper if needed
4. Test with existing strategies

### **3. Adding New Indicators**
1. Add function to `src/indicators/technical.py`
2. Ensure it's a pure function operating on pandas DataFrames
3. Add tests in `tests/test_indicators.py`
4. Update strategy implementations to use new indicator

---

## 📊 Data Management

### **CSV Files (`data/`)**
- `BTCUSDT_1d.csv` - Historical daily price data
- `senticrypt_sentiment_data.csv` - Cached sentiment data
- Update regularly for accurate backtesting

### **Caching Strategy**
- Use `CachedDataProvider` wrapper for expensive API calls
- Cache invalidation handled by `scripts/cache_manager.py`
- Cached data stored in `data/` directory

---

## 🛡️ Important Conventions

### **1. Error Handling**
```python
try:
    # Risky operation
    result = api_call()
except SpecificException as e:
    logger.error(f"API call failed: {e}")
    # Always have fallback behavior
    return default_value
```

### **2. Logging**
- Use Python's logging module, not print statements
- Log levels: DEBUG (dev only), INFO (important events), WARNING (issues), ERROR (failures)
- Include context in log messages

### **3. Security**
- NEVER commit API keys or secrets
- Use environment variables for credentials
- Validate all external data inputs
- Implement rate limiting for API calls

### **4. Configuration**
- Strategy configs passed via constructor
- Use sensible defaults for all parameters
- Document all configuration options

### **5. Testing**
- Backtest new strategies on multiple market conditions
- Validate ML models with out-of-sample data
- Paper trade before real money

---

## 🧪 Testing Structure

### **Test Categories**
```bash
# Smoke Tests - Quick validation (fastest)
python tests/run_tests.py smoke

# Unit Tests - Individual components
python tests/run_tests.py unit

# Integration Tests - Component interactions
python tests/run_tests.py integration

# Critical Tests - Live trading + risk management
python tests/run_tests.py critical

# All Tests - Complete test suite
python tests/run_tests.py all

# Validate Environment - Check test setup
python tests/run_tests.py validate
```

### **Test Files**
- `test_strategies.py` - Strategy logic tests
- `test_data_providers.py` - Data provider tests
- `test_risk_management.py` - Risk management tests
- `test_live_trading.py` - Live trading tests (CRITICAL)
- `test_integration.py` - End-to-end tests

---

**For detailed implementation guides, use:**
- `fetch_rules(["architecture"])` - Complete system architecture
- `fetch_rules(["strategies"])` - Strategy development details
- `fetch_rules(["ml-models"])` - ML model training & integration
- `fetch_rules(["commands"])` - Complete command reference 
**For detailed implementation guides, use:**
- `fetch_rules(["architecture"])` - Complete system architecture
- `fetch_rules(["strategies"])` - Strategy development details
- `fetch_rules(["ml-models"])` - ML model training & integration
- `fetch_rules(["commands"])` - Complete command reference 