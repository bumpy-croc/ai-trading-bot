### General
- Follow repo patterns; match existing style and imports (absolute imports under `src/`).
- Add only essential comments; explain non-obvious decisions.
- Place constants/config in `src/config/constants.py` when cross-cutting.
- Do not create ad-hoc scripts; use existing `scripts/` and `tests/run_tests.py`.

### Security
- Never commit secrets. Use environment variables; see `src/utils/secrets.py`.
- Use parameterized queries with SQL; validate external inputs.

### Python
- Prefer clear names; avoid 1â€“2 char identifiers.
- Type hints for public APIs; avoid `Any` where possible.
- Early returns; handle edge cases first.

### Testing
- Add tests for new code; keep fast by default.
- Use fixtures; mock network/IO.
- Run `python tests/run_tests.py unit` locally; aim for green before PRs.

### Code Quality
- Run linting checks before finishing any job: `ruff check . --fix`
- Ensure all code passes ruff linting before committing
- Use pre-commit hooks: `pre-commit install` to automatically run checks

## 2. Security & Sensitive Information

- **Priority:** Security is paramount in all code generation.
- **Sensitive Data Handling:** Never embed actual sensitive information (API keys, passwords, personal data, specific user-dependent URLs/paths) directly in code.
- **Placeholders:**
	- Always use clear, conventional placeholders (e.g., `YOUR_API_KEY`, `DATABASE_CONNECTION_STRING`, `PATH_TO_YOUR_FILE`).
	- If a placeholder's purpose isn't obvious, briefly explain the expected value type.
	- Remind Architect to replace placeholders with actual values.
- **Secure Practices:**
	- Advise on secure methods for managing secrets (e.g., environment variables, secret management tools, appropriately secured configuration files). Remind Architect if such configuration files should be added to `.gitignore`.
	- When generating code that handles file uploads, user inputs, or interacts with external systems, explicitly mention potential security vectors (e.g., injection, XSS, insecure deserialization) and suggest standard mitigation techniques if not already part of the core request.
	- Use parameterised queries instead of f string where possible to avoid SQL injection

## 3. Information Gathering & Verification

- **Strategic Web Search:** You shoud use web search tool for:
	- Rapidly changing data
		- latest library versions,
		- breaking API changes,
	- Unknown API
- **Source Reliability:** When using web search, prioritize official documentation, reputable technical blogs, or original sources. Be critical of information from forums or less reliable outlets.
- **Knowledge Cutoff:** Be mindful of your knowledge cutoff date. Information about technologies or versions released after this date may be inaccurate unless verified via web search.
- **No Search Simulation**: Never simulate a web search or fabricate its results (e.g., by inventing URLs or "findings"). If a search is required, you must perform a real search using the available tools and base your answer on the retrieved information, not on a guess of what a search might find.

## 4. Code Generation Standards

### 4.1. General Principles
- **Configuration Variables:** Place all user-customizable configuration variables at the beginning of scripts.
- When a task requires disabling functionality without its removal, this must be implemented using a configuration variable (i.e., a feature flag).
- **Constants:** When a number is used for a calculation, place it in a well named constant to indicate what it represents and use the constant instead in the calculation code.
- **CLI Support:** If a script lacks a GUI (and GUI creation isn't requested), provide full CLI support. This includes:
	- Intuitive argument parsing.
	- Clear help messages.
	- Informative error messages for invalid inputs.
- **Error Handling (Generated Code):** Implement robust error handling. Prioritize specific exception types over generic ones. Log errors with sufficient context (e.g., relevant variables, operation attempted). Avoid silencing errors unless explicitly requested and justified. Proactively include input validation and checks for null/undefined/unexpected values.
- **Architectural Pattern Adherence:** When implementing features, strive to adhere to established architectural patterns within the project (if known or inferable). If a new pattern is introduced or a deviation is necessary, flag this in the 'Rationale for significant deviations' section with a brief justification.

### 4.2.  Comments
- Use **Better Comments** style exclusively (except for docstrings/XML docs):
	- `{language comment symbol} {better comments symbol} {comment}`
	- Symbols: `*` (Important), `!` (Warning), `?` (Question), `TODO:` (Future plans).
- All comments and docstrings must be in English.
- For complex algorithms or non-obvious logic, include a high-level comment explaining the approach before the code block, in addition to any necessary Better Comments within.
- **Use Declarative, A-temporal Comments:** Comments must describe the code's current state and purpose, not the history of changes made to it. All comments should be written in the simple present tense to describe what the code *does*, not what it *used to do* or *now does*. Examples:
	- **Bad:** `// Now we use the new v2 API.`
	- **Good:** `// * Fetches user data from the v2 API.`
	- **Bad:** `// TODO: This was a temporary fix, will rewrite later.`
	- **Good:** `// TODO: Refactor this logic to be more efficient.`
- Don't add words like "new" or "now we are adding this".
- Only comment what is truly useful and ads value
- When writting comments, avoid referencing points in time, PRs, chats or reasons for the code change. Use simple language that describes the context

### 4.3. Dependency Management
- **Declaration:** Clearly state any new external libraries or dependencies introduced.
- **Installation:** Provide the command for installation (e.g., `pip install <package>`, `npm install <package>`).
- **Import Statements:** Ensure all necessary `import` / `using` / `#include` statements are present for the code to compile/run.
- **Versioning:**
	- If a specific version isn't provided for a new dependency, aim for the latest stable version compatible with the project context.
	- Verify this version using a web search if necessary and possible.

### 4.4. Python
- **Style Guide:** Adhere to the Google Python Style Guide.
- **Docstrings:** Use Google Style Docstrings.
- Use `tqdm` whenever I ask to add a progress bar.
- **Critical: Run ruff, black, mypy and bandit after editing files and fix any linting, formatting, type and security issues.**

### 4.5. JavaScript
- **Style Guide:** Adhere to the Airbnb JavaScript Style Guide.
- **Docstrings:** Use JSDoc.

### 4.6. TypeScript
- **Style Guide:** Adhere to the TypeScript Deep Dive Guide.
- **Docstrings:** Use TSDoc.

### 4.10. Documentation
- Don't create excess documentation. When you do, it should live in the `docs` folder.

### 4.11. Git
- Verify correct branch before committing; fetch `origin/develop` before merge/rebase.

# 5. Pull Request (PR) Reviews

When I ask you to review a pull request:
- Always use the github MCP server to get the details of a pull request I mention.
- Investigate existing comments and address the feedback where appropriate. If you disagree with a comment, say so and why instead of making the change.
- Review the pull request like you were a senior software engineer. Add a github review with your comments, and summarize the changes requested for me before implementing anything.
