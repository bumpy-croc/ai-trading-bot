name: Unit Tests

on:
  pull_request
 
permissions:
  contents: read
  issues: write
  pull-requests: read
  actions: write

jobs:
  test:
    strategy:
      matrix:
        split-index: [1, 2, 3, 4]
        python-version: [3.11]
      fail-fast: false  # Continue running other groups if one fails

    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run split ${{ matrix.split-index }} of 4
      run: |
        echo "=== Starting split: ${{ matrix.split-index }}/4 ==="
        echo "PYTHONPATH=$PYTHONPATH"
        python -m pytest \
          -v \
          --tb=short \
          --timeout=300 \
          --ignore=tests/integration \
          -m "not integration" \
          -n 2 --dist=loadgroup \
          -k "not test_ml_basic_backtest_2024_smoke and not test_very_large_dataset" \
          --splits 4 \
          --group ${{ matrix.split-index }} \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --junitxml=junit-${{ matrix.split-index }}.xml

    - name: Upload test reports (split ${{ matrix.split-index }})
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.split-index }}
        path: |
          junit-${{ matrix.split-index }}.xml
          coverage.xml
        retention-days: 7

  autofix_agent:
    needs: test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      COPILOT_AGENT_ASSIGNEE: copilot-coding-agent
    steps:
      - name: Request Copilot agent to fix on PR branch
        if: ${{ needs.test.result == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            const prPayload = context.payload.pull_request;
            if (!prPayload) {
              core.info('No pull_request payload available; nothing to do.');
              return;
            }
            const prNumber = prPayload.number;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });

            const sameRepo = pr.head.repo.full_name === `${owner}/${repo}`;
            const canModifyFork = !!pr.maintainer_can_modify;
            const canPush = sameRepo || canModifyFork;

            const runId = process.env.GITHUB_RUN_ID;
            const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${runId}`;
            const title = `Auto-fix CI on PR #${pr.number} (commit to ${pr.head.ref})`;

            const instructions = (canPush
              ? `
              Please fix failing tests by committing directly to the PR branch:
              - PR: #${pr.number} (${pr.title})
              - Branch: ${pr.head.repo.full_name}:${pr.head.ref}
              - CI run: ${runUrl}
              Requirements:
              - Reproduce failures, implement minimal fixes, update/add tests if needed.
              - Push commits to the existing branch (do NOT open a new PR).
              - Keep changes focused and explain the fix in a short commit message.
              `.trim()
              : `
              The PR head branch is not writable (fork without maintainer edits). Open a new PR with fixes:
              - PR: #${pr.number} (${pr.title})
              - CI run: ${runUrl}
              `.trim()
            );

            // De-dupe: look for an open issue with ai:autofix mentioning this PR
            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue is:open label:ai:autofix in:title "PR #${pr.number}"`
            });
            if (search.data.items.length > 0) {
              const issueNum = search.data.items[0].number;
              await github.rest.issues.createComment({
                owner, repo, issue_number: issueNum,
                body: `CI failed again. Latest run: ${runUrl}`
              });
              core.info(`Updated existing issue #${issueNum}`);
              return;
            }

            // Ensure labels exist
            const desiredLabels = ['ai:autofix','ci-failure'];
            for (const name of desiredLabels) {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch (err) {
                if (err.status === 404) {
                  await github.rest.issues.createLabel({ owner, repo, name, color: '0E8A16' });
                } else {
                  core.warning(`Label check failed for ${name}: ${err.message}`);
                }
              }
            }

            const issue = await github.rest.issues.create({
              owner, repo,
              title,
              body: `${instructions}\n\nRun ID: ${runId}`,
              labels: ['ai:autofix','ci-failure'],
              assignees: [process.env.COPILOT_AGENT_ASSIGNEE],
            });
            core.info(`Created issue #${issue.data.number}`);
