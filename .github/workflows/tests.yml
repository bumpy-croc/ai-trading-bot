name: Tests

on:
  pull_request:
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  pull-requests: read
  actions: read

jobs:
  # Unit tests - split into 4 parallel jobs
  unit-tests:
    strategy:
      matrix:
        split-index: [1, 2, 3, 4]
      fail-fast: false  # Continue running other groups if one fails
    
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}
      TEST_TYPE: unit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests (split ${{ matrix.split-index }} of 4)
      run: |
        echo "=== Starting unit tests split: ${{ matrix.split-index }}/4 ==="
        echo "PYTHONPATH=$PYTHONPATH"
        python -m pytest \
          -v \
          --tb=short \
          --timeout=300 \
          --ignore=tests/integration \
          -m "not integration" \
          -n 2 --dist=loadgroup \
          -k "not test_ml_basic_backtest_2024_smoke and not test_very_large_dataset" \
          --splits 4 \
          --group ${{ matrix.split-index }} \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --junitxml=junit-unit-${{ matrix.split-index }}.xml
    
    - name: Upload unit test reports (split ${{ matrix.split-index }})
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-reports-${{ matrix.split-index }}
        path: |
          junit-unit-${{ matrix.split-index }}.xml
          coverage.xml
        retention-days: 7

  # Integration tests - run in parallel with unit tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONPATH: ${{ github.workspace }}/src:${{ github.workspace }}
      TEST_TYPE: integration
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: trading_bot
          POSTGRES_PASSWORD: dev_password_123
          POSTGRES_DB: trading_bot
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U trading_bot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U trading_bot; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
    
    - name: Set up database schema
      env:
        DATABASE_URL: postgresql://trading_bot:dev_password_123@localhost:5432/trading_bot
      run: |
        echo "=== Setting up database schema ==="
        python -c "
        from src.database.manager import DatabaseManager
        from src.database.models import Base
        try:
            db = DatabaseManager()
            Base.metadata.create_all(db.engine)
            print('✅ Database schema created successfully')
        except Exception as e:
            print(f'❌ Failed to create database schema: {e}')
            raise
        "
    
    - name: Run integration tests (with DB & external providers)
      env:
        DATABASE_URL: postgresql://trading_bot:dev_password_123@localhost:5432/trading_bot
      run: |
        echo "=== Starting integration tests ==="
        echo "PYTHONPATH=$PYTHONPATH"
        python tests/run_tests.py integration -q \
          --pytest-args --junitxml=junit-integration.xml
    
    - name: Upload integration test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-reports
        path: |
          junit-integration.xml
        retention-days: 7

