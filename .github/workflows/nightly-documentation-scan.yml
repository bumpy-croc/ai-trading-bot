name: Nightly Cursor Docs Agent

on:
  schedule:
    - cron: "0 3 * * *"  # 03:00 UTC nightly
  workflow_dispatch:

concurrency:
  group: nightly-cursor-docs-agent
  cancel-in-progress: false

jobs:
  launch-agent:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine default branch and date
        id: vars
        shell: bash
        run: |
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          if [ -z "$DEFAULT_BRANCH" ]; then
            DEFAULT_BRANCH="${GITHUB_REF_NAME}"
          fi
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Launch Cursor Background Agent for Documentation
        run: |
          DATE="${{ steps.vars.outputs.date }}"
          DEFAULT_BRANCH="${{ steps.vars.outputs.default_branch }}"
          
          # Build comprehensive prompt for documentation maintenance
          PROMPT="You are performing a comprehensive documentation analysis and maintenance for the AI Trading Bot repository. This is a nightly maintenance task to ensure all documentation is up to date and accurate without changing code behavior.

          ## Scope
          - Review all documentation in \`docs/\` directory and README files across \`src/\` modules
          - Fix outdated content, broken links, and TODO/FIXME items in documentation
          - Align examples and setup instructions with current codebase
          - Ensure API documentation matches current implementations
          - Update configuration guides to reflect current settings
          - Verify all code examples work with current codebase

          ## Critical Constraints
          - **NO BEHAVIORAL CHANGES**: Only update documentation, comments, and examples
          - Do not modify runtime behavior, business logic, or core functionality
          - Maintain existing documentation style and structure
          - Keep all code examples functional and accurate
          - Preserve the existing documentation hierarchy and organization

          ## Documentation Areas to Review
          - \`docs/\` directory: All markdown files and guides
          - Module READMEs in \`src/\` subdirectories
          - Main project README.md
          - Configuration documentation and examples
          - API documentation and code comments
          - Setup and installation guides
          - Architecture and design documentation

          ## Acceptance Criteria
          - No broken links in any documentation
          - All code examples run successfully against current codebase
          - Module READMEs present and accurate where appropriate
          - Configuration examples match current project settings
          - API documentation reflects current implementations
          - All TODO/FIXME items in docs are addressed or removed
          - Documentation is consistent with current code structure

          ## Deliverables
          - Create a pull request with all documentation updates
          - PR should target the $DEFAULT_BRANCH branch
          - Include a detailed summary of all changes made
          - Ensure all documentation changes are accurate and non-breaking
          - Test all code examples to verify they work

          Date: $DATE
          Repository: ${{ github.server_url }}/${{ github.repository }}"

          echo "=== Launching Cursor Background Agent for Documentation ==="
          echo "Date: $DATE"
          echo "Default Branch: $DEFAULT_BRANCH"

          # Ensure Cursor API key is present
          if [[ -z "$CURSOR_API_KEY" ]]; then
            echo "Missing CURSOR_API_KEY secret; cannot contact Cursor API"
            exit 1
          fi
          
          # Build JSON payload safely with jq
          jq -n \
            --arg prompt "$PROMPT" \
            --arg repo "${{ github.server_url }}/${{ github.repository }}" \
            --arg ref "$DEFAULT_BRANCH" \
            '{prompt:{text:$prompt}, source:{repository:$repo, ref:$ref}}' > /tmp/cursor_payload.json

          echo "Payload prepared:"
          cat /tmp/cursor_payload.json

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.cursor.com/v0/agents" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CURSOR_API_KEY" \
            -d @/tmp/cursor_payload.json)
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo "✅ Cursor Background Agent launched successfully for documentation maintenance"
            echo "The agent will analyze the documentation and create a PR with updates shortly."
          else
            echo "❌ Failed to launch Cursor Background Agent"
            echo "Status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
