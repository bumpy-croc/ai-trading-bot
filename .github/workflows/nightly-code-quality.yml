name: Nightly Code Quality Maintenance

on:
  schedule:
    - cron: "0 2 * * *"  # 02:00 UTC nightly
  workflow_dispatch:

concurrency:
  group: nightly-code-quality
  cancel-in-progress: false

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine default branch and date
        id: vars
        shell: bash
        run: |
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          if [ -z "$DEFAULT_BRANCH" ]; then
            DEFAULT_BRANCH="${GITHUB_REF_NAME}"
          fi
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
          echo "date=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.5.0 black==24.4.2 mypy==1.10.0 bandit==1.7.9 pip-audit
          pip install -r requirements.txt || true

      - name: Prepare artifact directories
        run: |
          mkdir -p artifacts/security

      - name: Run ruff (fix)
        run: |
          ruff check . --fix || true

      - name: Run black (format)
        run: |
          black . || true

      - name: Stage formatting changes
        run: |
          git add -A

      - name: Run mypy
        id: mypy
        continue-on-error: true
        run: |
          set -o pipefail
          mypy --config-file mypy.ini -p src.strategies -p src.database -p src.prediction -p src.data_providers -p src.config -p src.utils -p src.live -p src.backtesting -p src.risk -p src.position_management | tee artifacts/mypy.txt
          echo "mypy_exit=$?" >> $GITHUB_OUTPUT || true

      - name: Run bandit
        id: bandit
        continue-on-error: true
        run: |
          bandit -c pyproject.toml -r src -q -f txt -o artifacts/security/bandit.txt || true

      - name: Run pip-audit
        id: pipaudit
        continue-on-error: true
        run: |
          pip-audit -r requirements.txt -f json -o artifacts/security/pip-audit.json || true
          if command -v jq >/dev/null 2>&1; then
            jq -r '
              def row: "| \(.name) | \(.version) | \(.vulns|map(.id)|join(", ")) |";
              if (.dependencies|length)==0 then "# pip-audit: no known vulnerabilities found" else
              "# pip-audit summary\n\n| package | version | vulns |\n|---|---|---|\n" + (.dependencies|map(select(.vulns|length>0))|map(row)|join("\n")) end
            ' artifacts/security/pip-audit.json > artifacts/security/pip-audit.md || echo "# pip-audit run failed" > artifacts/security/pip-audit.md
          else
            echo "jq not available; saving minimal pip-audit summary" > artifacts/security/pip-audit.md
          fi

      - name: Run tests (optional)
        continue-on-error: true
        run: |
          pytest -q || true

      - name: Stage analysis artifacts
        run: |
          git add artifacts/mypy.txt artifacts/security/bandit.txt artifacts/security/pip-audit.json artifacts/security/pip-audit.md || true

      - name: Detect non-trivial issues
        id: detect
        shell: bash
        env:
          MYPY_EXIT: ${{ steps.mypy.outputs.mypy_exit }}
        run: |
          mypy_failed=false
          if [ -n "$MYPY_EXIT" ] && [ "$MYPY_EXIT" != "0" ]; then
            mypy_failed=true
          fi

          bandit_has_issues=false
          if [ -s artifacts/security/bandit.txt ]; then
            if ! grep -qi "No issues identified" artifacts/security/bandit.txt; then
              bandit_has_issues=true
            fi
          fi

          pipaudit_has_vulns=false
          if [ -s artifacts/security/pip-audit.json ]; then
            if command -v jq >/dev/null 2>&1; then
              if jq -e 'any(.dependencies[]?; (.vulns // []) | length > 0)' artifacts/security/pip-audit.json >/dev/null; then
                pipaudit_has_vulns=true
              fi
            else
              python - <<'PY'
              import json,sys
              try:
                  with open('artifacts/security/pip-audit.json') as f:
                      data=json.load(f)
                  deps=data.get('dependencies',[])
                  print('true' if any(d.get('vulns') for d in deps) else 'false')
                  except Exception:
                  print('false')
              PY
              | grep -q true && pipaudit_has_vulns=true || true
            fi
          fi

          needs_cursor_agent=false
          if $mypy_failed || $bandit_has_issues || $pipaudit_has_vulns; then
            needs_cursor_agent=true
          fi

          echo "mypy_failed=$mypy_failed" >> $GITHUB_OUTPUT
          echo "bandit_has_issues=$bandit_has_issues" >> $GITHUB_OUTPUT
          echo "pipaudit_has_vulns=$pipaudit_has_vulns" >> $GITHUB_OUTPUT
          echo "needs_cursor_agent=$needs_cursor_agent" >> $GITHUB_OUTPUT

      - name: Launch Cursor Background Agent for Code Quality
        if: ${{ steps.detect.outputs.needs_cursor_agent == 'true' }}
        run: |
          DATE="${{ steps.vars.outputs.date }}"
          DEFAULT_BRANCH="${{ steps.vars.outputs.default_branch }}"
          
          # Build comprehensive prompt for code quality fixes
          PROMPT="You are performing a comprehensive code quality analysis and fixes for the AI Trading Bot repository. This is a nightly maintenance task to address code quality issues without changing behavior.

          ## Scope
          - Fix mypy type-check failures (see artifacts/mypy.txt)
          - Address Bandit security findings safely without behavioral changes (see artifacts/security/bandit.txt)
          - For dependencies with vulnerabilities (artifacts/security/pip-audit.md), prefer code-level mitigations; do NOT upgrade pinned versions in requirements.txt
          - Ensure all code follows project standards (ruff, black formatting)
          - Maintain existing functionality - NO BEHAVIORAL CHANGES ALLOWED

          ## Critical Constraints
          - **NO BEHAVIORAL CHANGES**: Only safe refactors, type annotations, and formatting fixes
          - Follow project configs in pyproject.toml, mypy.ini, pytest.ini
          - Keep formatting consistent with existing ruff/black standards
          - Do not modify business logic, trading algorithms, or core functionality
          - Focus on type safety, security best practices, and code quality improvements

          ## Acceptance Criteria
          - CI must pass on the default branch target ($DEFAULT_BRANCH)
          - Tests must pass: pytest -q
          - Lints must be clean: ruff check .; mypy src; bandit -c pyproject.toml -r src
          - All changes must be backwards compatible
          - No breaking changes to existing APIs or interfaces

          ## Artifacts to Consult
          - artifacts/mypy.txt - Type checking issues
          - artifacts/security/bandit.txt - Security findings
          - artifacts/security/pip-audit.md - Dependency vulnerabilities summary

          ## Deliverables
          - Create a pull request with all code quality fixes
          - PR should target the $DEFAULT_BRANCH branch
          - Include a detailed summary of all changes made
          - Ensure all fixes are safe and non-breaking

          Date: $DATE
          Repository: ${{ github.server_url }}/${{ github.repository }}"

          echo "=== Launching Cursor Background Agent for Code Quality ==="
          echo "Date: $DATE"
          echo "Default Branch: $DEFAULT_BRANCH"

          # Ensure Cursor API key is present
          if [[ -z "$CURSOR_API_KEY" ]]; then
            echo "Missing CURSOR_API_KEY secret; cannot contact Cursor API"
            exit 1
          fi
          
          # Build JSON payload safely with jq
          jq -n \
            --arg prompt "$PROMPT" \
            --arg repo "${{ github.server_url }}/${{ github.repository }}" \
            --arg ref "$DEFAULT_BRANCH" \
            '{prompt:{text:$prompt}, source:{repository:$repo, ref:$ref}}' > /tmp/cursor_payload.json

          echo "Payload prepared:"
          cat /tmp/cursor_payload.json

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.cursor.com/v0/agents" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CURSOR_API_KEY" \
            -d @/tmp/cursor_payload.json)
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo "✅ Cursor Background Agent launched successfully for code quality fixes"
            echo "The agent will analyze the codebase and create a PR with fixes shortly."
          else
            echo "❌ Failed to launch Cursor Background Agent"
            echo "Status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}

