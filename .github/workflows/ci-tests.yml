name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    # Built-in pip cache enabled above

    - name: Install Python dependencies
      timeout-minutes: 10
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Debug - Pre-test system info
      timeout-minutes: 2
      run: |
        echo "=== System Information ==="
        echo "Date: $(date)"
        echo "Uptime: $(uptime)"
        echo "Python version: $(python --version)"
        echo "Python location: $(which python)"
        echo "Available memory: $(free -h || echo 'free command not available')"
        echo "CPU cores: $(nproc || echo 'nproc not available')"
        echo "Disk usage: $(df -h || echo 'df command not available')"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "=== Process list before tests ==="
        ps aux | head -20
        echo "=== Environment variables ==="
        env | grep -E "(CI|GITHUB|PYTHON|PATH)" | sort

    - name: Debug - Test runner setup
      timeout-minutes: 2
      run: |
        echo "=== Testing test runner ==="
        echo "Test runner exists: $(ls -la tests/run_tests.py)"
        echo "Test runner permissions: $(ls -l tests/run_tests.py)"
        echo "Python can import test runner:"
        python -c "import sys; sys.path.insert(0, '.'); import tests.run_tests; print('✅ Import successful')" || echo "❌ Import failed"
        echo "=== Testing pytest directly ==="
        python -c "import pytest; print(f'✅ Pytest version: {pytest.__version__}')" || echo "❌ Pytest import failed"

    - name: Debug - Test pytest directly
      timeout-minutes: 5
      run: |
        echo "=== Testing pytest directly ==="
        echo "Current time: $(date)"
        
        # Test basic pytest discovery
        echo "=== Testing pytest discovery ==="
        python -m pytest --collect-only -q tests/ | head -20
        
        # Test pytest with single worker
        echo "=== Testing pytest with single worker ==="
        python -m pytest -v --tb=short -n 0 tests/test_smoke.py || echo "Single worker test failed"
        
        # Test pytest with 2 workers (CI setting)
        echo "=== Testing pytest with 2 workers ==="
        timeout 60 python -m pytest -v --tb=short -n 2 --dist=loadgroup tests/test_smoke.py || echo "2 worker test failed or timed out"
        
        echo "=== Direct pytest tests completed ==="
        echo "Current time: $(date)"

    - name: Debug - Monitor during test execution
      timeout-minutes: 35
      run: |
        echo "=== Starting background monitoring ==="
        
        # Start background monitoring
        (
          while true; do
            echo "=== $(date) - Process and resource snapshot ==="
            echo "Active processes:"
            ps aux | grep -E "(python|pytest)" | grep -v grep || echo "No python/pytest processes found"
            echo "Memory usage:"
            free -h || echo "free command not available"
            echo "CPU usage:"
            top -bn1 | head -10 || echo "top command not available"
            echo "=== End snapshot ==="
            sleep 30
          done
        ) &
        MONITOR_PID=$!
        
        echo "Background monitoring started with PID $MONITOR_PID"
        
        # Run the actual test command
        echo "=== Running test command ==="
        python -u tests/run_tests.py unit -q
        
        # Stop monitoring
        echo "=== Stopping monitoring ==="
        kill $MONITOR_PID 2>/dev/null || true
        wait $MONITOR_PID 2>/dev/null || true
        
        echo "=== Test execution completed ==="

    - name: Debug - Post-test system info
      if: always()
      timeout-minutes: 2
      run: |
        echo "=== Post-test system information ==="
        echo "Date: $(date)"
        echo "Process list after tests:"
        ps aux | head -20
        echo "Memory usage after tests:"
        free -h || echo "free command not available"
        echo "Disk usage after tests:"
        df -h || echo "df command not available"
