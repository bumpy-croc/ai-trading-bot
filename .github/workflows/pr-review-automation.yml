name: PR Review Automation

on:
  pull_request_review:
    types: [submitted, edited]

jobs:
  cursor-agent-review:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # Only run for bugbot or copilot reviews
    if: |
      github.event.review.user.login == 'bugbot' || 
      github.event.review.user.login == 'copilot' ||
      github.event.review.user.login == 'github-actions[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    
    - name: Launch Cursor Background Agent
      run: |
        echo "=== Launching Cursor Background Agent for PR Review ==="
        echo "PR: ${{ github.event.pull_request.html_url }}"
        echo "Reviewer: ${{ github.event.review.user.login }}"
        echo "Review ID: ${{ github.event.review.id }}"
        echo "Review State: ${{ github.event.review.state }}"
        
        # Get PR details - store in files to handle multiline content safely
        PR_URL="${{ github.event.pull_request.html_url }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        REVIEW_STATE="${{ github.event.review.state }}"
        REVIEWER="${{ github.event.review.user.login }}"
        
        # Store multiline content in temporary files to avoid shell escaping issues
        cat > pr_body.txt << 'PRBODY_EOF'
        ${{ github.event.pull_request.body }}
        PRBODY_EOF
        
        cat > review_body.txt << 'REVIEWBODY_EOF'
        ${{ github.event.review.body }}
        REVIEWBODY_EOF
        
        # Get PR comments
        echo "=== Fetching PR Comments ==="
        COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
          | jq -r '.[] | "- " + .user.login + ": " + .body' | tr '\n' ' ' || echo "No comments found")
        
        # Get review comments
        echo "=== Fetching Review Comments ==="
        REVIEW_COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews/${{ github.event.review.id }}/comments" \
          | jq -r '.[] | "- " + .user.login + " (line " + (.line|tostring) + "): " + .body' | tr '\n' ' ' || echo "No review comments found")
        
        # Construct the prompt
        cat > prompt.txt << EOF
        Verify this issue. Use your knowledge of the project coding style, settings, architecture, known issues and other relevant information to verify the issue and decide whether it should be fixed or not. If you do decide to fix it, leave a quick comment on the PR to say what you did and why. If you decide not to fix it, leave a comment to say why not.
        
        PR Details:
        - URL: $PR_URL
        - Title: $PR_TITLE
        - Body: $(cat pr_body.txt)
        
        Review Details:
        - Reviewer: $REVIEWER
        - State: $REVIEW_STATE
        - Review Body: $(cat review_body.txt)
        
        PR Comments:
          $COMMENTS
        
        Review Comments:
          $REVIEW_COMMENTS
        
        Please analyze this PR review and take appropriate action based on the reviewer's feedback.
        EOF
        
        echo "=== Sending to Cursor Background Agent ==="
        
        # Launch Cursor background agent
        curl -X POST "https://api.cursor.sh/v0/agents" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.CURSOR_API_KEY }}" \
          -d "{ \"prompt\": $(cat prompt.txt | jq -Rs .), \"workspace\": \"${{ github.workspace }}\", \"model\": \"gpt-4o-mini\", \"temperature\": 0.1, \"max_tokens\": 4000 }"
        
        echo ""
        echo "=== Cursor Background Agent Launched ==="
        echo "The agent will analyze the PR review and take appropriate action."
        echo "Check the PR for any comments or changes made by the agent."
        
        # Cleanup temporary files
        rm -f pr_body.txt review_body.txt prompt.txt
  
    - name: Log Review Details
      run: |
        echo "=== Review Summary ==="
        echo "PR: ${{ github.event.pull_request.html_url }}"
        echo "Reviewer: ${{ github.event.review.user.login }}"
        echo "State: ${{ github.event.review.state }}"
        echo "Submitted at: ${{ github.event.review.submitted_at }}"
        echo "Cursor agent launched successfully" 