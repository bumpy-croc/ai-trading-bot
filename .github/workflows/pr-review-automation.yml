name: PR Review Automation

on:
  pull_request_review:
    types: [submitted]

jobs:
  cursor-agent-review:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    # Only run for bugbot or copilot reviews
    if: |
      github.event.review.user.login == 'bugbot' || 
      github.event.review.user.login == 'copilot' ||
      github.event.review.user.login == 'github-actions[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    
    - name: Get Unresolved Review Comments
      id: get-comments
      run: |
        echo "=== Fetching unresolved review comments ==="
        
        # Get all review comments for this review
        COMMENTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews/${{ github.event.review.id }}/comments")
        
        # Filter for unresolved comments only
        UNRESOLVED_COMMENTS=$(echo "$COMMENTS_RESPONSE" | jq -r '
          map(select(.resolved_at == null)) | 
          map({
            path: .path,
            line: .line,
            body: .body,
            position: .position
          }) | 
          tojson
        ')
        
        # Count unresolved comments
        UNRESOLVED_COUNT=$(echo "$COMMENTS_RESPONSE" | jq -r 'map(select(.resolved_at == null)) | length')
        
        echo "Found $UNRESOLVED_COUNT unresolved comments"
        
        # Store in step output
        echo "unresolved_comments=$UNRESOLVED_COMMENTS" >> $GITHUB_OUTPUT
        echo "unresolved_count=$UNRESOLVED_COUNT" >> $GITHUB_OUTPUT
        
        # Also store the review body
        echo "review_body=${{ github.event.review.body }}" >> $GITHUB_OUTPUT
    
    - name: Launch Cursor Background Agent
      run: |
        echo "=== Launching Cursor Background Agent for PR Review ==="
        echo "PR: ${{ github.event.pull_request.html_url }}"
        echo "Reviewer: ${{ github.event.review.user.login }}"
        echo "Review State: ${{ github.event.review.state }}"
        echo "Unresolved Comments: ${{ steps.get-comments.outputs.unresolved_count }}"
        
        # Construct detailed prompt with review comments
        cat > prompt.txt << EOF
        A PR review has been submitted with unresolved comments that need attention.
        
        PR URL: ${{ github.event.pull_request.html_url }}
        Reviewer: ${{ github.event.review.user.login }}
        Review State: ${{ github.event.review.state }}
        
        Review Summary:
        ${{ steps.get-comments.outputs.review_body }}
        
        Unresolved Comments (${{ steps.get-comments.outputs.unresolved_count }}):
        ${{ steps.get-comments.outputs.unresolved_comments }}
        
        Please analyze these unresolved comments and take appropriate action:
        1. Review each unresolved comment carefully
        2. Determine if the issue should be fixed or if there's a valid reason not to fix it
        3. If you decide to fix an issue, implement the fix and leave a comment explaining what you did
        4. If you decide not to fix an issue, leave a comment explaining why not
        5. Push your changes directly to the PR branch
        
        Notes: 1. Use your knowledge of the project coding style, settings, architecture, known issues and other relevant information to make informed decisions. 2. Use the Github API or the Github MCP server to access the PR details.
        EOF
        
        echo "=== Sending to Cursor Background Agent ==="
        
        # Launch Cursor background agent with environment variables
        curl -X POST "https://api.cursor.com/v0/agents" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.CURSOR_API_KEY }}" \
          -d "{ \"prompt\": { \"text\": $(cat prompt.txt | jq -Rs .) }, \"source\": { \"repository\": \"${{ github.server_url }}/${{ github.repository }}\", \"ref\": \"${{ github.event.pull_request.head.ref }}\" }, \"env\": { \"GITHUB_TOKEN\": \"${{ secrets.GITHUB_TOKEN }}\" } }"
        
        echo ""
        echo "=== Cursor Background Agent Launched ==="
        echo "The agent will analyze the unresolved review comments and take appropriate action."
        echo "Check the PR for any comments or changes made by the agent."
        
        # Cleanup temporary files
        rm -f prompt.txt
  
    - name: Log Review Details
      run: |
        echo "=== Review Summary ==="
        echo "PR: ${{ github.event.pull_request.html_url }}"
        echo "Reviewer: ${{ github.event.review.user.login }}"
        echo "State: ${{ github.event.review.state }}"
        echo "Submitted at: ${{ github.event.review.submitted_at }}"
        echo "Unresolved comments: ${{ steps.get-comments.outputs.unresolved_count }}"
        echo "Cursor agent launched successfully" 