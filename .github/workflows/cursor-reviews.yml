name: CodeBot PR Reviews

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      review_mode:
        description: 'Review mode'
        required: true
        default: 'hunt'
        type: choice
        options:
          - hunt
          - analyze
          - security
          - performance
          - review
      verbose:
        description: 'Verbose output'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  codebot-review:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    # Only trigger on comments starting with 'codebot' or manual dispatch
    if: |
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, 'codebot')) ||
      (github.event_name == 'pull_request_review_comment' && startsWith(github.event.comment.body, 'codebot')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR number for issue comments
        id: pr-info
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            # For issue comments, we need to check if it's on a PR
            PR_NUMBER=$(gh pr view ${{ github.event.issue.number }} --json number --jq '.number' 2>/dev/null || echo "")
            if [[ -z "$PR_NUMBER" ]]; then
              echo "Comment is not on a pull request, skipping"
              echo "is_pr=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.event.issue.html_url }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual dispatch, user needs to specify PR in some way
            # For now, we'll try to get it from the current branch
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "pr_number=unknown" >> $GITHUB_OUTPUT
            echo "pr_url=manual-dispatch" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Parse review mode and verbose flag
        id: parse-command
        run: |
          # Default values
          REVIEW_MODE="hunt"
          VERBOSE="false"
          
          # Parse from workflow dispatch inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            REVIEW_MODE="${{ github.event.inputs.review_mode }}"
            VERBOSE="${{ github.event.inputs.verbose }}"
          else
            # Parse from comment body
            COMMENT_BODY="${{ github.event.comment.body || github.event.review.body }}"
            
            # Detect review mode
            if [[ "$COMMENT_BODY" =~ codebot[[:space:]]+hunt ]]; then
              REVIEW_MODE="hunt"
            elif [[ "$COMMENT_BODY" =~ codebot[[:space:]]+analyze ]]; then
              REVIEW_MODE="analyze"
            elif [[ "$COMMENT_BODY" =~ codebot[[:space:]]+security ]]; then
              REVIEW_MODE="security"
            elif [[ "$COMMENT_BODY" =~ codebot[[:space:]]+performance ]]; then
              REVIEW_MODE="performance"
            elif [[ "$COMMENT_BODY" =~ codebot[[:space:]]+review ]]; then
              REVIEW_MODE="review"
            fi
            
            # Check for verbose flag
            if [[ "$COMMENT_BODY" =~ verbose ]]; then
              VERBOSE="true"
            fi
          fi
          
          echo "review_mode=$REVIEW_MODE" >> $GITHUB_OUTPUT
          echo "verbose=$VERBOSE" >> $GITHUB_OUTPUT
          echo "Detected review mode: $REVIEW_MODE (verbose: $VERBOSE)"
      
      - name: Build prompt for selected mode
        id: build-prompt
        run: |
          REVIEW_MODE="${{ steps.parse-command.outputs.review_mode }}"
          VERBOSE="${{ steps.parse-command.outputs.verbose }}"
          
          # Define prompts for each mode
          case "$REVIEW_MODE" in
            hunt)
              PROMPT="You are performing a focused code review for a GitHub Pull Request. Hunt for critical bugs, security vulnerabilities, and performance issues. Provide concise, actionable feedback focusing on: - Logic errors and edge cases - Security vulnerabilities - Performance bottlenecks - Critical bugs that could cause failures Be direct and focused. Prioritize the most important issues. Post your review as a PR comment using the GitHub API or MCP server. Use a clear, structured format with severity indicators (🔴 Critical, 🟡 Warning, 🔵 Info). Format code references using markdown code blocks with file paths."
              ;;
            
            analyze)
              PROMPT="You are performing a comprehensive code review for a GitHub Pull Request. Provide detailed analysis covering: - Code structure and design patterns - Potential bugs and edge cases - Security considerations - Performance implications - Best practices and maintainability - Test coverage and quality Post your review as a PR comment using the GitHub API or MCP server. Structure your feedback with clear sections and severity levels (🔴 Critical, 🟡 Warning, 🔵 Info). Use markdown formatting with code blocks and clear headings."
              ;;
            
            security)
              PROMPT="You are performing a security-focused code review for a GitHub Pull Request. Focus exclusively on security aspects: - Authentication and authorization vulnerabilities - Input validation and sanitization - SQL injection, XSS, CSRF vulnerabilities - Sensitive data exposure - Cryptographic weaknesses - Dependency vulnerabilities - API security issues Be thorough and flag even potential security concerns. Post your review as a PR comment using the GitHub API or MCP server. Use severity indicators: 🔴 Critical, 🟠 High, 🟡 Medium, 🔵 Low Include specific remediation recommendations for each issue."
              ;;
            
            performance)
              PROMPT="You are performing a performance-focused code review for a GitHub Pull Request. Focus on performance optimization opportunities: - Algorithmic efficiency (time and space complexity) - Database query optimization - Caching opportunities - Resource usage (memory, CPU, I/O) - Unnecessary computations or loops - Network request optimization - Potential bottlenecks Provide specific, actionable optimization suggestions with expected impact. Post your review as a PR comment using the GitHub API or MCP server. Use clear severity indicators: 🔴 Major Impact, 🟡 Moderate Impact, 🔵 Minor Impact Include code examples where applicable."
              ;;
            
            review)
              PROMPT="You are performing a comprehensive code review for a GitHub Pull Request. Provide a thorough, balanced review covering all aspects: - Correctness and logic - Security considerations - Performance implications - Code quality and maintainability - Testing and documentation - Best practices and patterns - Edge cases and error handling Be constructive and thorough. Balance critique with recognition of good practices. Post your review as a PR comment using the GitHub API or MCP server. Structure your feedback with clear sections: 1. Summary 2. Critical Issues (🔴) 3. Important Considerations (🟡) 4. Suggestions (🔵) 5. Positive Observations (✅) Use markdown formatting with code blocks and clear explanations."
              ;;
            
            *)
              echo "Unknown review mode: $REVIEW_MODE"
              exit 1
              ;;
          esac
          
          # Add verbose flag context if enabled
          if [[ "$VERBOSE" == "true" ]]; then
            PROMPT="$PROMPT VERBOSE MODE ENABLED: Provide extended analysis with: - Detailed explanations for each issue - Code examples showing both problematic and improved versions - Additional context about why each issue matters - Links to relevant documentation or best practices where applicable"
          fi
          
          # Save prompt to file for easier handling
          echo "$PROMPT" > /tmp/review_prompt.txt
          echo "Prompt built successfully for mode: $REVIEW_MODE"
      
      - name: Launch Cursor Background Agent
        id: launch-agent
        run: |
          if [[ "${{ steps.pr-info.outputs.is_pr }}" != "true" ]]; then
            echo "Not a pull request, skipping agent launch"
            exit 0
          fi
          
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          PR_URL="${{ steps.pr-info.outputs.pr_url }}"
          REVIEW_MODE="${{ steps.parse-command.outputs.review_mode }}"
          
          # Read the prompt from file
          PROMPT_TEXT=$(cat /tmp/review_prompt.txt)
          
          # Build full prompt with PR context
          FULL_PROMPT="Pull Request Review Request PR #$PR_NUMBER: $PR_URL Review Mode: $REVIEW_MODE $PROMPT_TEXT --- IMPORTANT: After completing your review, post your findings as a comment on this pull request using the GitHub MCP server or GitHub API. Make sure to format your review with clear markdown, severity indicators, and actionable feedback. At the end of your review comment, include a section with a link to launch the same background agent to fix all the issues you identified. The link should use the format: [🤖 Fix All Issues](https://api.cursor.com/v0/agents?prompt=fix%20all%20issues%20identified%20in%20this%20review%20for%20PR%20#$PR_NUMBER&repo=${{ github.server_url }}/${{ github.repository }}&ref=$HEAD_REF) - this will allow the reviewer to easily trigger the same agent to implement fixes. After posting your review comment, remove the eyes reaction from the original triggering comment (the comment that started this review process) using the GitHub MCP server or GitHub API."
          
          # Get PR head ref
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_DATA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER 2>/dev/null || echo "")
            if [[ -n "$PR_DATA" && "$PR_DATA" != *"Not Found"* ]]; then
              HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref // empty' 2>/dev/null || echo "main")
            else
              HEAD_REF="main"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            HEAD_REF="${{ github.event.pull_request.head.ref }}"
          else
            HEAD_REF="${{ github.ref_name }}"
          fi

          # Final fallback for HEAD_REF
          if [[ -z "$HEAD_REF" || "$HEAD_REF" == "null" ]]; then
            HEAD_REF="main"
          fi
          
          echo "=== Launching Cursor Background Agent ==="
          echo "PR: #$PR_NUMBER"
          echo "Branch: $HEAD_REF"
          echo "Mode: $REVIEW_MODE"
          echo "Verbose: ${{ steps.parse-command.outputs.verbose }}"

          # Ensure Cursor API key is present
          if [[ -z "$CURSOR_API_KEY" ]]; then
            echo "Missing CURSOR_API_KEY secret; cannot contact Cursor API"
            exit 1
          fi
          
          # Build JSON payload safely with jq (avoid double-encoding)
          jq -n \
            --arg prompt "$FULL_PROMPT" \
            --arg repo "${{ github.server_url }}/${{ github.repository }}" \
            --arg ref "$HEAD_REF" \
            '{prompt:{text:$prompt}, source:{repository:$repo, ref:$ref}}' > /tmp/cursor_payload.json

          echo "Payload prepared:"
          cat /tmp/cursor_payload.json

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.cursor.com/v0/agents" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CURSOR_API_KEY" \
            -d @/tmp/cursor_payload.json)
          
          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
            echo "✅ Cursor Background Agent launched successfully"
            echo "The agent will analyze the PR and post a review comment shortly."
          else
            echo "❌ Failed to launch Cursor Background Agent"
            echo "Status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
      
      - name: React with eyes on triggering comment
        if: steps.launch-agent.outcome == 'success' && steps.pr-info.outputs.is_pr == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            gh api repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -f content='eyes'
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            gh api repos/${{ github.repository }}/pulls/comments/${{ github.event.comment.id }}/reactions \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -f content='eyes'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Post confirmation comment
        if: steps.launch-agent.outcome == 'success' && steps.pr-info.outputs.is_pr == 'true'
        run: |
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          REVIEW_MODE="${{ steps.parse-command.outputs.review_mode }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Post a quick confirmation comment with link to this run
          gh pr comment "$PR_NUMBER" --body "🤖 **CodeBot Review Launched**

          Review mode: \`$REVIEW_MODE\`
          Status: Agent launched and analyzing the code... [View workflow run]($RUN_URL)

          The review will be posted as a comment shortly."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                
      - name: Summary
        if: always()
        run: |
          echo "=== CodeBot Review Summary ==="
          echo "Event: ${{ github.event_name }}"
          echo "PR: ${{ steps.pr-info.outputs.pr_number }}"
          echo "Mode: ${{ steps.parse-command.outputs.review_mode }}"
          echo "Verbose: ${{ steps.parse-command.outputs.verbose }}"
          echo "Status: ${{ steps.launch-agent.outcome }}"

