"""Add Order table and PositionStatus enum

Revision ID: 0013_add_order_table
Revises: 0012_fix_pos_status
Create Date: 2025-01-11

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0013_add_order_table'
down_revision = '0012_fix_pos_status'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # * Create positionstatus enum only (ordertype already exists)
    connection = op.get_bind()
    
    # Check if positionstatus enum exists
    result = connection.execute(sa.text("SELECT 1 FROM pg_type WHERE typname = 'positionstatus'"))
    if not result.fetchone():
        op.execute("CREATE TYPE positionstatus AS ENUM ('OPEN', 'CLOSED')")
    
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('position_id', sa.Integer(), nullable=False),
    sa.Column('order_type', postgresql.ENUM('ENTRY', 'PARTIAL_EXIT', 'SCALE_IN', 'FULL_EXIT', name='ordertype', create_type=False), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'OPEN', 'FILLED', 'CANCELLED', 'FAILED', name='orderstatus', create_type=False), nullable=False),
    sa.Column('exchange_order_id', sa.String(length=100), nullable=True),
    sa.Column('internal_order_id', sa.String(length=100), nullable=False),
    sa.Column('symbol', sa.String(length=20), nullable=False),
    sa.Column('side', postgresql.ENUM('LONG', 'SHORT', name='positionside', create_type=False), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=18, scale=8), nullable=False),
    sa.Column('price', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('filled_quantity', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('filled_price', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('commission', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('filled_at', sa.DateTime(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('last_update', sa.DateTime(), nullable=True),
    sa.Column('strategy_name', sa.String(length=100), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('target_level', sa.Integer(), nullable=True),
    sa.Column('size_fraction', sa.Numeric(precision=18, scale=8), nullable=True),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['trading_sessions.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('internal_order_id', 'session_id', name='uq_order_internal_session')
    )
    op.create_index('idx_order_position_type', 'orders', ['position_id', 'order_type'], unique=False)
    op.create_index('idx_order_status_created', 'orders', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_orders_created_at'), 'orders', ['created_at'], unique=False)
    op.create_index(op.f('ix_orders_exchange_order_id'), 'orders', ['exchange_order_id'], unique=True)
    op.create_index(op.f('ix_orders_internal_order_id'), 'orders', ['internal_order_id'], unique=False)
    op.create_index(op.f('ix_orders_position_id'), 'orders', ['position_id'], unique=False)
    op.drop_index('idx_pred_cache_features', table_name='prediction_cache')
    op.drop_index('idx_pred_cache_model', table_name='prediction_cache')
    op.drop_constraint('prediction_cache_cache_key_key', 'prediction_cache', type_='unique')
    op.create_index(op.f('ix_prediction_cache_cache_key'), 'prediction_cache', ['cache_key'], unique=True)
    op.create_index(op.f('ix_prediction_cache_expires_at'), 'prediction_cache', ['expires_at'], unique=False)
    op.create_index(op.f('ix_prediction_cache_features_hash'), 'prediction_cache', ['features_hash'], unique=False)
    op.create_index(op.f('ix_prediction_cache_model_name'), 'prediction_cache', ['model_name'], unique=False)
    op.alter_column('trading_sessions', 'time_exit_config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=src.database.models.PortableJSON(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('trading_sessions', 'time_exit_config',
               existing_type=src.database.models.PortableJSON(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_prediction_cache_model_name'), table_name='prediction_cache')
    op.drop_index(op.f('ix_prediction_cache_features_hash'), table_name='prediction_cache')
    op.drop_index(op.f('ix_prediction_cache_expires_at'), table_name='prediction_cache')
    op.drop_index(op.f('ix_prediction_cache_cache_key'), table_name='prediction_cache')
    op.create_unique_constraint('prediction_cache_cache_key_key', 'prediction_cache', ['cache_key'])
    op.create_index('idx_pred_cache_model', 'prediction_cache', ['model_name'], unique=False)
    op.create_index('idx_pred_cache_features', 'prediction_cache', ['features_hash'], unique=False)
    op.drop_index(op.f('ix_orders_position_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_internal_order_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_exchange_order_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_created_at'), table_name='orders')
    op.drop_index('idx_order_status_created', table_name='orders')
    op.drop_index('idx_order_position_type', table_name='orders')
    op.drop_table('orders')
    
    # * Drop the positionstatus enum (ordertype was pre-existing)
    op.execute("DROP TYPE IF EXISTS positionstatus")
    # ### end Alembic commands ###
